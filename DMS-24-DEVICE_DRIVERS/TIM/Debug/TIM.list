
TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004efc  08004efc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f04  08004f04  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000004b0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000528  20000528  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fa5a  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002928  00000000  00000000  0002fb45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f08  00000000  00000000  00032470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b88  00000000  00000000  00033378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000237c4  00000000  00000000  00033f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001285b  00000000  00000000  000576c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9ada  00000000  00000000  00069f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e6c  00000000  00000000  001439fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00147868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004df0 	.word	0x08004df0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08004df0 	.word	0x08004df0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_GPIO_EXTI_Callback>:
volatile _Bool forwardDirFlag = 0;
volatile _Bool reverseDirFlag = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == CHANGE_THROTTLE_MAP_PIN) {
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d103      	bne.n	80004dc <HAL_GPIO_EXTI_Callback+0x18>
		changeThrottleMapFlag = 1;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <HAL_GPIO_EXTI_Callback+0x48>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
	}

	else {
		__NOP();
  }
}
 80004da:	e010      	b.n	80004fe <HAL_GPIO_EXTI_Callback+0x3a>
	else if (GPIO_Pin == FORWARD_DIRECTION_PIN){
 80004dc:	88fb      	ldrh	r3, [r7, #6]
 80004de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004e2:	d103      	bne.n	80004ec <HAL_GPIO_EXTI_Callback+0x28>
		forwardDirFlag = 1;
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_GPIO_EXTI_Callback+0x4c>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
}
 80004ea:	e008      	b.n	80004fe <HAL_GPIO_EXTI_Callback+0x3a>
	else if (GPIO_Pin == REVERSE_DIRECTION_PIN){
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004f2:	d103      	bne.n	80004fc <HAL_GPIO_EXTI_Callback+0x38>
		reverseDirFlag = 1;
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <HAL_GPIO_EXTI_Callback+0x50>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
}
 80004fa:	e000      	b.n	80004fe <HAL_GPIO_EXTI_Callback+0x3a>
		__NOP();
 80004fc:	bf00      	nop
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000094 	.word	0x20000094
 8000510:	20000095 	.word	0x20000095
 8000514:	20000096 	.word	0x20000096

08000518 <PDP_PedealAgreement>:
  * @brief  Pedal Agreement Check. Latches until throttle pedal is released
  * @retval 0 no fault
  * @retval 1 PAG_fault, both pedals currently active
  * @retval 2 PAG_fault, waiting for latch to reset
  */
PDP_StatusTypeDef PDP_PedealAgreement(uint32_t apps, uint32_t fbps){ 		// PAG_fault active
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	if (apps > APPS_PAG_THRESHOLD && fbps > FBPS_PAG_THRESHOLD) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b6b      	cmp	r3, #107	; 0x6b
 8000526:	d909      	bls.n	800053c <PDP_PedealAgreement+0x24>
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	2b13      	cmp	r3, #19
 800052c:	d906      	bls.n	800053c <PDP_PedealAgreement+0x24>
		PAG_fault = PDP_ERROR;
 800052e:	4b17      	ldr	r3, [pc, #92]	; (800058c <PDP_PedealAgreement+0x74>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
		return PAG_fault;
 8000534:	4b15      	ldr	r3, [pc, #84]	; (800058c <PDP_PedealAgreement+0x74>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	e020      	b.n	800057e <PDP_PedealAgreement+0x66>
	}

	else if (PAG_fault != PDP_OKAY && apps < APPS_PAG_RESET_THRESHOLD) {	// Check if latch can be reset
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <PDP_PedealAgreement+0x74>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d009      	beq.n	800055a <PDP_PedealAgreement+0x42>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b12      	cmp	r3, #18
 800054a:	d806      	bhi.n	800055a <PDP_PedealAgreement+0x42>
		PAG_fault = 0;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <PDP_PedealAgreement+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
		return PAG_fault;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <PDP_PedealAgreement+0x74>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	e011      	b.n	800057e <PDP_PedealAgreement+0x66>
	} else if (PAG_fault != PDP_OKAY && apps > APPS_PAG_THRESHOLD) {		// Waiting for latch to reset fault
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <PDP_PedealAgreement+0x74>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d009      	beq.n	8000578 <PDP_PedealAgreement+0x60>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b6b      	cmp	r3, #107	; 0x6b
 8000568:	d906      	bls.n	8000578 <PDP_PedealAgreement+0x60>
		PAG_fault = PDP_RESET_LATCH;
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <PDP_PedealAgreement+0x74>)
 800056c:	2202      	movs	r2, #2
 800056e:	701a      	strb	r2, [r3, #0]
		return PAG_fault;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <PDP_PedealAgreement+0x74>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	e002      	b.n	800057e <PDP_PedealAgreement+0x66>
	} else {
		return PAG_fault;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <PDP_PedealAgreement+0x74>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
	}
}
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000097 	.word	0x20000097

08000590 <PDP_AppsAgreement>:
  * @brief  APPS Agreement Check. Checks if both APPS sensors are within
  * %error threshold of each other.
  * @retval 0 no fault
  * @retval 1 AAC_fault, difference between pedal sensors > %threshold
  */
PDP_StatusTypeDef PDP_AppsAgreement(uint32_t apps1, uint32_t apps2) {
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	float absDif = abs((int) apps1 - (int) apps2);
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	1ad3      	subs	r3, r2, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	bfb8      	it	lt
 80005a4:	425b      	neglt	r3, r3
 80005a6:	ee07 3a90 	vmov	s15, r3
 80005aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ae:	edc7 7a03 	vstr	s15, [r7, #12]
	float percentDifference = (absDif / ((apps1 + apps2) / 2)) * 100; // Calculating percent Difference
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	085b      	lsrs	r3, r3, #1
 80005ba:	ee07 3a90 	vmov	s15, r3
 80005be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005c2:	edd7 6a03 	vldr	s13, [r7, #12]
 80005c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005ca:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000610 <PDP_AppsAgreement+0x80>
 80005ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005d2:	edc7 7a02 	vstr	s15, [r7, #8]

	if (percentDifference >= APPS_AAC_ERROR_THRESHOLD) {
 80005d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80005da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80005de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e6:	db06      	blt.n	80005f6 <PDP_AppsAgreement+0x66>
		AAC_fault = PDP_ERROR;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <PDP_AppsAgreement+0x84>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
		return AAC_fault;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <PDP_AppsAgreement+0x84>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	e005      	b.n	8000602 <PDP_AppsAgreement+0x72>
	} else {
		AAC_fault = PDP_OKAY;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <PDP_AppsAgreement+0x84>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
		return AAC_fault;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <PDP_AppsAgreement+0x84>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
	}

}
 8000602:	4618      	mov	r0, r3
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	42c80000 	.word	0x42c80000
 8000614:	20000098 	.word	0x20000098

08000618 <PDP_ThresholdCheck>:
// TODO SIGNAL PLAUSIBILITY FAULT LOGIC
PDP_StatusTypeDef PDP_ThresholdCheck(uint32_t sensor) {
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if (sensor <= SPA_MIN_THRESHOLD || sensor >= SPA_MAX_THRESHOLD) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b13      	cmp	r3, #19
 8000624:	d902      	bls.n	800062c <PDP_ThresholdCheck+0x14>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2bfe      	cmp	r3, #254	; 0xfe
 800062a:	d904      	bls.n	8000636 <PDP_ThresholdCheck+0x1e>
		SPA_fault = PDP_ERROR;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <PDP_ThresholdCheck+0x34>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
		return PDP_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	e003      	b.n	800063e <PDP_ThresholdCheck+0x26>
	} else {
		SPA_fault = PDP_OKAY;
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <PDP_ThresholdCheck+0x34>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
		return PDP_OKAY;
 800063c:	2300      	movs	r3, #0
	}

}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000099 	.word	0x20000099

08000650 <TIM_ConvertValueLinearApprox>:
/**
 * @brief Throttle Input Module
 * @return Throttle value scaled to desired map
 */
uint16_t TIM_ConvertValueLinearApprox(uint16_t inputValue, float yarrry[11])
{
 8000650:	b4b0      	push	{r4, r5, r7}
 8000652:	b095      	sub	sp, #84	; 0x54
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	80fb      	strh	r3, [r7, #6]
	float xarray[] = {0.0f, 25.6f, 51.2f, 76.8f, 102.4f, 128.0f, 153.6f, 179.2f, 204.8f, 230.4f, 256.0f};
 800065c:	4b3b      	ldr	r3, [pc, #236]	; (800074c <TIM_ConvertValueLinearApprox+0xfc>)
 800065e:	f107 040c 	add.w	r4, r7, #12
 8000662:	461d      	mov	r5, r3
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float x0 = 0.0f, x1 = 0.0f, y0 = 0.0f, y1 = 0.0f;
 8000674:	f04f 0300 	mov.w	r3, #0
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
 800067a:	f04f 0300 	mov.w	r3, #0
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	643b      	str	r3, [r7, #64]	; 0x40
 8000686:	f04f 0300 	mov.w	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c

	int i = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (xarray[i] < inputValue && i < 11) { // TODO: Improve the safety of this function
 8000690:	e002      	b.n	8000698 <TIM_ConvertValueLinearApprox+0x48>
		i++;
 8000692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000694:	3301      	adds	r3, #1
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (xarray[i] < inputValue && i < 11) { // TODO: Improve the safety of this function
 8000698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	3350      	adds	r3, #80	; 0x50
 800069e:	443b      	add	r3, r7
 80006a0:	3b44      	subs	r3, #68	; 0x44
 80006a2:	ed93 7a00 	vldr	s14, [r3]
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	ee07 3a90 	vmov	s15, r3
 80006ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b8:	d502      	bpl.n	80006c0 <TIM_ConvertValueLinearApprox+0x70>
 80006ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006bc:	2b0a      	cmp	r3, #10
 80006be:	dde8      	ble.n	8000692 <TIM_ConvertValueLinearApprox+0x42>
	}
	x0 = xarray[i - 1];
 80006c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006c2:	3b01      	subs	r3, #1
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	3350      	adds	r3, #80	; 0x50
 80006c8:	443b      	add	r3, r7
 80006ca:	3b44      	subs	r3, #68	; 0x44
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
	x1 = xarray[i];
 80006d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	3350      	adds	r3, #80	; 0x50
 80006d6:	443b      	add	r3, r7
 80006d8:	3b44      	subs	r3, #68	; 0x44
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
	y0 = yarrry[i - 1];
 80006de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006e4:	3b01      	subs	r3, #1
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
	y1 = yarrry[i];
 80006f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint16_t outputValue = (y1 + (inputValue - x1) * ((y1 - y0) / (x1 - x0))); // Linear Approximation, On a scale of 1-100
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	ee07 3a90 	vmov	s15, r3
 8000702:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000706:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800070a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800070e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000712:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000716:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800071a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800071e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000722:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000726:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800072a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800072e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800073a:	ee17 3a90 	vmov	r3, s15
 800073e:	877b      	strh	r3, [r7, #58]	; 0x3a
	return outputValue;
 8000740:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
}
 8000742:	4618      	mov	r0, r3
 8000744:	3754      	adds	r7, #84	; 0x54
 8000746:	46bd      	mov	sp, r7
 8000748:	bcb0      	pop	{r4, r5, r7}
 800074a:	4770      	bx	lr
 800074c:	08004e08 	.word	0x08004e08

08000750 <TIM_ChangeThrottleMap>:

/**
 * @brief Selects the next thottle map
 * @retval none
 */
void TIM_ChangeThrottleMap(){
 8000750:	b4b0      	push	{r4, r5, r7}
 8000752:	b0ad      	sub	sp, #180	; 0xb4
 8000754:	af00      	add	r7, sp, #0

	static uint16_t currentMap = 0;

	// TODO this should be made into some datastuct that can be easily loaded
	// from a file (such as an SD card in the future for quick mapping)
	float mapA[] = {0.0f, 409.6f, 819.2f, 1228.8f, 1638.4f, 2048.0f, 2457.6f, 2867.2f, 3276.8f, 3686.4f, 4096.0f};
 8000756:	4b43      	ldr	r3, [pc, #268]	; (8000864 <TIM_ChangeThrottleMap+0x114>)
 8000758:	f107 0484 	add.w	r4, r7, #132	; 0x84
 800075c:	461d      	mov	r5, r3
 800075e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000766:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float mapB[] = {1228.8f, 1515.52f, 1802.24f, 2088.96f, 2375.68f, 2662.4f, 2949.12f, 3235.84f, 3522.56f, 3809.28f, 4096.0f};
 800076e:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <TIM_ChangeThrottleMap+0x118>)
 8000770:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float mapC[] = {614.4f, 819.2f, 1024.0f, 1228.8f, 1638.4f, 2048.0f, 2457.6f, 2867.2f, 3276.8f, 3686.4f, 4096.0f};
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <TIM_ChangeThrottleMap+0x11c>)
 8000788:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800078c:	461d      	mov	r5, r3
 800078e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000796:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800079a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float mapD[] = {0.0f, 	102.4f, 307.2f, 512.0f, 819.2f, 1228.8f, 1638.4f, 2048.0f, 2457.6f, 3072.0f, 4096.0f};
 800079e:	4b34      	ldr	r3, [pc, #208]	; (8000870 <TIM_ChangeThrottleMap+0x120>)
 80007a0:	463c      	mov	r4, r7
 80007a2:	461d      	mov	r5, r3
 80007a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	if (currentMap < 4) {
 80007b4:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <TIM_ChangeThrottleMap+0x124>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	2b03      	cmp	r3, #3
 80007ba:	d806      	bhi.n	80007ca <TIM_ChangeThrottleMap+0x7a>
		currentMap++;
 80007bc:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <TIM_ChangeThrottleMap+0x124>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <TIM_ChangeThrottleMap+0x124>)
 80007c6:	801a      	strh	r2, [r3, #0]
 80007c8:	e002      	b.n	80007d0 <TIM_ChangeThrottleMap+0x80>
	} else {
		currentMap = 0;
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <TIM_ChangeThrottleMap+0x124>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	801a      	strh	r2, [r3, #0]
	}

	// TODO this could be a hashmap, or similar, so that it is easier to expand
	switch (currentMap){
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <TIM_ChangeThrottleMap+0x124>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d83e      	bhi.n	8000856 <TIM_ChangeThrottleMap+0x106>
 80007d8:	a201      	add	r2, pc, #4	; (adr r2, 80007e0 <TIM_ChangeThrottleMap+0x90>)
 80007da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007de:	bf00      	nop
 80007e0:	080007f1 	.word	0x080007f1
 80007e4:	0800080b 	.word	0x0800080b
 80007e8:	08000825 	.word	0x08000825
 80007ec:	0800083f 	.word	0x0800083f
	case 0:
		memcpy(map, mapA, sizeof(mapA));
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <TIM_ChangeThrottleMap+0x128>)
 80007f2:	461d      	mov	r5, r3
 80007f4:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80007f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000800:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000804:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		break;
 8000808:	e026      	b.n	8000858 <TIM_ChangeThrottleMap+0x108>
	case 1:
		memcpy(map, mapB, sizeof(mapB));
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <TIM_ChangeThrottleMap+0x128>)
 800080c:	461d      	mov	r5, r3
 800080e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800081a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800081e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		break;
 8000822:	e019      	b.n	8000858 <TIM_ChangeThrottleMap+0x108>
	case 2:
		memcpy(map, mapC, sizeof(mapC));
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <TIM_ChangeThrottleMap+0x128>)
 8000826:	461d      	mov	r5, r3
 8000828:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800082c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800082e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000834:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000838:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		break;
 800083c:	e00c      	b.n	8000858 <TIM_ChangeThrottleMap+0x108>
	case 3:
		memcpy(map, mapD, sizeof(mapD));
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <TIM_ChangeThrottleMap+0x128>)
 8000840:	461d      	mov	r5, r3
 8000842:	463c      	mov	r4, r7
 8000844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800084a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800084c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000850:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		break;
 8000854:	e000      	b.n	8000858 <TIM_ChangeThrottleMap+0x108>
	default:
		break;
 8000856:	bf00      	nop
	}
}
 8000858:	bf00      	nop
 800085a:	37b4      	adds	r7, #180	; 0xb4
 800085c:	46bd      	mov	sp, r7
 800085e:	bcb0      	pop	{r4, r5, r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	08004e34 	.word	0x08004e34
 8000868:	08004e60 	.word	0x08004e60
 800086c:	08004e8c 	.word	0x08004e8c
 8000870:	08004eb8 	.word	0x08004eb8
 8000874:	200002a8 	.word	0x200002a8
 8000878:	20000004 	.word	0x20000004

0800087c <TIM_Average>:
  *	Note, the signal is amplified to a 0-5V range using a hardware amp.
  * Motor Data sheet: https://wiki.neweagle.net/docs/Rinehart/PM100_User_Manual_3_2011.pdf
  * @todo Replace with a moving average algorithm, for large buffer sizes, an overflow may occur
  * @return averages first half the the input arrays
  */
uint16_t TIM_Average(uint16_t adc_buffer[], uint16_t depth){
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]
	uint32_t total = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < (depth / 2); i++) {  	// TODO Change buffer since to channel size
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	e00b      	b.n	80008aa <TIM_Average+0x2e>
		total += adc_buffer[i];					// TODO Change to moving average
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	4413      	add	r3, r2
 80008a2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < (depth / 2); i++) {  	// TODO Change buffer since to channel size
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	3301      	adds	r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	887b      	ldrh	r3, [r7, #2]
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	4293      	cmp	r3, r2
 80008b6:	dbec      	blt.n	8000892 <TIM_Average+0x16>
	}
	uint16_t avg = total / (depth / 2);
 80008b8:	887b      	ldrh	r3, [r7, #2]
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	b29b      	uxth	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80008c6:	81fb      	strh	r3, [r7, #14]
	return avg;
 80008c8:	89fb      	ldrh	r3, [r7, #14]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	371c      	adds	r7, #28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <TIM_DeInterleave>:
  * @note we should look at improving this function so its scalable for more channels
  * and to improve efficiency. We may also want to pass a pointer to the struct, rather then
  * using global variables
  * @retval None
  */
uint16_t TIM_DeInterleave(uint16_t unsortedBuf[], uint16_t startPoint, uint16_t depth) {
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b0a4      	sub	sp, #144	; 0x90
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	460b      	mov	r3, r1
 80008e0:	807b      	strh	r3, [r7, #2]
 80008e2:	4613      	mov	r3, r2
 80008e4:	803b      	strh	r3, [r7, #0]
	uint16_t DeInterleavedBuf[ADC_CHANNEL_BUFFER_LEN];

	for (int i = 0, j = 0; i < (depth + startPoint); i++, j += 2) {
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80008f2:	e018      	b.n	8000926 <TIM_DeInterleave+0x50>
		DeInterleavedBuf[i] = unsortedBuf[j + startPoint];
 80008f4:	887a      	ldrh	r2, [r7, #2]
 80008f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80008fa:	4413      	add	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	881a      	ldrh	r2, [r3, #0]
 8000904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	3390      	adds	r3, #144	; 0x90
 800090c:	443b      	add	r3, r7
 800090e:	f823 2c88 	strh.w	r2, [r3, #-136]
	for (int i = 0, j = 0; i < (depth + startPoint); i++, j += 2) {
 8000912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000916:	3301      	adds	r3, #1
 8000918:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800091c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000920:	3302      	adds	r3, #2
 8000922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000926:	883a      	ldrh	r2, [r7, #0]
 8000928:	887b      	ldrh	r3, [r7, #2]
 800092a:	4413      	add	r3, r2
 800092c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000930:	429a      	cmp	r2, r3
 8000932:	dbdf      	blt.n	80008f4 <TIM_DeInterleave+0x1e>
	}
	return TIM_Average(DeInterleavedBuf, depth);
 8000934:	883a      	ldrh	r2, [r7, #0]
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff9d 	bl	800087c <TIM_Average>
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3790      	adds	r7, #144	; 0x90
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <TIM_OutputDAC>:
  * @brief  Uses DAC to output a 0-3.3V signal to the motor controller.
  *	Note, the signal is amplified to a 0-5V range using a hardware amp.
  * Motor Data sheet: https://wiki.neweagle.net/docs/Rinehart/PM100_User_Manual_3_2011.pdf
  * @retval None
  */
void TIM_OutputDAC(){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

	uint32_t DAC_Output = TIM_ConvertValueLinearApprox(adcBufferChannel.adcAPPS1, map);
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <TIM_OutputDAC+0x2c>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	4909      	ldr	r1, [pc, #36]	; (800097c <TIM_OutputDAC+0x30>)
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe79 	bl	8000650 <TIM_ConvertValueLinearApprox>
 800095e:	4603      	mov	r3, r0
 8000960:	607b      	str	r3, [r7, #4]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_Output);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <TIM_OutputDAC+0x34>)
 800096a:	f002 f9ec 	bl	8002d46 <HAL_DAC_SetValue>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200002a0 	.word	0x200002a0
 800097c:	20000004 	.word	0x20000004
 8000980:	200003a4 	.word	0x200003a4

08000984 <TIM_Init>:
/**
  * @brief  Must be used to initialize ADC with DMA
  * @param ADC_HandleTypeDef
  * @retval None
  */
void TIM_Init(ADC_HandleTypeDef *TIM_hadc1){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(TIM_hadc1, (uint32_t*)adc_buf, ADC_BUFFER_LEN);
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	4904      	ldr	r1, [pc, #16]	; (80009a0 <TIM_Init+0x1c>)
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f001 fb89 	bl	80020a8 <HAL_ADC_Start_DMA>

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000009c 	.word	0x2000009c

080009a4 <TIM_ProcessData>:
/**
  * @brief  This function is executed when half the TIM buffer is full
  * @retval None
  */

void TIM_ProcessData(){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);	// DEBUG LED TOGGLE FOR TIME PROFILE
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ae:	4810      	ldr	r0, [pc, #64]	; (80009f0 <TIM_ProcessData+0x4c>)
 80009b0:	f002 ff4a 	bl	8003848 <HAL_GPIO_WritePin>
	adcBufferChannel.adcAPPS1 = TIM_DeInterleave(adc_buf, 0, 64); 	// The depth can be changed to control how many values we average
 80009b4:	2240      	movs	r2, #64	; 0x40
 80009b6:	2100      	movs	r1, #0
 80009b8:	480e      	ldr	r0, [pc, #56]	; (80009f4 <TIM_ProcessData+0x50>)
 80009ba:	f7ff ff8c 	bl	80008d6 <TIM_DeInterleave>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <TIM_ProcessData+0x54>)
 80009c4:	801a      	strh	r2, [r3, #0]
	adcBufferChannel.adcFBPS  =	TIM_DeInterleave(adc_buf, 1, 64);	// TODO Change to a smaller buffer (128) which samples slower
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	2101      	movs	r1, #1
 80009ca:	480a      	ldr	r0, [pc, #40]	; (80009f4 <TIM_ProcessData+0x50>)
 80009cc:	f7ff ff83 	bl	80008d6 <TIM_DeInterleave>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <TIM_ProcessData+0x54>)
 80009d6:	809a      	strh	r2, [r3, #4]

	dataReadyFlag = 0;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <TIM_ProcessData+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);	// DEBUG LED TOGGLE FOR TIME PROFILE
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <TIM_ProcessData+0x4c>)
 80009e6:	f002 ff2f 	bl	8003848 <HAL_GPIO_WritePin>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	2000009c 	.word	0x2000009c
 80009f8:	200002a0 	.word	0x200002a0
 80009fc:	2000009a 	.word	0x2000009a

08000a00 <TIM_SignalPlausibility>:



PDP_StatusTypeDef TIM_SignalPlausibility() {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
	PDP_StatusTypeDef AAC = PDP_AppsAgreement(adcBufferChannel.adcAPPS1,
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <TIM_SignalPlausibility+0xa4>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
			adcBufferChannel.adcAPPS2);
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <TIM_SignalPlausibility+0xa4>)
 8000a0e:	885b      	ldrh	r3, [r3, #2]
	PDP_StatusTypeDef AAC = PDP_AppsAgreement(adcBufferChannel.adcAPPS1,
 8000a10:	4619      	mov	r1, r3
 8000a12:	4610      	mov	r0, r2
 8000a14:	f7ff fdbc 	bl	8000590 <PDP_AppsAgreement>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	71fb      	strb	r3, [r7, #7]

	PDP_StatusTypeDef PAG = PDP_PedealAgreement(adcBufferChannel.adcAPPS1,
 8000a1c:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <TIM_SignalPlausibility+0xa4>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
			adcBufferChannel.adcFBPS);
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <TIM_SignalPlausibility+0xa4>)
 8000a24:	889b      	ldrh	r3, [r3, #4]
	PDP_StatusTypeDef PAG = PDP_PedealAgreement(adcBufferChannel.adcAPPS1,
 8000a26:	4619      	mov	r1, r3
 8000a28:	4610      	mov	r0, r2
 8000a2a:	f7ff fd75 	bl	8000518 <PDP_PedealAgreement>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71bb      	strb	r3, [r7, #6]

	PDP_StatusTypeDef SPA = PDP_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	717b      	strb	r3, [r7, #5]
	if (PDP_ThresholdCheck(adcBufferChannel.adcAPPS1) == PDP_OKAY
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <TIM_SignalPlausibility+0xa4>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fdec 	bl	8000618 <PDP_ThresholdCheck>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d119      	bne.n	8000a7a <TIM_SignalPlausibility+0x7a>
			&& PDP_ThresholdCheck(adcBufferChannel.adcAPPS2) == PDP_OKAY
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <TIM_SignalPlausibility+0xa4>)
 8000a48:	885b      	ldrh	r3, [r3, #2]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fde4 	bl	8000618 <PDP_ThresholdCheck>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d111      	bne.n	8000a7a <TIM_SignalPlausibility+0x7a>
			&& PDP_ThresholdCheck(adcBufferChannel.adcFBPS) == PDP_OKAY
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <TIM_SignalPlausibility+0xa4>)
 8000a58:	889b      	ldrh	r3, [r3, #4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fddc 	bl	8000618 <PDP_ThresholdCheck>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d109      	bne.n	8000a7a <TIM_SignalPlausibility+0x7a>
			&& PDP_ThresholdCheck(adcBufferChannel.adcRBPS) == PDP_OKAY) {
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <TIM_SignalPlausibility+0xa4>)
 8000a68:	88db      	ldrh	r3, [r3, #6]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fdd4 	bl	8000618 <PDP_ThresholdCheck>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <TIM_SignalPlausibility+0x7a>
		SPA = PDP_OKAY;
 8000a76:	2300      	movs	r3, #0
 8000a78:	717b      	strb	r3, [r7, #5]
	}

	// TODO TEMP DEBUG FOR TESTING
	AAC = PDP_OKAY;	// DEBUG
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	SPA = PDP_OKAY; // DEBUG
 8000a7e:	2300      	movs	r3, #0
 8000a80:	717b      	strb	r3, [r7, #5]
	// END TEMP DEBUG

	if (AAC == PDP_OKAY && PAG == PDP_OKAY && SPA == PDP_OKAY){
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d107      	bne.n	8000a98 <TIM_SignalPlausibility+0x98>
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d104      	bne.n	8000a98 <TIM_SignalPlausibility+0x98>
 8000a8e:	797b      	ldrb	r3, [r7, #5]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d101      	bne.n	8000a98 <TIM_SignalPlausibility+0x98>
		return PDP_OKAY;
 8000a94:	2300      	movs	r3, #0
 8000a96:	e000      	b.n	8000a9a <TIM_SignalPlausibility+0x9a>
	}
	else {
		return PDP_ERROR;
 8000a98:	2301      	movs	r3, #1
	}
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200002a0 	.word	0x200002a0

08000aa8 <HAL_ADC_ConvHalfCpltCallback>:



void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	//dataReadyFlag = 1;



	// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);	// Flashing this LED lets us monitor the state
}															// of the buffer using the oscilloscope
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <HAL_ADC_ConvCpltCallback>:

/**
  * @brief  This function is executed when  TIM buffer is completely full
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	inBufPtr  = &adc_buf[ADC_BUFFER_LEN / 2];
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_ADC_ConvCpltCallback+0x28>)
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000ac8:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_buf[ADC_BUFFER_LEN / 2];
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_ADC_ConvCpltCallback+0x30>)
 8000acc:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_ADC_ConvCpltCallback+0x34>)
 8000ace:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_ADC_ConvCpltCallback+0x38>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
	// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	2000029c 	.word	0x2000029c
 8000ae8:	2000011c 	.word	0x2000011c
 8000aec:	20000000 	.word	0x20000000
 8000af0:	2000021c 	.word	0x2000021c
 8000af4:	2000009a 	.word	0x2000009a

08000af8 <AppConfig>:
};




void AppConfig() {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	TIM_Init(&hadc1);
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <AppConfig+0x1c>)
 8000afe:	f7ff ff41 	bl	8000984 <TIM_Init>
	HAL_TIM_Base_Start(&htim2);
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <AppConfig+0x20>)
 8000b04:	f003 fba0 	bl	8004248 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <AppConfig+0x24>)
 8000b0c:	f002 f8c9 	bl	8002ca2 <HAL_DAC_Start>

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200002ac 	.word	0x200002ac
 8000b18:	20000400 	.word	0x20000400
 8000b1c:	200003a4 	.word	0x200003a4

08000b20 <AppMain>:

void AppMain() {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0

	uint32_t prevTime = 0, curTime = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]

	state_codes_t cur_state = ENTRY_STATE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	74fb      	strb	r3, [r7, #19]
	int (*state_fun)(void);

	while (1) {
		//int voltage = TIM_ConvertValue(128);
		//TIM_OutputDAC(voltage);
		curTime = HAL_GetTick();
 8000b32:	f001 f959 	bl	8001de8 <HAL_GetTick>
 8000b36:	60f8      	str	r0, [r7, #12]

		if (curTime - prevTime >= 500) {
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b42:	d306      	bcc.n	8000b52 <AppMain+0x32>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <AppMain+0x58>)
 8000b4a:	f002 fe96 	bl	800387a <HAL_GPIO_TogglePin>
			prevTime = curTime;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	617b      	str	r3, [r7, #20]
		}
	    state_fun = state[cur_state];
 8000b52:	7cfb      	ldrb	r3, [r7, #19]
 8000b54:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <AppMain+0x5c>)
 8000b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5a:	60bb      	str	r3, [r7, #8]
	    rc = state_fun();
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4798      	blx	r3
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]

	    cur_state = lookup_transitions(cur_state, rc);
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	7cfb      	ldrb	r3, [r7, #19]
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f808 	bl	8000b80 <lookup_transitions>
 8000b70:	4603      	mov	r3, r0
 8000b72:	74fb      	strb	r3, [r7, #19]
		curTime = HAL_GetTick();
 8000b74:	e7dd      	b.n	8000b32 <AppMain+0x12>
 8000b76:	bf00      	nop
 8000b78:	40020c00 	.word	0x40020c00
 8000b7c:	20000030 	.word	0x20000030

08000b80 <lookup_transitions>:

	}
}

state_codes_t lookup_transitions(state_codes_t cur_state, ret_codes_t rc){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < sizeof(state_transitions) / sizeof(state_transitions[0]); i++) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	e06d      	b.n	8000c72 <lookup_transitions+0xf2>

		if (state_transitions[i].src_state == cur_state && state_transitions[i].ret_code == rc) {
 8000b96:	493b      	ldr	r1, [pc, #236]	; (8000c84 <lookup_transitions+0x104>)
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	79fa      	ldrb	r2, [r7, #7]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d160      	bne.n	8000c6c <lookup_transitions+0xec>
 8000baa:	4936      	ldr	r1, [pc, #216]	; (8000c84 <lookup_transitions+0x104>)
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	79ba      	ldrb	r2, [r7, #6]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d155      	bne.n	8000c6c <lookup_transitions+0xec>


			switch (state_transitions[i].src_state) {
 8000bc0:	4930      	ldr	r1, [pc, #192]	; (8000c84 <lookup_transitions+0x104>)
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d842      	bhi.n	8000c58 <lookup_transitions+0xd8>
 8000bd2:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <lookup_transitions+0x58>)
 8000bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd8:	08000c59 	.word	0x08000c59
 8000bdc:	08000c59 	.word	0x08000c59
 8000be0:	08000be9 	.word	0x08000be9
 8000be4:	08000c59 	.word	0x08000c59

			case idle:
				break;

			case forward:
				switch (rc) {
 8000be8:	79bb      	ldrb	r3, [r7, #6]
 8000bea:	2b07      	cmp	r3, #7
 8000bec:	d832      	bhi.n	8000c54 <lookup_transitions+0xd4>
 8000bee:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <lookup_transitions+0x74>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c21 	.word	0x08000c21
 8000bf8:	08000c27 	.word	0x08000c27
 8000bfc:	08000c55 	.word	0x08000c55
 8000c00:	08000c55 	.word	0x08000c55
 8000c04:	08000c55 	.word	0x08000c55
 8000c08:	08000c41 	.word	0x08000c41
 8000c0c:	08000c35 	.word	0x08000c35
 8000c10:	08000c15 	.word	0x08000c15
				case adc_data_ready:
					TIM_ProcessData();
 8000c14:	f7ff fec6 	bl	80009a4 <TIM_ProcessData>
					dataReadyFlag = 0;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <lookup_transitions+0x108>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
					break;
 8000c1e:	e01a      	b.n	8000c56 <lookup_transitions+0xd6>
				case ok:
					TIM_OutputDAC();
 8000c20:	f7ff fe94 	bl	800094c <TIM_OutputDAC>
					break;
 8000c24:	e017      	b.n	8000c56 <lookup_transitions+0xd6>
				case fail:
					HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, CUT_MOTOR_SIGNAL);
 8000c26:	2300      	movs	r3, #0
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4817      	ldr	r0, [pc, #92]	; (8000c8c <lookup_transitions+0x10c>)
 8000c2e:	f002 f88a 	bl	8002d46 <HAL_DAC_SetValue>
					break;
 8000c32:	e010      	b.n	8000c56 <lookup_transitions+0xd6>
				case change_map:
					TIM_ChangeThrottleMap();
 8000c34:	f7ff fd8c 	bl	8000750 <TIM_ChangeThrottleMap>
					changeThrottleMapFlag = 0;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <lookup_transitions+0x110>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
					break;
 8000c3e:	e00a      	b.n	8000c56 <lookup_transitions+0xd6>
				case vehicle_stopped:
					forwardDirFlag = 0;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <lookup_transitions+0x114>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
					HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, CUT_MOTOR_SIGNAL);
 8000c46:	2300      	movs	r3, #0
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	480f      	ldr	r0, [pc, #60]	; (8000c8c <lookup_transitions+0x10c>)
 8000c4e:	f002 f87a 	bl	8002d46 <HAL_DAC_SetValue>
					break;
 8000c52:	e000      	b.n	8000c56 <lookup_transitions+0xd6>
				default:
					break;
 8000c54:	bf00      	nop
				}

			case reverse:
				break;
 8000c56:	e000      	b.n	8000c5a <lookup_transitions+0xda>

			default:
				break;
 8000c58:	bf00      	nop

			}

			return state_transitions[i].dst_state; // Return the next state
 8000c5a:	490a      	ldr	r1, [pc, #40]	; (8000c84 <lookup_transitions+0x104>)
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	3302      	adds	r3, #2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	e006      	b.n	8000c7a <lookup_transitions+0xfa>
	for (int i = 0; i < sizeof(state_transitions) / sizeof(state_transitions[0]); i++) {
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2b0c      	cmp	r3, #12
 8000c76:	d98e      	bls.n	8000b96 <lookup_transitions+0x16>
		}
	}
	// Return an error code indicating that no matching transition was found
	return -1;
 8000c78:	23ff      	movs	r3, #255	; 0xff
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000044 	.word	0x20000044
 8000c88:	2000009a 	.word	0x2000009a
 8000c8c:	200003a4 	.word	0x200003a4
 8000c90:	20000094 	.word	0x20000094
 8000c94:	20000095 	.word	0x20000095

08000c98 <entry_state>:

/* These transition functions are called at the start of their corresponding state,
 * They return a ret_codes_t to decide what to do next
 */

int entry_state(void) {
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	// TODO
	// Check if all systems are okay
#ifdef DEBUG
	return ok;
 8000c9c:	2300      	movs	r3, #0
	}
	else {
		return fail;
	}
#endif
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <idle_state>:

int idle_state(void) {
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
#ifdef DEBUG
	return dir_forward;
 8000cac:	2303      	movs	r3, #3
	else {
		return repeat;
	}
	// Check if driver selects reverse 	-> Set Reverse Throttle Map
#endif
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <forward_state>:

int forward_state(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
	// Check CANbus -> CanBUS
	// Check if car is stopped -> STATE -> Idle, set idle throttle map
	// Check if any data is ready -> deinterleve and send motor data

	PDP_StatusTypeDef signalCheck = TIM_SignalPlausibility();
 8000cbe:	f7ff fe9f 	bl	8000a00 <TIM_SignalPlausibility>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]


	if (dataReadyFlag) {
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <forward_state+0x3c>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <forward_state+0x1a>
		return adc_data_ready;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	e00b      	b.n	8000cea <forward_state+0x32>
	}
	else if (signalCheck == PDP_ERROR){
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d101      	bne.n	8000cdc <forward_state+0x24>
		return fail;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e006      	b.n	8000cea <forward_state+0x32>
	}
	// Check for driver inputs -> change thottle map
	else if (changeThrottleMapFlag) {
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <forward_state+0x40>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <forward_state+0x30>
		return change_map;
 8000ce4:	2306      	movs	r3, #6
 8000ce6:	e000      	b.n	8000cea <forward_state+0x32>
	}
	// All okay -> wait and do nothing
	else {
		return ok;
 8000ce8:	2300      	movs	r3, #0
	}
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000009a 	.word	0x2000009a
 8000cf8:	20000094 	.word	0x20000094

08000cfc <reverse_state>:

int reverse_state(void) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	if (dataReadyFlag) {
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <reverse_state+0x1c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <reverse_state+0x10>
		return adc_data_ready;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	e000      	b.n	8000d0e <reverse_state+0x12>
	}
	return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	2000009a 	.word	0x2000009a

08000d1c <end_state>:
int end_state(void) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d30:	f000 fff4 	bl	8001d1c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d34:	f000 f81c 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d38:	f000 fb34 	bl	80013a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d3c:	f000 fb12 	bl	8001364 <MX_DMA_Init>
  MX_TIM1_Init();
 8000d40:	f000 f974 	bl	800102c <MX_TIM1_Init>
  MX_CAN1_Init();
 8000d44:	f000 f8de 	bl	8000f04 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000d48:	f000 f87c 	bl	8000e44 <MX_ADC1_Init>
  MX_DAC_Init();
 8000d4c:	f000 f944 	bl	8000fd8 <MX_DAC_Init>
  MX_TIM6_Init();
 8000d50:	f000 fa82 	bl	8001258 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000d54:	f000 f9ba 	bl	80010cc <MX_TIM2_Init>
  MX_TIM8_Init();
 8000d58:	f000 fab4 	bl	80012c4 <MX_TIM8_Init>
  MX_CAN2_Init();
 8000d5c:	f000 f908 	bl	8000f70 <MX_CAN2_Init>
  MX_TIM3_Init();
 8000d60:	f000 fa0a 	bl	8001178 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  AppConfig();
 8000d64:	f7ff fec8 	bl	8000af8 <AppConfig>
  AppMain();
 8000d68:	f7ff feda 	bl	8000b20 <AppMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)		// We don't use this, instead we use the loop inside AppMain()
 8000d6c:	e7fe      	b.n	8000d6c <main+0x40>
	...

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b094      	sub	sp, #80	; 0x50
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 f80a 	bl	8004d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <SystemClock_Config+0xcc>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <SystemClock_Config+0xcc>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <SystemClock_Config+0xcc>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <SystemClock_Config+0xd0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a21      	ldr	r2, [pc, #132]	; (8000e40 <SystemClock_Config+0xd0>)
 8000dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <SystemClock_Config+0xd0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000de0:	2308      	movs	r3, #8
 8000de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000de4:	2340      	movs	r3, #64	; 0x40
 8000de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dec:	2307      	movs	r3, #7
 8000dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0320 	add.w	r3, r7, #32
 8000df4:	4618      	mov	r0, r3
 8000df6:	f002 fd73 	bl	80038e0 <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e00:	f000 fc6e 	bl	80016e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	230f      	movs	r3, #15
 8000e06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2102      	movs	r1, #2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 ffd4 	bl	8003dd0 <HAL_RCC_ClockConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e2e:	f000 fc57 	bl	80016e0 <Error_Handler>
  }
}
 8000e32:	bf00      	nop
 8000e34:	3750      	adds	r7, #80	; 0x50
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40007000 	.word	0x40007000

08000e44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e56:	4b29      	ldr	r3, [pc, #164]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000e58:	4a29      	ldr	r2, [pc, #164]	; (8000f00 <MX_ADC1_Init+0xbc>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000e88:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000e96:	2202      	movs	r2, #2
 8000e98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea8:	4814      	ldr	r0, [pc, #80]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000eaa:	f000 ffa9 	bl	8001e00 <HAL_ADC_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000eb4:	f000 fc14 	bl	80016e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000eca:	f001 fa11 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ed4:	f000 fc04 	bl	80016e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_ADC1_Init+0xb8>)
 8000ee6:	f001 fa03 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000ef0:	f000 fbf6 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200002ac 	.word	0x200002ac
 8000f00:	40012000 	.word	0x40012000

08000f04 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_CAN1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f10:	2210      	movs	r2, #16
 8000f12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_CAN1_Init+0x64>)
 8000f54:	f001 fc76 	bl	8002844 <HAL_CAN_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000f5e:	f000 fbbf 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000354 	.word	0x20000354
 8000f6c:	40006400 	.word	0x40006400

08000f70 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <MX_CAN2_Init+0x64>)
 8000f78:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <MX_CAN2_Init+0x60>)
 8000fbe:	f001 fc41 	bl	8002844 <HAL_CAN_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000fc8:	f000 fb8a 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000037c 	.word	0x2000037c
 8000fd4:	40006800 	.word	0x40006800

08000fd8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_DAC_Init+0x4c>)
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <MX_DAC_Init+0x50>)
 8000fea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_DAC_Init+0x4c>)
 8000fee:	f001 fe36 	bl	8002c5e <HAL_DAC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ff8:	f000 fb72 	bl	80016e0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_DAC_Init+0x4c>)
 800100c:	f001 fec0 	bl	8002d90 <HAL_DAC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001016:	f000 fb63 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200003a4 	.word	0x200003a4
 8001028:	40007400 	.word	0x40007400

0800102c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	463b      	mov	r3, r7
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_TIM1_Init+0x98>)
 800104a:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <MX_TIM1_Init+0x9c>)
 800104c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001050:	223f      	movs	r2, #63	; 0x3f
 8001052:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM1_Init+0x98>)
 800105c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001060:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_TIM1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001076:	f003 f897 	bl	80041a8 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001080:	f000 fb2e 	bl	80016e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_TIM1_Init+0x98>)
 8001092:	f003 fa53 	bl	800453c <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800109c:	f000 fb20 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_TIM1_Init+0x98>)
 80010ae:	f003 fdf7 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010b8:	f000 fb12 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200003b8 	.word	0x200003b8
 80010c8:	40010000 	.word	0x40010000

080010cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <MX_TIM2_Init+0xa8>)
 80010f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_TIM2_Init+0xa8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_TIM2_Init+0xa8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_TIM2_Init+0xa8>)
 8001104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001108:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_TIM2_Init+0xa8>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_TIM2_Init+0xa8>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <MX_TIM2_Init+0xa8>)
 8001118:	f003 f8fe 	bl	8004318 <HAL_TIM_PWM_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001122:	f000 fadd 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001126:	2320      	movs	r3, #32
 8001128:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	4619      	mov	r1, r3
 8001134:	480f      	ldr	r0, [pc, #60]	; (8001174 <MX_TIM2_Init+0xa8>)
 8001136:	f003 fdb3 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001140:	f000 face 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001144:	2360      	movs	r3, #96	; 0x60
 8001146:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_TIM2_Init+0xa8>)
 800115c:	f003 f92c 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001166:	f000 fabb 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000400 	.word	0x20000400

08001178 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
 8001196:	615a      	str	r2, [r3, #20]
 8001198:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <MX_TIM3_Init+0xd8>)
 800119c:	4a2d      	ldr	r2, [pc, #180]	; (8001254 <MX_TIM3_Init+0xdc>)
 800119e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <MX_TIM3_Init+0xd8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <MX_TIM3_Init+0xd8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <MX_TIM3_Init+0xd8>)
 80011ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <MX_TIM3_Init+0xd8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <MX_TIM3_Init+0xd8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011c0:	4823      	ldr	r0, [pc, #140]	; (8001250 <MX_TIM3_Init+0xd8>)
 80011c2:	f003 f8a9 	bl	8004318 <HAL_TIM_PWM_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011cc:	f000 fa88 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	4619      	mov	r1, r3
 80011de:	481c      	ldr	r0, [pc, #112]	; (8001250 <MX_TIM3_Init+0xd8>)
 80011e0:	f003 fd5e 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011ea:	f000 fa79 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ee:	2360      	movs	r3, #96	; 0x60
 80011f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	4812      	ldr	r0, [pc, #72]	; (8001250 <MX_TIM3_Init+0xd8>)
 8001206:	f003 f8d7 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001210:	f000 fa66 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2208      	movs	r2, #8
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_TIM3_Init+0xd8>)
 800121c:	f003 f8cc 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001226:	f000 fa5b 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	220c      	movs	r2, #12
 800122e:	4619      	mov	r1, r3
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <MX_TIM3_Init+0xd8>)
 8001232:	f003 f8c1 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800123c:	f000 fa50 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <MX_TIM3_Init+0xd8>)
 8001242:	f000 fc9b 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000448 	.word	0x20000448
 8001254:	40000400 	.word	0x40000400

08001258 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_TIM6_Init+0x64>)
 8001268:	4a15      	ldr	r2, [pc, #84]	; (80012c0 <MX_TIM6_Init+0x68>)
 800126a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <MX_TIM6_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_TIM6_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_TIM6_Init+0x64>)
 800127a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_TIM6_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_TIM6_Init+0x64>)
 8001288:	f002 ff8e 	bl	80041a8 <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001292:	f000 fa25 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_TIM6_Init+0x64>)
 80012a4:	f003 fcfc 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012ae:	f000 fa17 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000490 	.word	0x20000490
 80012c0:	40001000 	.word	0x40001000

080012c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_TIM8_Init+0x98>)
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <MX_TIM8_Init+0x9c>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM8_Init+0x98>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_TIM8_Init+0x98>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_TIM8_Init+0x98>)
 80012f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_TIM8_Init+0x98>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_TIM8_Init+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_TIM8_Init+0x98>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_TIM8_Init+0x98>)
 800130e:	f002 ff4b 	bl	80041a8 <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001318:	f000 f9e2 	bl	80016e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_TIM8_Init+0x98>)
 800132a:	f003 f907 	bl	800453c <HAL_TIM_ConfigClockSource>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001334:	f000 f9d4 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_TIM8_Init+0x98>)
 8001346:	f003 fcab 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001350:	f000 f9c6 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200004d8 	.word	0x200004d8
 8001360:	40010400 	.word	0x40010400

08001364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_DMA_Init+0x3c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <MX_DMA_Init+0x3c>)
 8001374:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_DMA_Init+0x3c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2038      	movs	r0, #56	; 0x38
 800138c:	f001 fc31 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001390:	2038      	movs	r0, #56	; 0x38
 8001392:	f001 fc4a 	bl	8002c2a <HAL_NVIC_EnableIRQ>

}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	4bb7      	ldr	r3, [pc, #732]	; (800169c <MX_GPIO_Init+0x2f8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4ab6      	ldr	r2, [pc, #728]	; (800169c <MX_GPIO_Init+0x2f8>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4bb4      	ldr	r3, [pc, #720]	; (800169c <MX_GPIO_Init+0x2f8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	4bb0      	ldr	r3, [pc, #704]	; (800169c <MX_GPIO_Init+0x2f8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4aaf      	ldr	r2, [pc, #700]	; (800169c <MX_GPIO_Init+0x2f8>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4bad      	ldr	r3, [pc, #692]	; (800169c <MX_GPIO_Init+0x2f8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4ba9      	ldr	r3, [pc, #676]	; (800169c <MX_GPIO_Init+0x2f8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4aa8      	ldr	r2, [pc, #672]	; (800169c <MX_GPIO_Init+0x2f8>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4ba6      	ldr	r3, [pc, #664]	; (800169c <MX_GPIO_Init+0x2f8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4ba2      	ldr	r3, [pc, #648]	; (800169c <MX_GPIO_Init+0x2f8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4aa1      	ldr	r2, [pc, #644]	; (800169c <MX_GPIO_Init+0x2f8>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b9f      	ldr	r3, [pc, #636]	; (800169c <MX_GPIO_Init+0x2f8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b9b      	ldr	r3, [pc, #620]	; (800169c <MX_GPIO_Init+0x2f8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a9a      	ldr	r2, [pc, #616]	; (800169c <MX_GPIO_Init+0x2f8>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b98      	ldr	r3, [pc, #608]	; (800169c <MX_GPIO_Init+0x2f8>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b94      	ldr	r3, [pc, #592]	; (800169c <MX_GPIO_Init+0x2f8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a93      	ldr	r2, [pc, #588]	; (800169c <MX_GPIO_Init+0x2f8>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b91      	ldr	r3, [pc, #580]	; (800169c <MX_GPIO_Init+0x2f8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|FWRD_DRIVE_SNGL_Pin|RVRS_DRIVE_SNGL_Pin|RTD_LED_Pin
 8001462:	2200      	movs	r2, #0
 8001464:	f647 6108 	movw	r1, #32264	; 0x7e08
 8001468:	488d      	ldr	r0, [pc, #564]	; (80016a0 <MX_GPIO_Init+0x2fc>)
 800146a:	f002 f9ed 	bl	8003848 <HAL_GPIO_WritePin>
                          |BREAK_RELAY_Pin|EXTERNAL_RELAY_Pin|RTDS_SNGL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	2101      	movs	r1, #1
 8001472:	488c      	ldr	r0, [pc, #560]	; (80016a4 <MX_GPIO_Init+0x300>)
 8001474:	f002 f9e8 	bl	8003848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	2120      	movs	r1, #32
 800147c:	4889      	ldr	r0, [pc, #548]	; (80016a4 <MX_GPIO_Init+0x300>)
 800147e:	f002 f9e3 	bl	8003848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VCU_FAULT_OUT_GPIO_Port, VCU_FAULT_OUT_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001488:	4887      	ldr	r0, [pc, #540]	; (80016a8 <MX_GPIO_Init+0x304>)
 800148a:	f002 f9dd 	bl	8003848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800148e:	2200      	movs	r2, #0
 8001490:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001494:	4885      	ldr	r0, [pc, #532]	; (80016ac <MX_GPIO_Init+0x308>)
 8001496:	f002 f9d7 	bl	8003848 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin FWRD_DRIVE_SNGL_Pin RVRS_DRIVE_SNGL_Pin RTD_LED_Pin
                           BREAK_RELAY_Pin EXTERNAL_RELAY_Pin RTDS_SNGL_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|FWRD_DRIVE_SNGL_Pin|RVRS_DRIVE_SNGL_Pin|RTD_LED_Pin
 800149a:	f647 6308 	movw	r3, #32264	; 0x7e08
 800149e:	61fb      	str	r3, [r7, #28]
                          |BREAK_RELAY_Pin|EXTERNAL_RELAY_Pin|RTDS_SNGL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	487b      	ldr	r0, [pc, #492]	; (80016a0 <MX_GPIO_Init+0x2fc>)
 80014b4:	f002 f82c 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC5 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_5;
 80014b8:	2321      	movs	r3, #33	; 0x21
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4875      	ldr	r0, [pc, #468]	; (80016a4 <MX_GPIO_Init+0x300>)
 80014d0:	f002 f81e 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014d4:	2308      	movs	r3, #8
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014e4:	2305      	movs	r3, #5
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	486d      	ldr	r0, [pc, #436]	; (80016a4 <MX_GPIO_Init+0x300>)
 80014f0:	f002 f80e 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	4869      	ldr	r0, [pc, #420]	; (80016b0 <MX_GPIO_Init+0x30c>)
 800150a:	f002 f801 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800150e:	23e0      	movs	r3, #224	; 0xe0
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800151e:	2305      	movs	r3, #5
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4861      	ldr	r0, [pc, #388]	; (80016b0 <MX_GPIO_Init+0x30c>)
 800152a:	f001 fff1 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800152e:	2304      	movs	r3, #4
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4859      	ldr	r0, [pc, #356]	; (80016a8 <MX_GPIO_Init+0x304>)
 8001542:	f001 ffe5 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : FWRD_SWITCH_Pin RVES_SWITCH_Pin */
  GPIO_InitStruct.Pin = FWRD_SWITCH_Pin|RVES_SWITCH_Pin;
 8001546:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	4851      	ldr	r0, [pc, #324]	; (80016a0 <MX_GPIO_Init+0x2fc>)
 800155c:	f001 ffd8 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001572:	2305      	movs	r3, #5
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	484a      	ldr	r0, [pc, #296]	; (80016a8 <MX_GPIO_Init+0x304>)
 800157e:	f001 ffc7 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCU_FAULT_OUT_Pin */
  GPIO_InitStruct.Pin = VCU_FAULT_OUT_Pin;
 8001582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(VCU_FAULT_OUT_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	4843      	ldr	r0, [pc, #268]	; (80016a8 <MX_GPIO_Init+0x304>)
 800159c:	f001 ffb8 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : AAC_FAULT_Pin PAG_FAULT_Pin SPA_FAULT_Pin */
  GPIO_InitStruct.Pin = AAC_FAULT_Pin|PAG_FAULT_Pin|SPA_FAULT_Pin;
 80015a0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	483d      	ldr	r0, [pc, #244]	; (80016ac <MX_GPIO_Init+0x308>)
 80015b8:	f001 ffaa 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015bc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015c0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	4835      	ldr	r0, [pc, #212]	; (80016ac <MX_GPIO_Init+0x308>)
 80015d6:	f001 ff9b 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80015da:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ec:	2306      	movs	r3, #6
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	482b      	ldr	r0, [pc, #172]	; (80016a4 <MX_GPIO_Init+0x300>)
 80015f8:	f001 ff8a 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80015fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	4827      	ldr	r0, [pc, #156]	; (80016b0 <MX_GPIO_Init+0x30c>)
 8001612:	f001 ff7d 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001616:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001628:	230a      	movs	r3, #10
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	481f      	ldr	r0, [pc, #124]	; (80016b0 <MX_GPIO_Init+0x30c>)
 8001634:	f001 ff6c 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001638:	2320      	movs	r3, #32
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4818      	ldr	r0, [pc, #96]	; (80016ac <MX_GPIO_Init+0x308>)
 800164c:	f001 ff60 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001650:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001656:	2312      	movs	r3, #18
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165a:	2301      	movs	r3, #1
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001662:	2304      	movs	r3, #4
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	480e      	ldr	r0, [pc, #56]	; (80016a8 <MX_GPIO_Init+0x304>)
 800166e:	f001 ff4f 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001672:	2302      	movs	r3, #2
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001676:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800167a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <MX_GPIO_Init+0x2fc>)
 8001688:	f001 ff42 	bl	8003510 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	2006      	movs	r0, #6
 8001692:	f001 faae 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001696:	2006      	movs	r0, #6
 8001698:	e00c      	b.n	80016b4 <MX_GPIO_Init+0x310>
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40020000 	.word	0x40020000
 80016b4:	f001 fab9 	bl	8002c2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2017      	movs	r0, #23
 80016be:	f001 fa98 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016c2:	2017      	movs	r0, #23
 80016c4:	f001 fab1 	bl	8002c2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2028      	movs	r0, #40	; 0x28
 80016ce:	f001 fa90 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016d2:	2028      	movs	r0, #40	; 0x28
 80016d4:	f001 faa9 	bl	8002c2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d8:	bf00      	nop
 80016da:	3730      	adds	r7, #48	; 0x30
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <Error_Handler+0x8>
	...

080016ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <HAL_MspInit+0x4c>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_MspInit+0x4c>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800172a:	2007      	movs	r0, #7
 800172c:	f001 fa56 	bl	8002bdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	; 0x30
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a4d      	ldr	r2, [pc, #308]	; (8001890 <HAL_ADC_MspInit+0x154>)
 800175a:	4293      	cmp	r3, r2
 800175c:	f040 8094 	bne.w	8001888 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <HAL_ADC_MspInit+0x158>)
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	4a4a      	ldr	r2, [pc, #296]	; (8001894 <HAL_ADC_MspInit+0x158>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6453      	str	r3, [r2, #68]	; 0x44
 8001770:	4b48      	ldr	r3, [pc, #288]	; (8001894 <HAL_ADC_MspInit+0x158>)
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	4b44      	ldr	r3, [pc, #272]	; (8001894 <HAL_ADC_MspInit+0x158>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	4a43      	ldr	r2, [pc, #268]	; (8001894 <HAL_ADC_MspInit+0x158>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6313      	str	r3, [r2, #48]	; 0x30
 800178c:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_ADC_MspInit+0x158>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_ADC_MspInit+0x158>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4a3c      	ldr	r2, [pc, #240]	; (8001894 <HAL_ADC_MspInit+0x158>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6313      	str	r3, [r2, #48]	; 0x30
 80017a8:	4b3a      	ldr	r3, [pc, #232]	; (8001894 <HAL_ADC_MspInit+0x158>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <HAL_ADC_MspInit+0x158>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	4a35      	ldr	r2, [pc, #212]	; (8001894 <HAL_ADC_MspInit+0x158>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	6313      	str	r3, [r2, #48]	; 0x30
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_ADC_MspInit+0x158>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = CURRENT_SENS_Pin;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CURRENT_SENS_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	482d      	ldr	r0, [pc, #180]	; (8001898 <HAL_ADC_MspInit+0x15c>)
 80017e4:	f001 fe94 	bl	8003510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017e8:	230e      	movs	r3, #14
 80017ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ec:	2303      	movs	r3, #3
 80017ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4828      	ldr	r0, [pc, #160]	; (800189c <HAL_ADC_MspInit+0x160>)
 80017fc:	f001 fe88 	bl	8003510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F_BPS_ADC_Pin|R_BPS_ADC_Pin;
 8001800:	2303      	movs	r3, #3
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001804:	2303      	movs	r3, #3
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	4823      	ldr	r0, [pc, #140]	; (80018a0 <HAL_ADC_MspInit+0x164>)
 8001814:	f001 fe7c 	bl	8003510 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 800181a:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <HAL_ADC_MspInit+0x16c>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 8001832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001836:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 800183a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800183e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 8001842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001846:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 800184a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 8001858:	2200      	movs	r2, #0
 800185a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800185c:	4811      	ldr	r0, [pc, #68]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 800185e:	f001 fae7 	bl	8002e30 <HAL_DMA_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001868:	f7ff ff3a 	bl	80016e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 8001870:	639a      	str	r2, [r3, #56]	; 0x38
 8001872:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <HAL_ADC_MspInit+0x168>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2012      	movs	r0, #18
 800187e:	f001 f9b8 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001882:	2012      	movs	r0, #18
 8001884:	f001 f9d1 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3730      	adds	r7, #48	; 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40012000 	.word	0x40012000
 8001894:	40023800 	.word	0x40023800
 8001898:	40020800 	.word	0x40020800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020400 	.word	0x40020400
 80018a4:	200002f4 	.word	0x200002f4
 80018a8:	40026410 	.word	0x40026410

080018ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	; 0x30
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a42      	ldr	r2, [pc, #264]	; (80019d4 <HAL_CAN_MspInit+0x128>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d135      	bne.n	800193a <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80018ce:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <HAL_CAN_MspInit+0x12c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3301      	adds	r3, #1
 80018d4:	4a40      	ldr	r2, [pc, #256]	; (80019d8 <HAL_CAN_MspInit+0x12c>)
 80018d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80018d8:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_CAN_MspInit+0x12c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d10d      	bne.n	80018fc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	4b3d      	ldr	r3, [pc, #244]	; (80019dc <HAL_CAN_MspInit+0x130>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	4a3c      	ldr	r2, [pc, #240]	; (80019dc <HAL_CAN_MspInit+0x130>)
 80018ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ee:	6413      	str	r3, [r2, #64]	; 0x40
 80018f0:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <HAL_CAN_MspInit+0x130>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_CAN_MspInit+0x130>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4a35      	ldr	r2, [pc, #212]	; (80019dc <HAL_CAN_MspInit+0x130>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6313      	str	r3, [r2, #48]	; 0x30
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <HAL_CAN_MspInit+0x130>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001918:	2303      	movs	r3, #3
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001928:	2309      	movs	r3, #9
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4619      	mov	r1, r3
 8001932:	482b      	ldr	r0, [pc, #172]	; (80019e0 <HAL_CAN_MspInit+0x134>)
 8001934:	f001 fdec 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001938:	e048      	b.n	80019cc <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <HAL_CAN_MspInit+0x138>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d143      	bne.n	80019cc <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_CAN_MspInit+0x130>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	4a23      	ldr	r2, [pc, #140]	; (80019dc <HAL_CAN_MspInit+0x130>)
 800194e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001952:	6413      	str	r3, [r2, #64]	; 0x40
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_CAN_MspInit+0x130>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_CAN_MspInit+0x12c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_CAN_MspInit+0x12c>)
 8001968:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_CAN_MspInit+0x12c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d10d      	bne.n	800198e <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_CAN_MspInit+0x130>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a18      	ldr	r2, [pc, #96]	; (80019dc <HAL_CAN_MspInit+0x130>)
 800197c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_CAN_MspInit+0x130>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_CAN_MspInit+0x130>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a11      	ldr	r2, [pc, #68]	; (80019dc <HAL_CAN_MspInit+0x130>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_CAN_MspInit+0x130>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80019bc:	2309      	movs	r3, #9
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4808      	ldr	r0, [pc, #32]	; (80019e8 <HAL_CAN_MspInit+0x13c>)
 80019c8:	f001 fda2 	bl	8003510 <HAL_GPIO_Init>
}
 80019cc:	bf00      	nop
 80019ce:	3730      	adds	r7, #48	; 0x30
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40006400 	.word	0x40006400
 80019d8:	20000520 	.word	0x20000520
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020c00 	.word	0x40020c00
 80019e4:	40006800 	.word	0x40006800
 80019e8:	40020400 	.word	0x40020400

080019ec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <HAL_DAC_MspInit+0x7c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d127      	bne.n	8001a5e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_DAC_MspInit+0x80>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <HAL_DAC_MspInit+0x80>)
 8001a18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_DAC_MspInit+0x80>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_DAC_MspInit+0x80>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_DAC_MspInit+0x80>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_DAC_MspInit+0x80>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = MC_DAC_OUT_Pin;
 8001a46:	2310      	movs	r3, #16
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MC_DAC_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <HAL_DAC_MspInit+0x84>)
 8001a5a:	f001 fd59 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	; 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40007400 	.word	0x40007400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000

08001a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <HAL_TIM_Base_MspInit+0x8c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10e      	bne.n	8001aa4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_TIM_Base_MspInit+0x90>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_TIM_Base_MspInit+0x90>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_TIM_Base_MspInit+0x90>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001aa2:	e026      	b.n	8001af2 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM6)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <HAL_TIM_Base_MspInit+0x94>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10e      	bne.n	8001acc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_TIM_Base_MspInit+0x90>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <HAL_TIM_Base_MspInit+0x90>)
 8001ab8:	f043 0310 	orr.w	r3, r3, #16
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_TIM_Base_MspInit+0x90>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
}
 8001aca:	e012      	b.n	8001af2 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM8)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <HAL_TIM_Base_MspInit+0x98>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10d      	bne.n	8001af2 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_TIM_Base_MspInit+0x90>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_TIM_Base_MspInit+0x90>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_TIM_Base_MspInit+0x90>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	bf00      	nop
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40010000 	.word	0x40010000
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40001000 	.word	0x40001000
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b20:	d10e      	bne.n	8001b40 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_TIM_PWM_MspInit+0x64>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <HAL_TIM_PWM_MspInit+0x64>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_TIM_PWM_MspInit+0x64>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b3e:	e012      	b.n	8001b66 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <HAL_TIM_PWM_MspInit+0x68>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10d      	bne.n	8001b66 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_TIM_PWM_MspInit+0x64>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <HAL_TIM_PWM_MspInit+0x64>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_TIM_PWM_MspInit+0x64>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40000400 	.word	0x40000400

08001b7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <HAL_TIM_MspPostInit+0x68>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d11e      	bne.n	8001bdc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_TIM_MspPostInit+0x6c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <HAL_TIM_MspPostInit+0x6c>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_TIM_MspPostInit+0x6c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BATT_FAN_PWM_Pin|MOTOR_FAN_PWM_Pin|MOTOR_PUMP_PWM_Pin;
 8001bba:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001bbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <HAL_TIM_MspPostInit+0x70>)
 8001bd8:	f001 fc9a 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40000400 	.word	0x40000400
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020800 	.word	0x40020800

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <NMI_Handler+0x4>

08001bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <MemManage_Handler+0x4>

08001c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <BusFault_Handler+0x4>

08001c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <UsageFault_Handler+0x4>

08001c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3c:	f000 f8c0 	bl	8001dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f001 fe31 	bl	80038b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <ADC_IRQHandler+0x10>)
 8001c5a:	f000 f914 	bl	8001e86 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200002ac 	.word	0x200002ac

08001c68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AAC_FAULT_Pin);
 8001c6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c70:	f001 fe1e 	bl	80038b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PAG_FAULT_Pin);
 8001c74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c78:	f001 fe1a 	bl	80038b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPA_FAULT_Pin);
 8001c84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c88:	f001 fe12 	bl	80038b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <DMA2_Stream0_IRQHandler+0x10>)
 8001c96:	f001 f9d1 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200002f4 	.word	0x200002f4

08001ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <SystemInit+0x20>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <SystemInit+0x20>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d00 <LoopFillZerobss+0x12>
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cce:	490e      	ldr	r1, [pc, #56]	; (8001d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ce4:	4c0b      	ldr	r4, [pc, #44]	; (8001d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf2:	f7ff ffd7 	bl	8001ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f003 f857 	bl	8004da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfa:	f7ff f817 	bl	8000d2c <main>
  bx  lr    
 8001cfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d0c:	08004f0c 	.word	0x08004f0c
  ldr r2, =_sbss
 8001d10:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d14:	20000528 	.word	0x20000528

08001d18 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <CAN1_RX0_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <HAL_Init+0x40>)
 8001d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_Init+0x40>)
 8001d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_Init+0x40>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 ff49 	bl	8002bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f000 f808 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d50:	f7ff fccc 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x54>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_InitTick+0x58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 ff61 	bl	8002c46 <HAL_SYSTICK_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00e      	b.n	8001dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d80a      	bhi.n	8001daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f000 ff29 	bl	8002bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <HAL_InitTick+0x5c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000006c 	.word	0x2000006c
 8001db8:	20000074 	.word	0x20000074
 8001dbc:	20000070 	.word	0x20000070

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000074 	.word	0x20000074
 8001de4:	20000524 	.word	0x20000524

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000524 	.word	0x20000524

08001e00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e033      	b.n	8001e7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fc8c 	bl	800173c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e46:	f023 0302 	bic.w	r3, r3, #2
 8001e4a:	f043 0202 	orr.w	r2, r3, #2
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fb6e 	bl	8002534 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f023 0303 	bic.w	r3, r3, #3
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e6e:	e001      	b.n	8001e74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d049      	beq.n	8001f50 <HAL_ADC_IRQHandler+0xca>
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d046      	beq.n	8001f50 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d105      	bne.n	8001eda <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d12b      	bne.n	8001f40 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d127      	bne.n	8001f40 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d119      	bne.n	8001f40 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0220 	bic.w	r2, r2, #32
 8001f1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7fe fdbb 	bl	8000abc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f06f 0212 	mvn.w	r2, #18
 8001f4e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d057      	beq.n	8002016 <HAL_ADC_IRQHandler+0x190>
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d054      	beq.n	8002016 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d139      	bne.n	8002006 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d12b      	bne.n	8002006 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d124      	bne.n	8002006 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11d      	bne.n	8002006 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d119      	bne.n	8002006 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fc12 	bl	8002830 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 020c 	mvn.w	r2, #12
 8002014:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002024:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d017      	beq.n	800205c <HAL_ADC_IRQHandler+0x1d6>
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d014      	beq.n	800205c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d10d      	bne.n	800205c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f93b 	bl	80022c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f06f 0201 	mvn.w	r2, #1
 800205a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800206a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d015      	beq.n	800209e <HAL_ADC_IRQHandler+0x218>
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d012      	beq.n	800209e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207c:	f043 0202 	orr.w	r2, r3, #2
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0220 	mvn.w	r2, #32
 800208c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f924 	bl	80022dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0220 	mvn.w	r2, #32
 800209c:	601a      	str	r2, [r3, #0]
  }
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_Start_DMA+0x1e>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e0e9      	b.n	800229a <HAL_ADC_Start_DMA+0x1f2>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d018      	beq.n	800210e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020ec:	4b6d      	ldr	r3, [pc, #436]	; (80022a4 <HAL_ADC_Start_DMA+0x1fc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a6d      	ldr	r2, [pc, #436]	; (80022a8 <HAL_ADC_Start_DMA+0x200>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0c9a      	lsrs	r2, r3, #18
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002100:	e002      	b.n	8002108 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	3b01      	subs	r3, #1
 8002106:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f9      	bne.n	8002102 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800211c:	d107      	bne.n	800212e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800212c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b01      	cmp	r3, #1
 800213a:	f040 80a1 	bne.w	8002280 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002168:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217c:	d106      	bne.n	800218c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f023 0206 	bic.w	r2, r3, #6
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	645a      	str	r2, [r3, #68]	; 0x44
 800218a:	e002      	b.n	8002192 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800219a:	4b44      	ldr	r3, [pc, #272]	; (80022ac <HAL_ADC_Start_DMA+0x204>)
 800219c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	4a43      	ldr	r2, [pc, #268]	; (80022b0 <HAL_ADC_Start_DMA+0x208>)
 80021a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	4a42      	ldr	r2, [pc, #264]	; (80022b4 <HAL_ADC_Start_DMA+0x20c>)
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	4a41      	ldr	r2, [pc, #260]	; (80022b8 <HAL_ADC_Start_DMA+0x210>)
 80021b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	334c      	adds	r3, #76	; 0x4c
 80021ea:	4619      	mov	r1, r3
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f000 fecc 	bl	8002f8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d12a      	bne.n	8002256 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a2d      	ldr	r2, [pc, #180]	; (80022bc <HAL_ADC_Start_DMA+0x214>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d015      	beq.n	8002236 <HAL_ADC_Start_DMA+0x18e>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a2c      	ldr	r2, [pc, #176]	; (80022c0 <HAL_ADC_Start_DMA+0x218>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d105      	bne.n	8002220 <HAL_ADC_Start_DMA+0x178>
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_ADC_Start_DMA+0x204>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <HAL_ADC_Start_DMA+0x21c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d136      	bne.n	8002298 <HAL_ADC_Start_DMA+0x1f0>
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_ADC_Start_DMA+0x204>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d130      	bne.n	8002298 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d129      	bne.n	8002298 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	e020      	b.n	8002298 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a18      	ldr	r2, [pc, #96]	; (80022bc <HAL_ADC_Start_DMA+0x214>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d11b      	bne.n	8002298 <HAL_ADC_Start_DMA+0x1f0>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d114      	bne.n	8002298 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	e00b      	b.n	8002298 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f043 0210 	orr.w	r2, r3, #16
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000006c 	.word	0x2000006c
 80022a8:	431bde83 	.word	0x431bde83
 80022ac:	40012300 	.word	0x40012300
 80022b0:	0800272d 	.word	0x0800272d
 80022b4:	080027e7 	.word	0x080027e7
 80022b8:	08002803 	.word	0x08002803
 80022bc:	40012000 	.word	0x40012000
 80022c0:	40012100 	.word	0x40012100
 80022c4:	40012200 	.word	0x40012200

080022c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x1c>
 8002308:	2302      	movs	r3, #2
 800230a:	e105      	b.n	8002518 <HAL_ADC_ConfigChannel+0x228>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b09      	cmp	r3, #9
 800231a:	d925      	bls.n	8002368 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68d9      	ldr	r1, [r3, #12]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	3b1e      	subs	r3, #30
 8002332:	2207      	movs	r2, #7
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43da      	mvns	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	400a      	ands	r2, r1
 8002340:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68d9      	ldr	r1, [r3, #12]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	b29b      	uxth	r3, r3
 8002352:	4618      	mov	r0, r3
 8002354:	4603      	mov	r3, r0
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4403      	add	r3, r0
 800235a:	3b1e      	subs	r3, #30
 800235c:	409a      	lsls	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	e022      	b.n	80023ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6919      	ldr	r1, [r3, #16]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	2207      	movs	r2, #7
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	400a      	ands	r2, r1
 800238a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6919      	ldr	r1, [r3, #16]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	4618      	mov	r0, r3
 800239e:	4603      	mov	r3, r0
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4403      	add	r3, r0
 80023a4:	409a      	lsls	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d824      	bhi.n	8002400 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	3b05      	subs	r3, #5
 80023c8:	221f      	movs	r2, #31
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	400a      	ands	r2, r1
 80023d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4618      	mov	r0, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b05      	subs	r3, #5
 80023f2:	fa00 f203 	lsl.w	r2, r0, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	635a      	str	r2, [r3, #52]	; 0x34
 80023fe:	e04c      	b.n	800249a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b0c      	cmp	r3, #12
 8002406:	d824      	bhi.n	8002452 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	3b23      	subs	r3, #35	; 0x23
 800241a:	221f      	movs	r2, #31
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43da      	mvns	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	400a      	ands	r2, r1
 8002428:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	4618      	mov	r0, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	3b23      	subs	r3, #35	; 0x23
 8002444:	fa00 f203 	lsl.w	r2, r0, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
 8002450:	e023      	b.n	800249a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	3b41      	subs	r3, #65	; 0x41
 8002464:	221f      	movs	r2, #31
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	400a      	ands	r2, r1
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	3b41      	subs	r3, #65	; 0x41
 800248e:	fa00 f203 	lsl.w	r2, r0, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800249a:	4b22      	ldr	r3, [pc, #136]	; (8002524 <HAL_ADC_ConfigChannel+0x234>)
 800249c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a21      	ldr	r2, [pc, #132]	; (8002528 <HAL_ADC_ConfigChannel+0x238>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d109      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1cc>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b12      	cmp	r3, #18
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a19      	ldr	r2, [pc, #100]	; (8002528 <HAL_ADC_ConfigChannel+0x238>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d123      	bne.n	800250e <HAL_ADC_ConfigChannel+0x21e>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d003      	beq.n	80024d6 <HAL_ADC_ConfigChannel+0x1e6>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b11      	cmp	r3, #17
 80024d4:	d11b      	bne.n	800250e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d111      	bne.n	800250e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_ADC_ConfigChannel+0x23c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a10      	ldr	r2, [pc, #64]	; (8002530 <HAL_ADC_ConfigChannel+0x240>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	0c9a      	lsrs	r2, r3, #18
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002500:	e002      	b.n	8002508 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	3b01      	subs	r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f9      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40012300 	.word	0x40012300
 8002528:	40012000 	.word	0x40012000
 800252c:	2000006c 	.word	0x2000006c
 8002530:	431bde83 	.word	0x431bde83

08002534 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800253c:	4b79      	ldr	r3, [pc, #484]	; (8002724 <ADC_Init+0x1f0>)
 800253e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	431a      	orrs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	021a      	lsls	r2, r3, #8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800258c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6899      	ldr	r1, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	4a58      	ldr	r2, [pc, #352]	; (8002728 <ADC_Init+0x1f4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d022      	beq.n	8002612 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	e00f      	b.n	8002632 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002630:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0202 	bic.w	r2, r2, #2
 8002640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7e1b      	ldrb	r3, [r3, #24]
 800264c:	005a      	lsls	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01b      	beq.n	8002698 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800266e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800267e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	3b01      	subs	r3, #1
 800268c:	035a      	lsls	r2, r3, #13
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	e007      	b.n	80026a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	051a      	lsls	r2, r3, #20
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6899      	ldr	r1, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026ea:	025a      	lsls	r2, r3, #9
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6899      	ldr	r1, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	029a      	lsls	r2, r3, #10
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	609a      	str	r2, [r3, #8]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	40012300 	.word	0x40012300
 8002728:	0f000001 	.word	0x0f000001

0800272c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002742:	2b00      	cmp	r3, #0
 8002744:	d13c      	bne.n	80027c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d12b      	bne.n	80027b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002764:	2b00      	cmp	r3, #0
 8002766:	d127      	bne.n	80027b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002772:	2b00      	cmp	r3, #0
 8002774:	d006      	beq.n	8002784 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002780:	2b00      	cmp	r3, #0
 8002782:	d119      	bne.n	80027b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0220 	bic.w	r2, r2, #32
 8002792:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d105      	bne.n	80027b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f7fe f97f 	bl	8000abc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027be:	e00e      	b.n	80027de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff fd85 	bl	80022dc <HAL_ADC_ErrorCallback>
}
 80027d2:	e004      	b.n	80027de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f7fe f957 	bl	8000aa8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2240      	movs	r2, #64	; 0x40
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f043 0204 	orr.w	r2, r3, #4
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f7ff fd5a 	bl	80022dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0ed      	b.n	8002a32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff f822 	bl	80018ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002878:	f7ff fab6 	bl	8001de8 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800287e:	e012      	b.n	80028a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002880:	f7ff fab2 	bl	8001de8 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b0a      	cmp	r3, #10
 800288c:	d90b      	bls.n	80028a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2205      	movs	r2, #5
 800289e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0c5      	b.n	8002a32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0e5      	beq.n	8002880 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0202 	bic.w	r2, r2, #2
 80028c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c4:	f7ff fa90 	bl	8001de8 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028ca:	e012      	b.n	80028f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028cc:	f7ff fa8c 	bl	8001de8 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b0a      	cmp	r3, #10
 80028d8:	d90b      	bls.n	80028f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2205      	movs	r2, #5
 80028ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e09f      	b.n	8002a32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e5      	bne.n	80028cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7e1b      	ldrb	r3, [r3, #24]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d108      	bne.n	800291a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e007      	b.n	800292a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7e5b      	ldrb	r3, [r3, #25]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d108      	bne.n	8002944 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	e007      	b.n	8002954 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7e9b      	ldrb	r3, [r3, #26]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d108      	bne.n	800296e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0220 	orr.w	r2, r2, #32
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e007      	b.n	800297e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0220 	bic.w	r2, r2, #32
 800297c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7edb      	ldrb	r3, [r3, #27]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d108      	bne.n	8002998 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0210 	bic.w	r2, r2, #16
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e007      	b.n	80029a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0210 	orr.w	r2, r2, #16
 80029a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7f1b      	ldrb	r3, [r3, #28]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d108      	bne.n	80029c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0208 	orr.w	r2, r2, #8
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e007      	b.n	80029d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0208 	bic.w	r2, r2, #8
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7f5b      	ldrb	r3, [r3, #29]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d108      	bne.n	80029ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0204 	orr.w	r2, r2, #4
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e007      	b.n	80029fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0204 	bic.w	r2, r2, #4
 80029fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	ea42 0103 	orr.w	r1, r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	1e5a      	subs	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba8:	d301      	bcc.n	8002bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00f      	b.n	8002bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <SysTick_Config+0x40>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f7ff ff8e 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000e010 	.word	0xe000e010

08002bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff29 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c04:	f7ff ff3e 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff8e 	bl	8002b30 <NVIC_EncodePriority>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5d 	bl	8002adc <__NVIC_SetPriority>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff31 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ffa2 	bl	8002b98 <SysTick_Config>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e014      	b.n	8002c9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	791b      	ldrb	r3, [r3, #4]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d105      	bne.n	8002c86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7fe feb3 	bl	80019ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	795b      	ldrb	r3, [r3, #5]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_DAC_Start+0x16>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e040      	b.n	8002d3a <HAL_DAC_Start+0x98>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6819      	ldr	r1, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002cec:	2b3c      	cmp	r3, #60	; 0x3c
 8002cee:	d11d      	bne.n	8002d2c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	e014      	b.n	8002d2c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	213c      	movs	r1, #60	; 0x3c
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d107      	bne.n	8002d2c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0202 	orr.w	r2, r2, #2
 8002d2a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b087      	sub	sp, #28
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e004      	b.n	8002d7a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	3314      	adds	r3, #20
 8002d78:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	795b      	ldrb	r3, [r3, #5]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_DAC_ConfigChannel+0x18>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e03c      	b.n	8002e22 <HAL_DAC_ConfigChannel+0x92>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2202      	movs	r2, #2
 8002db2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	22c0      	movs	r2, #192	; 0xc0
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	400a      	ands	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7fe ffd4 	bl	8001de8 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e099      	b.n	8002f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6c:	e00f      	b.n	8002e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6e:	f7fe ffbb 	bl	8001de8 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d908      	bls.n	8002e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e078      	b.n	8002f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e8      	bne.n	8002e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_DMA_Init+0x158>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d107      	bne.n	8002ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d117      	bne.n	8002f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fa6f 	bl	8003418 <DMA_CheckFifoParam>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e016      	b.n	8002f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa26 	bl	80033ac <DMA_CalcBaseAndBitshift>
 8002f60:	4603      	mov	r3, r0
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	223f      	movs	r2, #63	; 0x3f
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	f010803f 	.word	0xf010803f

08002f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_DMA_Start_IT+0x26>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e040      	b.n	8003034 <HAL_DMA_Start_IT+0xa8>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d12f      	bne.n	8003026 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f9b8 	bl	8003350 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	223f      	movs	r2, #63	; 0x3f
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0216 	orr.w	r2, r2, #22
 8002ffa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0208 	orr.w	r2, r2, #8
 8003012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e005      	b.n	8003032 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003048:	4b8e      	ldr	r3, [pc, #568]	; (8003284 <HAL_DMA_IRQHandler+0x248>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a8e      	ldr	r2, [pc, #568]	; (8003288 <HAL_DMA_IRQHandler+0x24c>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	2208      	movs	r2, #8
 8003068:	409a      	lsls	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01a      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0204 	bic.w	r2, r2, #4
 800308e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	2208      	movs	r2, #8
 8003096:	409a      	lsls	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	2201      	movs	r2, #1
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d012      	beq.n	80030de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	2201      	movs	r2, #1
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d6:	f043 0202 	orr.w	r2, r3, #2
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	2204      	movs	r2, #4
 80030e4:	409a      	lsls	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d012      	beq.n	8003114 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	2204      	movs	r2, #4
 8003102:	409a      	lsls	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310c:	f043 0204 	orr.w	r2, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	2210      	movs	r2, #16
 800311a:	409a      	lsls	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d043      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d03c      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	2210      	movs	r2, #16
 8003138:	409a      	lsls	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d018      	beq.n	800317e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d024      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
 800316a:	e01f      	b.n	80031ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01b      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
 800317c:	e016      	b.n	80031ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d107      	bne.n	800319c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0208 	bic.w	r2, r2, #8
 800319a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	2220      	movs	r2, #32
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 808f 	beq.w	80032dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8087 	beq.w	80032dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	2220      	movs	r2, #32
 80031d4:	409a      	lsls	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d136      	bne.n	8003254 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0216 	bic.w	r2, r2, #22
 80031f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003204:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_DMA_IRQHandler+0x1da>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0208 	bic.w	r2, r2, #8
 8003224:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	223f      	movs	r2, #63	; 0x3f
 800322c:	409a      	lsls	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003246:	2b00      	cmp	r3, #0
 8003248:	d07e      	beq.n	8003348 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
        }
        return;
 8003252:	e079      	b.n	8003348 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01d      	beq.n	800329e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	2b00      	cmp	r3, #0
 8003276:	d031      	beq.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
 8003280:	e02c      	b.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
 8003282:	bf00      	nop
 8003284:	2000006c 	.word	0x2000006c
 8003288:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d023      	beq.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
 800329c:	e01e      	b.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10f      	bne.n	80032cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0210 	bic.w	r2, r2, #16
 80032ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d032      	beq.n	800334a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2205      	movs	r2, #5
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3301      	adds	r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	429a      	cmp	r2, r3
 8003312:	d307      	bcc.n	8003324 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f2      	bne.n	8003308 <HAL_DMA_IRQHandler+0x2cc>
 8003322:	e000      	b.n	8003326 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003324:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
 8003346:	e000      	b.n	800334a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003348:	bf00      	nop
    }
  }
}
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800336c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b40      	cmp	r3, #64	; 0x40
 800337c:	d108      	bne.n	8003390 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800338e:	e007      	b.n	80033a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	60da      	str	r2, [r3, #12]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	3b10      	subs	r3, #16
 80033bc:	4a14      	ldr	r2, [pc, #80]	; (8003410 <DMA_CalcBaseAndBitshift+0x64>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033c6:	4a13      	ldr	r2, [pc, #76]	; (8003414 <DMA_CalcBaseAndBitshift+0x68>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d909      	bls.n	80033ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	1d1a      	adds	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	659a      	str	r2, [r3, #88]	; 0x58
 80033ec:	e007      	b.n	80033fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	aaaaaaab 	.word	0xaaaaaaab
 8003414:	08004ef4 	.word	0x08004ef4

08003418 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11f      	bne.n	8003472 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d856      	bhi.n	80034e6 <DMA_CheckFifoParam+0xce>
 8003438:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <DMA_CheckFifoParam+0x28>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003451 	.word	0x08003451
 8003444:	08003463 	.word	0x08003463
 8003448:	08003451 	.word	0x08003451
 800344c:	080034e7 	.word	0x080034e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d046      	beq.n	80034ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003460:	e043      	b.n	80034ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800346a:	d140      	bne.n	80034ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003470:	e03d      	b.n	80034ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347a:	d121      	bne.n	80034c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d837      	bhi.n	80034f2 <DMA_CheckFifoParam+0xda>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <DMA_CheckFifoParam+0x70>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003499 	.word	0x08003499
 800348c:	0800349f 	.word	0x0800349f
 8003490:	08003499 	.word	0x08003499
 8003494:	080034b1 	.word	0x080034b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	e030      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d025      	beq.n	80034f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ae:	e022      	b.n	80034f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034b8:	d11f      	bne.n	80034fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034be:	e01c      	b.n	80034fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d903      	bls.n	80034ce <DMA_CheckFifoParam+0xb6>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d003      	beq.n	80034d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034cc:	e018      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      break;
 80034d2:	e015      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00e      	beq.n	80034fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e00b      	b.n	80034fe <DMA_CheckFifoParam+0xe6>
      break;
 80034e6:	bf00      	nop
 80034e8:	e00a      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034ea:	bf00      	nop
 80034ec:	e008      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034ee:	bf00      	nop
 80034f0:	e006      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
 80034f4:	e004      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;   
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop

08003510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	e16b      	b.n	8003804 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800352c:	2201      	movs	r2, #1
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	429a      	cmp	r2, r3
 8003546:	f040 815a 	bne.w	80037fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d005      	beq.n	8003562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800355e:	2b02      	cmp	r3, #2
 8003560:	d130      	bne.n	80035c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2203      	movs	r2, #3
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003598:	2201      	movs	r2, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 0201 	and.w	r2, r3, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d017      	beq.n	8003600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	2203      	movs	r2, #3
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d123      	bne.n	8003654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	08da      	lsrs	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3208      	adds	r2, #8
 8003614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	220f      	movs	r2, #15
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	08da      	lsrs	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3208      	adds	r2, #8
 800364e:	69b9      	ldr	r1, [r7, #24]
 8003650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0203 	and.w	r2, r3, #3
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80b4 	beq.w	80037fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	4b60      	ldr	r3, [pc, #384]	; (800381c <HAL_GPIO_Init+0x30c>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	4a5f      	ldr	r2, [pc, #380]	; (800381c <HAL_GPIO_Init+0x30c>)
 80036a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a4:	6453      	str	r3, [r2, #68]	; 0x44
 80036a6:	4b5d      	ldr	r3, [pc, #372]	; (800381c <HAL_GPIO_Init+0x30c>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036b2:	4a5b      	ldr	r2, [pc, #364]	; (8003820 <HAL_GPIO_Init+0x310>)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	3302      	adds	r3, #2
 80036ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a52      	ldr	r2, [pc, #328]	; (8003824 <HAL_GPIO_Init+0x314>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02b      	beq.n	8003736 <HAL_GPIO_Init+0x226>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a51      	ldr	r2, [pc, #324]	; (8003828 <HAL_GPIO_Init+0x318>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d025      	beq.n	8003732 <HAL_GPIO_Init+0x222>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a50      	ldr	r2, [pc, #320]	; (800382c <HAL_GPIO_Init+0x31c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01f      	beq.n	800372e <HAL_GPIO_Init+0x21e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a4f      	ldr	r2, [pc, #316]	; (8003830 <HAL_GPIO_Init+0x320>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d019      	beq.n	800372a <HAL_GPIO_Init+0x21a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a4e      	ldr	r2, [pc, #312]	; (8003834 <HAL_GPIO_Init+0x324>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_GPIO_Init+0x216>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4d      	ldr	r2, [pc, #308]	; (8003838 <HAL_GPIO_Init+0x328>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00d      	beq.n	8003722 <HAL_GPIO_Init+0x212>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4c      	ldr	r2, [pc, #304]	; (800383c <HAL_GPIO_Init+0x32c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <HAL_GPIO_Init+0x20e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4b      	ldr	r2, [pc, #300]	; (8003840 <HAL_GPIO_Init+0x330>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_GPIO_Init+0x20a>
 8003716:	2307      	movs	r3, #7
 8003718:	e00e      	b.n	8003738 <HAL_GPIO_Init+0x228>
 800371a:	2308      	movs	r3, #8
 800371c:	e00c      	b.n	8003738 <HAL_GPIO_Init+0x228>
 800371e:	2306      	movs	r3, #6
 8003720:	e00a      	b.n	8003738 <HAL_GPIO_Init+0x228>
 8003722:	2305      	movs	r3, #5
 8003724:	e008      	b.n	8003738 <HAL_GPIO_Init+0x228>
 8003726:	2304      	movs	r3, #4
 8003728:	e006      	b.n	8003738 <HAL_GPIO_Init+0x228>
 800372a:	2303      	movs	r3, #3
 800372c:	e004      	b.n	8003738 <HAL_GPIO_Init+0x228>
 800372e:	2302      	movs	r3, #2
 8003730:	e002      	b.n	8003738 <HAL_GPIO_Init+0x228>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_GPIO_Init+0x228>
 8003736:	2300      	movs	r3, #0
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	f002 0203 	and.w	r2, r2, #3
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	4093      	lsls	r3, r2
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003748:	4935      	ldr	r1, [pc, #212]	; (8003820 <HAL_GPIO_Init+0x310>)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	3302      	adds	r3, #2
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003756:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_GPIO_Init+0x334>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800377a:	4a32      	ldr	r2, [pc, #200]	; (8003844 <HAL_GPIO_Init+0x334>)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003780:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_GPIO_Init+0x334>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037a4:	4a27      	ldr	r2, [pc, #156]	; (8003844 <HAL_GPIO_Init+0x334>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037aa:	4b26      	ldr	r3, [pc, #152]	; (8003844 <HAL_GPIO_Init+0x334>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ce:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <HAL_GPIO_Init+0x334>)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_GPIO_Init+0x334>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f8:	4a12      	ldr	r2, [pc, #72]	; (8003844 <HAL_GPIO_Init+0x334>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	f67f ae90 	bls.w	800352c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3724      	adds	r7, #36	; 0x24
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800
 8003820:	40013800 	.word	0x40013800
 8003824:	40020000 	.word	0x40020000
 8003828:	40020400 	.word	0x40020400
 800382c:	40020800 	.word	0x40020800
 8003830:	40020c00 	.word	0x40020c00
 8003834:	40021000 	.word	0x40021000
 8003838:	40021400 	.word	0x40021400
 800383c:	40021800 	.word	0x40021800
 8003840:	40021c00 	.word	0x40021c00
 8003844:	40013c00 	.word	0x40013c00

08003848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	807b      	strh	r3, [r7, #2]
 8003854:	4613      	mov	r3, r2
 8003856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003858:	787b      	ldrb	r3, [r7, #1]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003864:	e003      	b.n	800386e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003866:	887b      	ldrh	r3, [r7, #2]
 8003868:	041a      	lsls	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	619a      	str	r2, [r3, #24]
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800388c:	887a      	ldrh	r2, [r7, #2]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4013      	ands	r3, r2
 8003892:	041a      	lsls	r2, r3, #16
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	43d9      	mvns	r1, r3
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	400b      	ands	r3, r1
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	619a      	str	r2, [r3, #24]
}
 80038a2:	bf00      	nop
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d006      	beq.n	80038d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038c6:	4a05      	ldr	r2, [pc, #20]	; (80038dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fc fdf8 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40013c00 	.word	0x40013c00

080038e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e267      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d075      	beq.n	80039ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038fe:	4b88      	ldr	r3, [pc, #544]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b04      	cmp	r3, #4
 8003908:	d00c      	beq.n	8003924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800390a:	4b85      	ldr	r3, [pc, #532]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003912:	2b08      	cmp	r3, #8
 8003914:	d112      	bne.n	800393c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003916:	4b82      	ldr	r3, [pc, #520]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003922:	d10b      	bne.n	800393c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003924:	4b7e      	ldr	r3, [pc, #504]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05b      	beq.n	80039e8 <HAL_RCC_OscConfig+0x108>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d157      	bne.n	80039e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e242      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	d106      	bne.n	8003954 <HAL_RCC_OscConfig+0x74>
 8003946:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a75      	ldr	r2, [pc, #468]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e01d      	b.n	8003990 <HAL_RCC_OscConfig+0xb0>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0x98>
 800395e:	4b70      	ldr	r3, [pc, #448]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a6f      	ldr	r2, [pc, #444]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b6d      	ldr	r3, [pc, #436]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a6c      	ldr	r2, [pc, #432]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e00b      	b.n	8003990 <HAL_RCC_OscConfig+0xb0>
 8003978:	4b69      	ldr	r3, [pc, #420]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a68      	ldr	r2, [pc, #416]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 800397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b66      	ldr	r3, [pc, #408]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a65      	ldr	r2, [pc, #404]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 800398a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe fa26 	bl	8001de8 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fe fa22 	bl	8001de8 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	; 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e207      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b5b      	ldr	r3, [pc, #364]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0xc0>
 80039be:	e014      	b.n	80039ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fe fa12 	bl	8001de8 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fe fa0e 	bl	8001de8 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e1f3      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	4b51      	ldr	r3, [pc, #324]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0xe8>
 80039e6:	e000      	b.n	80039ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d063      	beq.n	8003abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039f6:	4b4a      	ldr	r3, [pc, #296]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a02:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d11c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0e:	4b44      	ldr	r3, [pc, #272]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d116      	bne.n	8003a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_RCC_OscConfig+0x152>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e1c7      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4937      	ldr	r1, [pc, #220]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	e03a      	b.n	8003abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a50:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_RCC_OscConfig+0x244>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a56:	f7fe f9c7 	bl	8001de8 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a5e:	f7fe f9c3 	bl	8001de8 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e1a8      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7c:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4925      	ldr	r1, [pc, #148]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
 8003a90:	e015      	b.n	8003abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <HAL_RCC_OscConfig+0x244>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe f9a6 	bl	8001de8 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa0:	f7fe f9a2 	bl	8001de8 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e187      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d036      	beq.n	8003b38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad2:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <HAL_RCC_OscConfig+0x248>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fe f986 	bl	8001de8 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7fe f982 	bl	8001de8 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e167      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_OscConfig+0x240>)
 8003af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x200>
 8003afe:	e01b      	b.n	8003b38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCC_OscConfig+0x248>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b06:	f7fe f96f 	bl	8001de8 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0c:	e00e      	b.n	8003b2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b0e:	f7fe f96b 	bl	8001de8 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d907      	bls.n	8003b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e150      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
 8003b20:	40023800 	.word	0x40023800
 8003b24:	42470000 	.word	0x42470000
 8003b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	4b88      	ldr	r3, [pc, #544]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ea      	bne.n	8003b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8097 	beq.w	8003c74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b46:	2300      	movs	r3, #0
 8003b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4a:	4b81      	ldr	r3, [pc, #516]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10f      	bne.n	8003b76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	4b7d      	ldr	r3, [pc, #500]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a7c      	ldr	r2, [pc, #496]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b7a      	ldr	r3, [pc, #488]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b76:	4b77      	ldr	r3, [pc, #476]	; (8003d54 <HAL_RCC_OscConfig+0x474>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d118      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b82:	4b74      	ldr	r3, [pc, #464]	; (8003d54 <HAL_RCC_OscConfig+0x474>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a73      	ldr	r2, [pc, #460]	; (8003d54 <HAL_RCC_OscConfig+0x474>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8e:	f7fe f92b 	bl	8001de8 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b96:	f7fe f927 	bl	8001de8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e10c      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	4b6a      	ldr	r3, [pc, #424]	; (8003d54 <HAL_RCC_OscConfig+0x474>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x2ea>
 8003bbc:	4b64      	ldr	r3, [pc, #400]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4a63      	ldr	r2, [pc, #396]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc8:	e01c      	b.n	8003c04 <HAL_RCC_OscConfig+0x324>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b05      	cmp	r3, #5
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x30c>
 8003bd2:	4b5f      	ldr	r3, [pc, #380]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	4a5e      	ldr	r2, [pc, #376]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	f043 0304 	orr.w	r3, r3, #4
 8003bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bde:	4b5c      	ldr	r3, [pc, #368]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a5b      	ldr	r2, [pc, #364]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bea:	e00b      	b.n	8003c04 <HAL_RCC_OscConfig+0x324>
 8003bec:	4b58      	ldr	r3, [pc, #352]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	4a57      	ldr	r2, [pc, #348]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf8:	4b55      	ldr	r3, [pc, #340]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a54      	ldr	r2, [pc, #336]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	f023 0304 	bic.w	r3, r3, #4
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d015      	beq.n	8003c38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fe f8ec 	bl	8001de8 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fe f8e8 	bl	8001de8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0cb      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2a:	4b49      	ldr	r3, [pc, #292]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0ee      	beq.n	8003c14 <HAL_RCC_OscConfig+0x334>
 8003c36:	e014      	b.n	8003c62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c38:	f7fe f8d6 	bl	8001de8 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f7fe f8d2 	bl	8001de8 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0b5      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c56:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ee      	bne.n	8003c40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d105      	bne.n	8003c74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c68:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	4a38      	ldr	r2, [pc, #224]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80a1 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c7e:	4b34      	ldr	r3, [pc, #208]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d05c      	beq.n	8003d44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d141      	bne.n	8003d16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <HAL_RCC_OscConfig+0x478>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fe f8a6 	bl	8001de8 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7fe f8a2 	bl	8001de8 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e087      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69da      	ldr	r2, [r3, #28]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	019b      	lsls	r3, r3, #6
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	041b      	lsls	r3, r3, #16
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	491b      	ldr	r1, [pc, #108]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <HAL_RCC_OscConfig+0x478>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cee:	f7fe f87b 	bl	8001de8 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf6:	f7fe f877 	bl	8001de8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e05c      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x416>
 8003d14:	e054      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_RCC_OscConfig+0x478>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe f864 	bl	8001de8 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fe f860 	bl	8001de8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e045      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x444>
 8003d42:	e03d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d107      	bne.n	8003d5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e038      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40007000 	.word	0x40007000
 8003d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x4ec>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d028      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d121      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d11a      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d111      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	3b01      	subs	r3, #1
 8003da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d107      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800

08003dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0cc      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de4:	4b68      	ldr	r3, [pc, #416]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d90c      	bls.n	8003e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b65      	ldr	r3, [pc, #404]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfa:	4b63      	ldr	r3, [pc, #396]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0b8      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d020      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e24:	4b59      	ldr	r3, [pc, #356]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a58      	ldr	r2, [pc, #352]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e3c:	4b53      	ldr	r3, [pc, #332]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a52      	ldr	r2, [pc, #328]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e48:	4b50      	ldr	r3, [pc, #320]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	494d      	ldr	r1, [pc, #308]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d044      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d119      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e07f      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d003      	beq.n	8003e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8e:	4b3f      	ldr	r3, [pc, #252]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e06f      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9e:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e067      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eae:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f023 0203 	bic.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4934      	ldr	r1, [pc, #208]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec0:	f7fd ff92 	bl	8001de8 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec8:	f7fd ff8e 	bl	8001de8 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e04f      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 020c 	and.w	r2, r3, #12
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d1eb      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d20c      	bcs.n	8003f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e032      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4916      	ldr	r1, [pc, #88]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	490e      	ldr	r1, [pc, #56]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f56:	f000 f821 	bl	8003f9c <HAL_RCC_GetSysClockFreq>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	490a      	ldr	r1, [pc, #40]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003f68:	5ccb      	ldrb	r3, [r1, r3]
 8003f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6e:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd fef2 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40023c00 	.word	0x40023c00
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	08004ee4 	.word	0x08004ee4
 8003f94:	2000006c 	.word	0x2000006c
 8003f98:	20000070 	.word	0x20000070

08003f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa0:	b094      	sub	sp, #80	; 0x50
 8003fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa8:	2300      	movs	r3, #0
 8003faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fac:	2300      	movs	r3, #0
 8003fae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fb4:	4b79      	ldr	r3, [pc, #484]	; (800419c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d00d      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x40>
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	f200 80e1 	bhi.w	8004188 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d003      	beq.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fce:	e0db      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fd0:	4b73      	ldr	r3, [pc, #460]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fd4:	e0db      	b.n	800418e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fd6:	4b73      	ldr	r3, [pc, #460]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fda:	e0d8      	b.n	800418e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fdc:	4b6f      	ldr	r3, [pc, #444]	; (800419c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fe6:	4b6d      	ldr	r3, [pc, #436]	; (800419c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d063      	beq.n	80040ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff2:	4b6a      	ldr	r3, [pc, #424]	; (800419c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	099b      	lsrs	r3, r3, #6
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004004:	633b      	str	r3, [r7, #48]	; 0x30
 8004006:	2300      	movs	r3, #0
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
 800400a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800400e:	4622      	mov	r2, r4
 8004010:	462b      	mov	r3, r5
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	0159      	lsls	r1, r3, #5
 800401c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004020:	0150      	lsls	r0, r2, #5
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4621      	mov	r1, r4
 8004028:	1a51      	subs	r1, r2, r1
 800402a:	6139      	str	r1, [r7, #16]
 800402c:	4629      	mov	r1, r5
 800402e:	eb63 0301 	sbc.w	r3, r3, r1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004040:	4659      	mov	r1, fp
 8004042:	018b      	lsls	r3, r1, #6
 8004044:	4651      	mov	r1, sl
 8004046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800404a:	4651      	mov	r1, sl
 800404c:	018a      	lsls	r2, r1, #6
 800404e:	4651      	mov	r1, sl
 8004050:	ebb2 0801 	subs.w	r8, r2, r1
 8004054:	4659      	mov	r1, fp
 8004056:	eb63 0901 	sbc.w	r9, r3, r1
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800406a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800406e:	4690      	mov	r8, r2
 8004070:	4699      	mov	r9, r3
 8004072:	4623      	mov	r3, r4
 8004074:	eb18 0303 	adds.w	r3, r8, r3
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	462b      	mov	r3, r5
 800407c:	eb49 0303 	adc.w	r3, r9, r3
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800408e:	4629      	mov	r1, r5
 8004090:	024b      	lsls	r3, r1, #9
 8004092:	4621      	mov	r1, r4
 8004094:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004098:	4621      	mov	r1, r4
 800409a:	024a      	lsls	r2, r1, #9
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a2:	2200      	movs	r2, #0
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040ac:	f7fc f88c 	bl	80001c8 <__aeabi_uldivmod>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4613      	mov	r3, r2
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b8:	e058      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ba:	4b38      	ldr	r3, [pc, #224]	; (800419c <HAL_RCC_GetSysClockFreq+0x200>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	099b      	lsrs	r3, r3, #6
 80040c0:	2200      	movs	r2, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	4611      	mov	r1, r2
 80040c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040ca:	623b      	str	r3, [r7, #32]
 80040cc:	2300      	movs	r3, #0
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
 80040d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040d4:	4642      	mov	r2, r8
 80040d6:	464b      	mov	r3, r9
 80040d8:	f04f 0000 	mov.w	r0, #0
 80040dc:	f04f 0100 	mov.w	r1, #0
 80040e0:	0159      	lsls	r1, r3, #5
 80040e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e6:	0150      	lsls	r0, r2, #5
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4641      	mov	r1, r8
 80040ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80040f2:	4649      	mov	r1, r9
 80040f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004104:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004108:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800410c:	ebb2 040a 	subs.w	r4, r2, sl
 8004110:	eb63 050b 	sbc.w	r5, r3, fp
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	00eb      	lsls	r3, r5, #3
 800411e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004122:	00e2      	lsls	r2, r4, #3
 8004124:	4614      	mov	r4, r2
 8004126:	461d      	mov	r5, r3
 8004128:	4643      	mov	r3, r8
 800412a:	18e3      	adds	r3, r4, r3
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	464b      	mov	r3, r9
 8004130:	eb45 0303 	adc.w	r3, r5, r3
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004142:	4629      	mov	r1, r5
 8004144:	028b      	lsls	r3, r1, #10
 8004146:	4621      	mov	r1, r4
 8004148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800414c:	4621      	mov	r1, r4
 800414e:	028a      	lsls	r2, r1, #10
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004156:	2200      	movs	r2, #0
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	61fa      	str	r2, [r7, #28]
 800415c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004160:	f7fc f832 	bl	80001c8 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4613      	mov	r3, r2
 800416a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_RCC_GetSysClockFreq+0x200>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	0c1b      	lsrs	r3, r3, #16
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	3301      	adds	r3, #1
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800417c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800417e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004186:	e002      	b.n	800418e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800418a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800418c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800418e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004190:	4618      	mov	r0, r3
 8004192:	3750      	adds	r7, #80	; 0x50
 8004194:	46bd      	mov	sp, r7
 8004196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800
 80041a0:	00f42400 	.word	0x00f42400
 80041a4:	007a1200 	.word	0x007a1200

080041a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e041      	b.n	800423e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fd fc50 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 fa70 	bl	80046cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d001      	beq.n	8004260 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e046      	b.n	80042ee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a23      	ldr	r2, [pc, #140]	; (80042fc <HAL_TIM_Base_Start+0xb4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d022      	beq.n	80042b8 <HAL_TIM_Base_Start+0x70>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427a:	d01d      	beq.n	80042b8 <HAL_TIM_Base_Start+0x70>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <HAL_TIM_Base_Start+0xb8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d018      	beq.n	80042b8 <HAL_TIM_Base_Start+0x70>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <HAL_TIM_Base_Start+0xbc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <HAL_TIM_Base_Start+0x70>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <HAL_TIM_Base_Start+0xc0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00e      	beq.n	80042b8 <HAL_TIM_Base_Start+0x70>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1b      	ldr	r2, [pc, #108]	; (800430c <HAL_TIM_Base_Start+0xc4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d009      	beq.n	80042b8 <HAL_TIM_Base_Start+0x70>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a19      	ldr	r2, [pc, #100]	; (8004310 <HAL_TIM_Base_Start+0xc8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <HAL_TIM_Base_Start+0x70>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a18      	ldr	r2, [pc, #96]	; (8004314 <HAL_TIM_Base_Start+0xcc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d111      	bne.n	80042dc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b06      	cmp	r3, #6
 80042c8:	d010      	beq.n	80042ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042da:	e007      	b.n	80042ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40010000 	.word	0x40010000
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00
 800430c:	40010400 	.word	0x40010400
 8004310:	40014000 	.word	0x40014000
 8004314:	40001800 	.word	0x40001800

08004318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e041      	b.n	80043ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fd fbe6 	bl	8001b10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f000 f9b8 	bl	80046cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0ae      	b.n	8004534 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	f200 809f 	bhi.w	8004524 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004525 	.word	0x08004525
 80043f4:	08004525 	.word	0x08004525
 80043f8:	08004525 	.word	0x08004525
 80043fc:	08004461 	.word	0x08004461
 8004400:	08004525 	.word	0x08004525
 8004404:	08004525 	.word	0x08004525
 8004408:	08004525 	.word	0x08004525
 800440c:	080044a3 	.word	0x080044a3
 8004410:	08004525 	.word	0x08004525
 8004414:	08004525 	.word	0x08004525
 8004418:	08004525 	.word	0x08004525
 800441c:	080044e3 	.word	0x080044e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f9f0 	bl	800480c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0204 	bic.w	r2, r2, #4
 800444a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6999      	ldr	r1, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	619a      	str	r2, [r3, #24]
      break;
 800445e:	e064      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fa40 	bl	80048ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6999      	ldr	r1, [r3, #24]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	619a      	str	r2, [r3, #24]
      break;
 80044a0:	e043      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fa95 	bl	80049d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0208 	orr.w	r2, r2, #8
 80044bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0204 	bic.w	r2, r2, #4
 80044cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	61da      	str	r2, [r3, #28]
      break;
 80044e0:	e023      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fae9 	bl	8004ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69d9      	ldr	r1, [r3, #28]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	021a      	lsls	r2, r3, #8
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	61da      	str	r2, [r3, #28]
      break;
 8004522:	e002      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
      break;
 8004528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004532:	7dfb      	ldrb	r3, [r7, #23]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_TIM_ConfigClockSource+0x1c>
 8004554:	2302      	movs	r3, #2
 8004556:	e0b4      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x186>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004590:	d03e      	beq.n	8004610 <HAL_TIM_ConfigClockSource+0xd4>
 8004592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004596:	f200 8087 	bhi.w	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459e:	f000 8086 	beq.w	80046ae <HAL_TIM_ConfigClockSource+0x172>
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d87f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b70      	cmp	r3, #112	; 0x70
 80045aa:	d01a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0xa6>
 80045ac:	2b70      	cmp	r3, #112	; 0x70
 80045ae:	d87b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b60      	cmp	r3, #96	; 0x60
 80045b2:	d050      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x11a>
 80045b4:	2b60      	cmp	r3, #96	; 0x60
 80045b6:	d877      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b50      	cmp	r3, #80	; 0x50
 80045ba:	d03c      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0xfa>
 80045bc:	2b50      	cmp	r3, #80	; 0x50
 80045be:	d873      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d058      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x13a>
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d86f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b30      	cmp	r3, #48	; 0x30
 80045ca:	d064      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d86b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d060      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d867      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d05c      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d05a      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045e0:	e062      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f000 fb35 	bl	8004c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	609a      	str	r2, [r3, #8]
      break;
 800460e:	e04f      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6899      	ldr	r1, [r3, #8]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f000 fb1e 	bl	8004c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004632:	609a      	str	r2, [r3, #8]
      break;
 8004634:	e03c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	461a      	mov	r2, r3
 8004644:	f000 fa92 	bl	8004b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2150      	movs	r1, #80	; 0x50
 800464e:	4618      	mov	r0, r3
 8004650:	f000 faeb 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 8004654:	e02c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	461a      	mov	r2, r3
 8004664:	f000 fab1 	bl	8004bca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2160      	movs	r1, #96	; 0x60
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fadb 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 8004674:	e01c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	461a      	mov	r2, r3
 8004684:	f000 fa72 	bl	8004b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2140      	movs	r1, #64	; 0x40
 800468e:	4618      	mov	r0, r3
 8004690:	f000 facb 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 8004694:	e00c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 fac2 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 80046a6:	e003      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e000      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a40      	ldr	r2, [pc, #256]	; (80047e0 <TIM_Base_SetConfig+0x114>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d013      	beq.n	800470c <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ea:	d00f      	beq.n	800470c <TIM_Base_SetConfig+0x40>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a3d      	ldr	r2, [pc, #244]	; (80047e4 <TIM_Base_SetConfig+0x118>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00b      	beq.n	800470c <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3c      	ldr	r2, [pc, #240]	; (80047e8 <TIM_Base_SetConfig+0x11c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d007      	beq.n	800470c <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a3b      	ldr	r2, [pc, #236]	; (80047ec <TIM_Base_SetConfig+0x120>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3a      	ldr	r2, [pc, #232]	; (80047f0 <TIM_Base_SetConfig+0x124>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d108      	bne.n	800471e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2f      	ldr	r2, [pc, #188]	; (80047e0 <TIM_Base_SetConfig+0x114>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d02b      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472c:	d027      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2c      	ldr	r2, [pc, #176]	; (80047e4 <TIM_Base_SetConfig+0x118>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d023      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2b      	ldr	r2, [pc, #172]	; (80047e8 <TIM_Base_SetConfig+0x11c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01f      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2a      	ldr	r2, [pc, #168]	; (80047ec <TIM_Base_SetConfig+0x120>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01b      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <TIM_Base_SetConfig+0x124>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d017      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a28      	ldr	r2, [pc, #160]	; (80047f4 <TIM_Base_SetConfig+0x128>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a27      	ldr	r2, [pc, #156]	; (80047f8 <TIM_Base_SetConfig+0x12c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00f      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a26      	ldr	r2, [pc, #152]	; (80047fc <TIM_Base_SetConfig+0x130>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00b      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a25      	ldr	r2, [pc, #148]	; (8004800 <TIM_Base_SetConfig+0x134>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a24      	ldr	r2, [pc, #144]	; (8004804 <TIM_Base_SetConfig+0x138>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d003      	beq.n	800477e <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a23      	ldr	r2, [pc, #140]	; (8004808 <TIM_Base_SetConfig+0x13c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d108      	bne.n	8004790 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <TIM_Base_SetConfig+0x114>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_Base_SetConfig+0xf8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a0c      	ldr	r2, [pc, #48]	; (80047f0 <TIM_Base_SetConfig+0x124>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d103      	bne.n	80047cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	615a      	str	r2, [r3, #20]
}
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40010400 	.word	0x40010400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40014400 	.word	0x40014400
 80047fc:	40014800 	.word	0x40014800
 8004800:	40001800 	.word	0x40001800
 8004804:	40001c00 	.word	0x40001c00
 8004808:	40002000 	.word	0x40002000

0800480c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f023 0201 	bic.w	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 0302 	bic.w	r3, r3, #2
 8004854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a20      	ldr	r2, [pc, #128]	; (80048e4 <TIM_OC1_SetConfig+0xd8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_OC1_SetConfig+0x64>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <TIM_OC1_SetConfig+0xdc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d10c      	bne.n	800488a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0308 	bic.w	r3, r3, #8
 8004876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f023 0304 	bic.w	r3, r3, #4
 8004888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <TIM_OC1_SetConfig+0xd8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_OC1_SetConfig+0x8e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <TIM_OC1_SetConfig+0xdc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d111      	bne.n	80048be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40010400 	.word	0x40010400

080048ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f023 0210 	bic.w	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0320 	bic.w	r3, r3, #32
 8004936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <TIM_OC2_SetConfig+0xe4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_OC2_SetConfig+0x68>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <TIM_OC2_SetConfig+0xe8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d10d      	bne.n	8004970 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800495a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <TIM_OC2_SetConfig+0xe4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_OC2_SetConfig+0x94>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <TIM_OC2_SetConfig+0xe8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d113      	bne.n	80049a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800498e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40010000 	.word	0x40010000
 80049d4:	40010400 	.word	0x40010400

080049d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0303 	bic.w	r3, r3, #3
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a21      	ldr	r2, [pc, #132]	; (8004ab8 <TIM_OC3_SetConfig+0xe0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_OC3_SetConfig+0x66>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a20      	ldr	r2, [pc, #128]	; (8004abc <TIM_OC3_SetConfig+0xe4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10d      	bne.n	8004a5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <TIM_OC3_SetConfig+0xe0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_OC3_SetConfig+0x92>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a15      	ldr	r2, [pc, #84]	; (8004abc <TIM_OC3_SetConfig+0xe4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d113      	bne.n	8004a92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	621a      	str	r2, [r3, #32]
}
 8004aac:	bf00      	nop
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40010400 	.word	0x40010400

08004ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	031b      	lsls	r3, r3, #12
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a12      	ldr	r2, [pc, #72]	; (8004b64 <TIM_OC4_SetConfig+0xa4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_OC4_SetConfig+0x68>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <TIM_OC4_SetConfig+0xa8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d109      	bne.n	8004b3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	019b      	lsls	r3, r3, #6
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40010400 	.word	0x40010400

08004b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f023 0201 	bic.w	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 030a 	bic.w	r3, r3, #10
 8004ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b087      	sub	sp, #28
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0210 	bic.w	r2, r3, #16
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	031b      	lsls	r3, r3, #12
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f043 0307 	orr.w	r3, r3, #7
 8004c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	609a      	str	r2, [r3, #8]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	021a      	lsls	r2, r3, #8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	609a      	str	r2, [r3, #8]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e05a      	b.n	8004d6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d022      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d01d      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1d      	ldr	r2, [pc, #116]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d018      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1b      	ldr	r2, [pc, #108]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1a      	ldr	r2, [pc, #104]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00e      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d009      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d004      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d10c      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800
 8004d88:	40000c00 	.word	0x40000c00
 8004d8c:	40010400 	.word	0x40010400
 8004d90:	40014000 	.word	0x40014000
 8004d94:	40001800 	.word	0x40001800

08004d98 <memset>:
 8004d98:	4402      	add	r2, r0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d100      	bne.n	8004da2 <memset+0xa>
 8004da0:	4770      	bx	lr
 8004da2:	f803 1b01 	strb.w	r1, [r3], #1
 8004da6:	e7f9      	b.n	8004d9c <memset+0x4>

08004da8 <__libc_init_array>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	4d0d      	ldr	r5, [pc, #52]	; (8004de0 <__libc_init_array+0x38>)
 8004dac:	4c0d      	ldr	r4, [pc, #52]	; (8004de4 <__libc_init_array+0x3c>)
 8004dae:	1b64      	subs	r4, r4, r5
 8004db0:	10a4      	asrs	r4, r4, #2
 8004db2:	2600      	movs	r6, #0
 8004db4:	42a6      	cmp	r6, r4
 8004db6:	d109      	bne.n	8004dcc <__libc_init_array+0x24>
 8004db8:	4d0b      	ldr	r5, [pc, #44]	; (8004de8 <__libc_init_array+0x40>)
 8004dba:	4c0c      	ldr	r4, [pc, #48]	; (8004dec <__libc_init_array+0x44>)
 8004dbc:	f000 f818 	bl	8004df0 <_init>
 8004dc0:	1b64      	subs	r4, r4, r5
 8004dc2:	10a4      	asrs	r4, r4, #2
 8004dc4:	2600      	movs	r6, #0
 8004dc6:	42a6      	cmp	r6, r4
 8004dc8:	d105      	bne.n	8004dd6 <__libc_init_array+0x2e>
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd0:	4798      	blx	r3
 8004dd2:	3601      	adds	r6, #1
 8004dd4:	e7ee      	b.n	8004db4 <__libc_init_array+0xc>
 8004dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dda:	4798      	blx	r3
 8004ddc:	3601      	adds	r6, #1
 8004dde:	e7f2      	b.n	8004dc6 <__libc_init_array+0x1e>
 8004de0:	08004f04 	.word	0x08004f04
 8004de4:	08004f04 	.word	0x08004f04
 8004de8:	08004f04 	.word	0x08004f04
 8004dec:	08004f08 	.word	0x08004f08

08004df0 <_init>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	bf00      	nop
 8004df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df6:	bc08      	pop	{r3}
 8004df8:	469e      	mov	lr, r3
 8004dfa:	4770      	bx	lr

08004dfc <_fini>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	bf00      	nop
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr
