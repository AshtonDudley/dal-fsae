
TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003750  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f0  080038f0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038f8  080038f8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000419c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200041c0  200041c0  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e0b8  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000255d  00000000  00000000  0002e14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000de8  00000000  00000000  000306b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aa9  00000000  00000000  00031498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022813  00000000  00000000  00031f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010983  00000000  00000000  00054754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9130  00000000  00000000  000650d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000039f8  00000000  00000000  0013e208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00141c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038c0 	.word	0x080038c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080038c0 	.word	0x080038c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_GPIO_EXTI_Callback>:

#include "DRIVER_IO.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) {
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d105      	bne.n	80004e0 <HAL_GPIO_EXTI_Callback+0x1c>
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_P);
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80004d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <HAL_GPIO_EXTI_Callback+0x28>)
 80004da:	f002 fa62 	bl	80029a2 <HAL_GPIO_TogglePin>
	} else {
		__NOP();
  }
}
 80004de:	e000      	b.n	80004e2 <HAL_GPIO_EXTI_Callback+0x1e>
		__NOP();
 80004e0:	bf00      	nop
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40020c00 	.word	0x40020c00

080004f0 <TIM_Init>:
/**
  * @brief  Must be used to initialize ADC with DMA
  * @param ADC_HandleTypeDef
  * @retval None
  */
void TIM_Init(ADC_HandleTypeDef *TIM_hadc1){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(TIM_hadc1, (uint32_t*)adc_buf, ADC_BUFFER_LEN);
 80004f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004fc:	4903      	ldr	r1, [pc, #12]	; (800050c <TIM_Init+0x1c>)
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 fea0 	bl	8001244 <HAL_ADC_Start_DMA>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000044 	.word	0x20000044

08000510 <HAL_ADC_ConvHalfCpltCallback>:

	dataReadyFlag = 0;
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);	// DEBUG LED TOGGLE FOR TIME PROFILE
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	inBufPtr  = &adc_buf[0];
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_buf[0];
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000522:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000526:	2201      	movs	r2, #1
 8000528:	701a      	strb	r2, [r3, #0]

	// Average the first half of the buffer


	// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);	// Flashing this LED lets us monitor the state
}															// of the buffer using the oscilloscope
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20004044 	.word	0x20004044
 800053c:	20000044 	.word	0x20000044
 8000540:	20000000 	.word	0x20000000
 8000544:	20002044 	.word	0x20002044
 8000548:	20000040 	.word	0x20000040

0800054c <HAL_ADC_ConvCpltCallback>:

/**
  * @brief  This function is executed when  TIM buffer is completely full
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	inBufPtr  = &adc_buf[ADC_BUFFER_LEN / 2];
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <HAL_ADC_ConvCpltCallback+0x28>)
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000558:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_buf[ADC_BUFFER_LEN / 2];
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <HAL_ADC_ConvCpltCallback+0x30>)
 800055c:	4a08      	ldr	r2, [pc, #32]	; (8000580 <HAL_ADC_ConvCpltCallback+0x34>)
 800055e:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_ADC_ConvCpltCallback+0x38>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
	// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20004044 	.word	0x20004044
 8000578:	20001044 	.word	0x20001044
 800057c:	20000000 	.word	0x20000000
 8000580:	20003044 	.word	0x20003044
 8000584:	20000040 	.word	0x20000040

08000588 <AppConfig>:
};




void AppConfig() {
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0

	TIM_Init(&hadc1);
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <AppConfig+0x18>)
 800058e:	f7ff ffaf 	bl	80004f0 <TIM_Init>
	HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8000592:	2100      	movs	r1, #0
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <AppConfig+0x1c>)
 8000596:	f001 fc3e 	bl	8001e16 <HAL_DAC_Start>

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20004048 	.word	0x20004048
 80005a4:	20004118 	.word	0x20004118

080005a8 <AppMain>:

void AppMain() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0

	uint32_t prevTime = 0, curTime = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]

	state_codes_t cur_state = ENTRY_STATE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	74fb      	strb	r3, [r7, #19]
	int (*state_fun)(void);

	while (1) {
		//int voltage = TIM_ConvertValue(128);
		//TIM_OutputDAC(voltage);
		curTime = HAL_GetTick();
 80005ba:	f000 fdf3 	bl	80011a4 <HAL_GetTick>
 80005be:	60f8      	str	r0, [r7, #12]

		if (curTime - prevTime >= 500) {
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ca:	d306      	bcc.n	80005da <AppMain+0x32>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <AppMain+0x58>)
 80005d2:	f002 f9e6 	bl	80029a2 <HAL_GPIO_TogglePin>
			prevTime = curTime;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	617b      	str	r3, [r7, #20]
		}

	    state_fun = state[cur_state];
 80005da:	7cfb      	ldrb	r3, [r7, #19]
 80005dc:	4a09      	ldr	r2, [pc, #36]	; (8000604 <AppMain+0x5c>)
 80005de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e2:	60bb      	str	r3, [r7, #8]
	    rc = state_fun();
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	4798      	blx	r3
 80005e8:	4603      	mov	r3, r0
 80005ea:	71fb      	strb	r3, [r7, #7]

	    cur_state = lookup_transitions(cur_state, rc);
 80005ec:	79fa      	ldrb	r2, [r7, #7]
 80005ee:	7cfb      	ldrb	r3, [r7, #19]
 80005f0:	4611      	mov	r1, r2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f808 	bl	8000608 <lookup_transitions>
 80005f8:	4603      	mov	r3, r0
 80005fa:	74fb      	strb	r3, [r7, #19]
		curTime = HAL_GetTick();
 80005fc:	e7dd      	b.n	80005ba <AppMain+0x12>
 80005fe:	bf00      	nop
 8000600:	40020c00 	.word	0x40020c00
 8000604:	20000004 	.word	0x20000004

08000608 <lookup_transitions>:

	}
}

state_codes_t lookup_transitions(state_codes_t cur_state, ret_codes_t rc){
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	460a      	mov	r2, r1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	4613      	mov	r3, r2
 8000616:	71bb      	strb	r3, [r7, #6]
	return 0;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <entry_state>:

int entry_state(void){
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
	return 0;
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <idle_state>:
int idle_state(void){
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
	return 0;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <forward_state>:
int forward_state(void){
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
	return 0;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <reverse_state>:
int reverse_state(void){
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
	return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <end_state>:
int end_state(void){
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
	return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fd2d 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f813 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f000 f9e1 	bl	8000a48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000686:	f000 f9bf 	bl	8000a08 <MX_DMA_Init>
  MX_TIM1_Init();
 800068a:	f000 f937 	bl	80008fc <MX_TIM1_Init>
  MX_CAN1_Init();
 800068e:	f000 f8d5 	bl	800083c <MX_CAN1_Init>
  MX_ADC1_Init();
 8000692:	f000 f873 	bl	800077c <MX_ADC1_Init>
  MX_DAC_Init();
 8000696:	f000 f907 	bl	80008a8 <MX_DAC_Init>
  MX_TIM6_Init();
 800069a:	f000 f97f 	bl	800099c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  AppConfig();
 800069e:	f7ff ff73 	bl	8000588 <AppConfig>

  AppMain(); // Infinite Loop Begin
 80006a2:	f7ff ff81 	bl	80005a8 <AppMain>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)		// We don't use this, instead we use the loop inside AppMain()
 80006a6:	e7fe      	b.n	80006a6 <main+0x30>

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	; 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	; 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f8d6 	bl	8003868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	4a27      	ldr	r2, [pc, #156]	; (8000774 <SystemClock_Config+0xcc>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	; 0x40
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <SystemClock_Config+0xd0>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000724:	2307      	movs	r3, #7
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f002 f96b 	bl	8002a08 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000738:	f000 faec 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2102      	movs	r1, #2
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fbcc 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000766:	f000 fad5 	bl	8000d14 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_ADC1_Init+0xb4>)
 8000790:	4a28      	ldr	r2, [pc, #160]	; (8000834 <MX_ADC1_Init+0xb8>)
 8000792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_ADC1_Init+0xb4>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_ADC1_Init+0xb4>)
 800079c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_ADC1_Init+0xb4>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_ADC1_Init+0xb4>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_ADC1_Init+0xb4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_ADC1_Init+0xb4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC1_Init+0xb4>)
 80007be:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_ADC1_Init+0xb4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC1_Init+0xb4>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_ADC1_Init+0xb4>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_ADC1_Init+0xb4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007dc:	4814      	ldr	r0, [pc, #80]	; (8000830 <MX_ADC1_Init+0xb4>)
 80007de:	f000 fced 	bl	80011bc <HAL_ADC_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007e8:	f000 fa94 	bl	8000d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_ADC1_Init+0xb4>)
 80007fe:	f000 fe3b 	bl	8001478 <HAL_ADC_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000808:	f000 fa84 	bl	8000d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800080c:	2302      	movs	r3, #2
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000810:	2302      	movs	r3, #2
 8000812:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_ADC1_Init+0xb4>)
 800081a:	f000 fe2d 	bl	8001478 <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000824:	f000 fa76 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20004048 	.word	0x20004048
 8000834:	40012000 	.word	0x40012000
 8000838:	0f000001 	.word	0x0f000001

0800083c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_CAN1_Init+0x64>)
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <MX_CAN1_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_CAN1_Init+0x64>)
 8000848:	2210      	movs	r2, #16
 800084a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_CAN1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_CAN1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_CAN1_Init+0x64>)
 800085a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800085e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_CAN1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_CAN1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_CAN1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_CAN1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_CAN1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_CAN1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_CAN1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_CAN1_Init+0x64>)
 800088c:	f001 f894 	bl	80019b8 <HAL_CAN_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000896:	f000 fa3d 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200040f0 	.word	0x200040f0
 80008a4:	40006400 	.word	0x40006400

080008a8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ae:	463b      	mov	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_DAC_Init+0x4c>)
 80008b8:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <MX_DAC_Init+0x50>)
 80008ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_DAC_Init+0x4c>)
 80008be:	f001 fa88 	bl	8001dd2 <HAL_DAC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008c8:	f000 fa24 	bl	8000d14 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_DAC_Init+0x4c>)
 80008dc:	f001 faed 	bl	8001eba <HAL_DAC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008e6:	f000 fa15 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20004118 	.word	0x20004118
 80008f8:	40007400 	.word	0x40007400

080008fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_TIM1_Init+0x98>)
 800091a:	4a1f      	ldr	r2, [pc, #124]	; (8000998 <MX_TIM1_Init+0x9c>)
 800091c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800091e:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_TIM1_Init+0x98>)
 8000920:	223f      	movs	r2, #63	; 0x3f
 8000922:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_TIM1_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_TIM1_Init+0x98>)
 800092c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000930:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_TIM1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_TIM1_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_TIM1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000944:	4813      	ldr	r0, [pc, #76]	; (8000994 <MX_TIM1_Init+0x98>)
 8000946:	f002 fcc3 	bl	80032d0 <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 f9e0 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_TIM1_Init+0x98>)
 8000962:	f002 fd04 	bl	800336e <HAL_TIM_ConfigClockSource>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800096c:	f000 f9d2 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_TIM1_Init+0x98>)
 800097e:	f002 fef7 	bl	8003770 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000988:	f000 f9c4 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000412c 	.word	0x2000412c
 8000998:	40010000 	.word	0x40010000

0800099c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009ac:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_TIM6_Init+0x68>)
 80009ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009cc:	f002 fc80 	bl	80032d0 <HAL_TIM_Base_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009d6:	f000 f99d 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009e8:	f002 fec2 	bl	8003770 <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80009f2:	f000 f98f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20004174 	.word	0x20004174
 8000a04:	40001000 	.word	0x40001000

08000a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_DMA_Init+0x3c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2038      	movs	r0, #56	; 0x38
 8000a30:	f001 f999 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a34:	2038      	movs	r0, #56	; 0x38
 8000a36:	f001 f9b2 	bl	8001d9e <HAL_NVIC_EnableIRQ>

}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	4ba6      	ldr	r3, [pc, #664]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4aa5      	ldr	r2, [pc, #660]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000a68:	f043 0310 	orr.w	r3, r3, #16
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4ba3      	ldr	r3, [pc, #652]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0310 	and.w	r3, r3, #16
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	4b9f      	ldr	r3, [pc, #636]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a9e      	ldr	r2, [pc, #632]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b9c      	ldr	r3, [pc, #624]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b98      	ldr	r3, [pc, #608]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a97      	ldr	r2, [pc, #604]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b95      	ldr	r3, [pc, #596]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b91      	ldr	r3, [pc, #580]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a90      	ldr	r2, [pc, #576]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b8e      	ldr	r3, [pc, #568]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b8a      	ldr	r3, [pc, #552]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a89      	ldr	r2, [pc, #548]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b87      	ldr	r3, [pc, #540]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b83      	ldr	r3, [pc, #524]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a82      	ldr	r2, [pc, #520]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b80      	ldr	r3, [pc, #512]	; (8000cfc <MX_GPIO_Init+0x2b4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000b06:	2200      	movs	r2, #0
 8000b08:	f643 7188 	movw	r1, #16264	; 0x3f88
 8000b0c:	487c      	ldr	r0, [pc, #496]	; (8000d00 <MX_GPIO_Init+0x2b8>)
 8000b0e:	f001 ff2f 	bl	8002970 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2101      	movs	r1, #1
 8000b16:	487b      	ldr	r0, [pc, #492]	; (8000d04 <MX_GPIO_Init+0x2bc>)
 8000b18:	f001 ff2a 	bl	8002970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b22:	4879      	ldr	r0, [pc, #484]	; (8000d08 <MX_GPIO_Init+0x2c0>)
 8000b24:	f001 ff24 	bl	8002970 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 PE8 PE9
                           PE10 PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000b28:	f643 7388 	movw	r3, #16264	; 0x3f88
 8000b2c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	486f      	ldr	r0, [pc, #444]	; (8000d00 <MX_GPIO_Init+0x2b8>)
 8000b42:	f001 fd79 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4869      	ldr	r0, [pc, #420]	; (8000d04 <MX_GPIO_Init+0x2bc>)
 8000b5e:	f001 fd6b 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b62:	2308      	movs	r3, #8
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b72:	2305      	movs	r3, #5
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4861      	ldr	r0, [pc, #388]	; (8000d04 <MX_GPIO_Init+0x2bc>)
 8000b7e:	f001 fd5b 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b86:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	485d      	ldr	r0, [pc, #372]	; (8000d0c <MX_GPIO_Init+0x2c4>)
 8000b98:	f001 fd4e 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b9c:	23e0      	movs	r3, #224	; 0xe0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bac:	2305      	movs	r3, #5
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4855      	ldr	r0, [pc, #340]	; (8000d0c <MX_GPIO_Init+0x2c4>)
 8000bb8:	f001 fd3e 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4850      	ldr	r0, [pc, #320]	; (8000d10 <MX_GPIO_Init+0x2c8>)
 8000bd0:	f001 fd32 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000bd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	4845      	ldr	r0, [pc, #276]	; (8000d00 <MX_GPIO_Init+0x2b8>)
 8000bec:	f001 fd24 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c02:	2305      	movs	r3, #5
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4840      	ldr	r0, [pc, #256]	; (8000d10 <MX_GPIO_Init+0x2c8>)
 8000c0e:	f001 fd13 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c12:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c16:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4837      	ldr	r0, [pc, #220]	; (8000d08 <MX_GPIO_Init+0x2c0>)
 8000c2c:	f001 fd04 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c30:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c42:	2306      	movs	r3, #6
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	482d      	ldr	r0, [pc, #180]	; (8000d04 <MX_GPIO_Init+0x2bc>)
 8000c4e:	f001 fcf3 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4829      	ldr	r0, [pc, #164]	; (8000d0c <MX_GPIO_Init+0x2c4>)
 8000c68:	f001 fce6 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000c6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c7e:	230a      	movs	r3, #10
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4820      	ldr	r0, [pc, #128]	; (8000d0c <MX_GPIO_Init+0x2c4>)
 8000c8a:	f001 fcd5 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c8e:	2320      	movs	r3, #32
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4819      	ldr	r0, [pc, #100]	; (8000d08 <MX_GPIO_Init+0x2c0>)
 8000ca2:	f001 fcc9 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ca6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4813      	ldr	r0, [pc, #76]	; (8000d10 <MX_GPIO_Init+0x2c8>)
 8000cc4:	f001 fcb8 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ccc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <MX_GPIO_Init+0x2b8>)
 8000cde:	f001 fcab 	bl	8002638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2006      	movs	r0, #6
 8000ce8:	f001 f83d 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cec:	2006      	movs	r0, #6
 8000cee:	f001 f856 	bl	8001d9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3730      	adds	r7, #48	; 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40020c00 	.word	0x40020c00
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020400 	.word	0x40020400

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f000 fff6 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a2f      	ldr	r2, [pc, #188]	; (8000e4c <HAL_ADC_MspInit+0xdc>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d157      	bne.n	8000e42 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a2d      	ldr	r2, [pc, #180]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000dca:	2306      	movs	r3, #6
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481d      	ldr	r0, [pc, #116]	; (8000e54 <HAL_ADC_MspInit+0xe4>)
 8000dde:	f001 fc2b 	bl	8002638 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000de4:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <HAL_ADC_MspInit+0xec>)
 8000de6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e26:	480c      	ldr	r0, [pc, #48]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e28:	f001 f896 	bl	8001f58 <HAL_DMA_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e32:	f7ff ff6f 	bl	8000d14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e3a:	639a      	str	r2, [r3, #56]	; 0x38
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40012000 	.word	0x40012000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	20004090 	.word	0x20004090
 8000e5c:	40026410 	.word	0x40026410

08000e60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_CAN_MspInit+0x84>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d12b      	bne.n	8000eda <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_CAN_MspInit+0x88>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <HAL_CAN_MspInit+0x88>)
 8000e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_CAN_MspInit+0x88>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_CAN_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <HAL_CAN_MspInit+0x88>)
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_CAN_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000eca:	2309      	movs	r3, #9
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_CAN_MspInit+0x8c>)
 8000ed6:	f001 fbaf 	bl	8002638 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40006400 	.word	0x40006400
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020c00 	.word	0x40020c00

08000ef0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_DAC_MspInit+0x7c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d127      	bne.n	8000f62 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_DAC_MspInit+0x80>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <HAL_DAC_MspInit+0x80>)
 8000f1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_DAC_MspInit+0x80>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_DAC_MspInit+0x80>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_DAC_MspInit+0x80>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_DAC_MspInit+0x80>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <HAL_DAC_MspInit+0x84>)
 8000f5e:	f001 fb6b 	bl	8002638 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40007400 	.word	0x40007400
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020000 	.word	0x40020000

08000f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <HAL_TIM_Base_MspInit+0x64>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10e      	bne.n	8000fa8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000fa6:	e012      	b.n	8000fce <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_TIM_Base_MspInit+0x6c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10d      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_TIM_Base_MspInit+0x68>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40001000 	.word	0x40001000

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	e7fe      	b.n	8000fec <NMI_Handler+0x4>

08000fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <UsageFault_Handler+0x4>

08001006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 f8a2 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001040:	2001      	movs	r0, #1
 8001042:	f001 fcc9 	bl	80029d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <DMA2_Stream0_IRQHandler+0x10>)
 8001052:	f001 f887 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20004090 	.word	0x20004090

08001060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <SystemInit+0x20>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <SystemInit+0x20>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010bc <LoopFillZerobss+0x12>
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a0:	4c0b      	ldr	r4, [pc, #44]	; (80010d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ae:	f7ff ffd7 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b2:	f002 fbe1 	bl	8003878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fade 	bl	8000676 <main>
  bx  lr    
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80010c8:	08003900 	.word	0x08003900
  ldr r2, =_sbss
 80010cc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80010d0:	200041c0 	.word	0x200041c0

080010d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <HAL_Init+0x40>)
 80010e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_Init+0x40>)
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_Init+0x40>)
 80010fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 fe25 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	2000      	movs	r0, #0
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fe08 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023c00 	.word	0x40023c00

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fe3d 	bl	8001dba <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 fe05 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000018 	.word	0x20000018
 8001174:	20000020 	.word	0x20000020
 8001178:	2000001c 	.word	0x2000001c

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000020 	.word	0x20000020
 80011a0:	200041bc 	.word	0x200041bc

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	200041bc 	.word	0x200041bc

080011bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e033      	b.n	800123a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fdc8 	bl	8000d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d118      	bne.n	800122c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001202:	f023 0302 	bic.w	r3, r3, #2
 8001206:	f043 0202 	orr.w	r2, r3, #2
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 fa54 	bl	80016bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f023 0303 	bic.w	r3, r3, #3
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641a      	str	r2, [r3, #64]	; 0x40
 800122a:	e001      	b.n	8001230 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_ADC_Start_DMA+0x1e>
 800125e:	2302      	movs	r3, #2
 8001260:	e0e9      	b.n	8001436 <HAL_ADC_Start_DMA+0x1f2>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b01      	cmp	r3, #1
 8001276:	d018      	beq.n	80012aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0201 	orr.w	r2, r2, #1
 8001286:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001288:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <HAL_ADC_Start_DMA+0x1fc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a6d      	ldr	r2, [pc, #436]	; (8001444 <HAL_ADC_Start_DMA+0x200>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	0c9a      	lsrs	r2, r3, #18
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800129c:	e002      	b.n	80012a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f9      	bne.n	800129e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b8:	d107      	bne.n	80012ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	f040 80a1 	bne.w	800141c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012e2:	f023 0301 	bic.w	r3, r3, #1
 80012e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001304:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001318:	d106      	bne.n	8001328 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f023 0206 	bic.w	r2, r3, #6
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	645a      	str	r2, [r3, #68]	; 0x44
 8001326:	e002      	b.n	800132e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <HAL_ADC_Start_DMA+0x204>)
 8001338:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	4a43      	ldr	r2, [pc, #268]	; (800144c <HAL_ADC_Start_DMA+0x208>)
 8001340:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001346:	4a42      	ldr	r2, [pc, #264]	; (8001450 <HAL_ADC_Start_DMA+0x20c>)
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134e:	4a41      	ldr	r2, [pc, #260]	; (8001454 <HAL_ADC_Start_DMA+0x210>)
 8001350:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800135a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800136a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800137a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	334c      	adds	r3, #76	; 0x4c
 8001386:	4619      	mov	r1, r3
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f000 fe92 	bl	80020b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	2b00      	cmp	r3, #0
 800139a:	d12a      	bne.n	80013f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2d      	ldr	r2, [pc, #180]	; (8001458 <HAL_ADC_Start_DMA+0x214>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d015      	beq.n	80013d2 <HAL_ADC_Start_DMA+0x18e>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a2c      	ldr	r2, [pc, #176]	; (800145c <HAL_ADC_Start_DMA+0x218>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d105      	bne.n	80013bc <HAL_ADC_Start_DMA+0x178>
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <HAL_ADC_Start_DMA+0x204>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00a      	beq.n	80013d2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a27      	ldr	r2, [pc, #156]	; (8001460 <HAL_ADC_Start_DMA+0x21c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d136      	bne.n	8001434 <HAL_ADC_Start_DMA+0x1f0>
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_ADC_Start_DMA+0x204>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d130      	bne.n	8001434 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d129      	bne.n	8001434 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	e020      	b.n	8001434 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <HAL_ADC_Start_DMA+0x214>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d11b      	bne.n	8001434 <HAL_ADC_Start_DMA+0x1f0>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d114      	bne.n	8001434 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	e00b      	b.n	8001434 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f043 0210 	orr.w	r2, r3, #16
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	f043 0201 	orr.w	r2, r3, #1
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000018 	.word	0x20000018
 8001444:	431bde83 	.word	0x431bde83
 8001448:	40012300 	.word	0x40012300
 800144c:	080018b5 	.word	0x080018b5
 8001450:	0800196f 	.word	0x0800196f
 8001454:	0800198b 	.word	0x0800198b
 8001458:	40012000 	.word	0x40012000
 800145c:	40012100 	.word	0x40012100
 8001460:	40012200 	.word	0x40012200

08001464 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1c>
 8001490:	2302      	movs	r3, #2
 8001492:	e105      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x228>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b09      	cmp	r3, #9
 80014a2:	d925      	bls.n	80014f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68d9      	ldr	r1, [r3, #12]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	3b1e      	subs	r3, #30
 80014ba:	2207      	movs	r2, #7
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43da      	mvns	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	400a      	ands	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68d9      	ldr	r1, [r3, #12]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	4603      	mov	r3, r0
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4403      	add	r3, r0
 80014e2:	3b1e      	subs	r3, #30
 80014e4:	409a      	lsls	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	e022      	b.n	8001536 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6919      	ldr	r1, [r3, #16]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	2207      	movs	r2, #7
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	400a      	ands	r2, r1
 8001512:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6919      	ldr	r1, [r3, #16]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	4603      	mov	r3, r0
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4403      	add	r3, r0
 800152c:	409a      	lsls	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b06      	cmp	r3, #6
 800153c:	d824      	bhi.n	8001588 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	3b05      	subs	r3, #5
 8001550:	221f      	movs	r2, #31
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	400a      	ands	r2, r1
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	3b05      	subs	r3, #5
 800157a:	fa00 f203 	lsl.w	r2, r0, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
 8001586:	e04c      	b.n	8001622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d824      	bhi.n	80015da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b23      	subs	r3, #35	; 0x23
 80015a2:	221f      	movs	r2, #31
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43da      	mvns	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	400a      	ands	r2, r1
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	3b23      	subs	r3, #35	; 0x23
 80015cc:	fa00 f203 	lsl.w	r2, r0, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
 80015d8:	e023      	b.n	8001622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	3b41      	subs	r3, #65	; 0x41
 80015ec:	221f      	movs	r2, #31
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	400a      	ands	r2, r1
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	3b41      	subs	r3, #65	; 0x41
 8001616:	fa00 f203 	lsl.w	r2, r0, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_ADC_ConfigChannel+0x234>)
 8001624:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_ADC_ConfigChannel+0x238>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d109      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1cc>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b12      	cmp	r3, #18
 8001636:	d105      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_ADC_ConfigChannel+0x238>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d123      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x21e>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b10      	cmp	r3, #16
 8001654:	d003      	beq.n	800165e <HAL_ADC_ConfigChannel+0x1e6>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b11      	cmp	r3, #17
 800165c:	d11b      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d111      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_ADC_ConfigChannel+0x23c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <HAL_ADC_ConfigChannel+0x240>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9a      	lsrs	r2, r3, #18
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001688:	e002      	b.n	8001690 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3b01      	subs	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f9      	bne.n	800168a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40012300 	.word	0x40012300
 80016b0:	40012000 	.word	0x40012000
 80016b4:	20000018 	.word	0x20000018
 80016b8:	431bde83 	.word	0x431bde83

080016bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c4:	4b79      	ldr	r3, [pc, #484]	; (80018ac <ADC_Init+0x1f0>)
 80016c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	431a      	orrs	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	021a      	lsls	r2, r3, #8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6899      	ldr	r1, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <ADC_Init+0x1f4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d022      	beq.n	800179a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001762:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6899      	ldr	r1, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	e00f      	b.n	80017ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0202 	bic.w	r2, r2, #2
 80017c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6899      	ldr	r1, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7e1b      	ldrb	r3, [r3, #24]
 80017d4:	005a      	lsls	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01b      	beq.n	8001820 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001806:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	3b01      	subs	r3, #1
 8001814:	035a      	lsls	r2, r3, #13
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	e007      	b.n	8001830 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	3b01      	subs	r3, #1
 800184c:	051a      	lsls	r2, r3, #20
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001872:	025a      	lsls	r2, r3, #9
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800188a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6899      	ldr	r1, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	029a      	lsls	r2, r3, #10
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	609a      	str	r2, [r3, #8]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40012300 	.word	0x40012300
 80018b0:	0f000001 	.word	0x0f000001

080018b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d13c      	bne.n	8001948 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d12b      	bne.n	8001940 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d127      	bne.n	8001940 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001908:	2b00      	cmp	r3, #0
 800190a:	d119      	bne.n	8001940 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0220 	bic.w	r2, r2, #32
 800191a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f043 0201 	orr.w	r2, r3, #1
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7fe fe03 	bl	800054c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001946:	e00e      	b.n	8001966 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7ff fd85 	bl	8001464 <HAL_ADC_ErrorCallback>
}
 800195a:	e004      	b.n	8001966 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	4798      	blx	r3
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7fe fdc7 	bl	8000510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001996:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2240      	movs	r2, #64	; 0x40
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f043 0204 	orr.w	r2, r3, #4
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff fd5a 	bl	8001464 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0ed      	b.n	8001ba6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fa42 	bl	8000e60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ec:	f7ff fbda 	bl	80011a4 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019f2:	e012      	b.n	8001a1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019f4:	f7ff fbd6 	bl	80011a4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b0a      	cmp	r3, #10
 8001a00:	d90b      	bls.n	8001a1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2205      	movs	r2, #5
 8001a12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e0c5      	b.n	8001ba6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0e5      	beq.n	80019f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0202 	bic.w	r2, r2, #2
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a38:	f7ff fbb4 	bl	80011a4 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a3e:	e012      	b.n	8001a66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a40:	f7ff fbb0 	bl	80011a4 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b0a      	cmp	r3, #10
 8001a4c:	d90b      	bls.n	8001a66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e09f      	b.n	8001ba6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e5      	bne.n	8001a40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7e1b      	ldrb	r3, [r3, #24]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d108      	bne.n	8001a8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e007      	b.n	8001a9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7e5b      	ldrb	r3, [r3, #25]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d108      	bne.n	8001ab8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	e007      	b.n	8001ac8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ac6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7e9b      	ldrb	r3, [r3, #26]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d108      	bne.n	8001ae2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0220 	orr.w	r2, r2, #32
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e007      	b.n	8001af2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0220 	bic.w	r2, r2, #32
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7edb      	ldrb	r3, [r3, #27]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d108      	bne.n	8001b0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0210 	bic.w	r2, r2, #16
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e007      	b.n	8001b1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0210 	orr.w	r2, r2, #16
 8001b1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7f1b      	ldrb	r3, [r3, #28]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d108      	bne.n	8001b36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0208 	orr.w	r2, r2, #8
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e007      	b.n	8001b46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0208 	bic.w	r2, r2, #8
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7f5b      	ldrb	r3, [r3, #29]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d108      	bne.n	8001b60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0204 	orr.w	r2, r2, #4
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e007      	b.n	8001b70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0204 	bic.w	r2, r2, #4
 8001b6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	ea42 0103 	orr.w	r1, r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	1e5a      	subs	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f7ff ff8e 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff29 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff3e 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff8e 	bl	8001ca4 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5d 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff31 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa2 	bl	8001d0c <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e014      	b.n	8001e0e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	791b      	ldrb	r3, [r3, #4]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff f87b 	bl	8000ef0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	795b      	ldrb	r3, [r3, #5]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_DAC_Start+0x16>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e040      	b.n	8001eae <HAL_DAC_Start+0x98>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2201      	movs	r2, #1
 8001e46:	409a      	lsls	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10f      	bne.n	8001e76 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001e60:	2b3c      	cmp	r3, #60	; 0x3c
 8001e62:	d11d      	bne.n	8001ea0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	e014      	b.n	8001ea0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	213c      	movs	r1, #60	; 0x3c
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0202 	orr.w	r2, r2, #2
 8001e9e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b087      	sub	sp, #28
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	795b      	ldrb	r3, [r3, #5]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_DAC_ConfigChannel+0x18>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e03c      	b.n	8001f4c <HAL_DAC_ConfigChannel+0x92>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2202      	movs	r2, #2
 8001edc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	22c0      	movs	r2, #192	; 0xc0
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43da      	mvns	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff f91e 	bl	80011a4 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e099      	b.n	80020a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f94:	e00f      	b.n	8001fb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f96:	f7ff f905 	bl	80011a4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d908      	bls.n	8001fb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e078      	b.n	80020a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1e8      	bne.n	8001f96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <HAL_DMA_Init+0x158>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	4313      	orrs	r3, r2
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f023 0307 	bic.w	r3, r3, #7
 8002036:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	2b04      	cmp	r3, #4
 8002048:	d117      	bne.n	800207a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00e      	beq.n	800207a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fa6f 	bl	8002540 <DMA_CheckFifoParam>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2240      	movs	r2, #64	; 0x40
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002076:	2301      	movs	r3, #1
 8002078:	e016      	b.n	80020a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fa26 	bl	80024d4 <DMA_CalcBaseAndBitshift>
 8002088:	4603      	mov	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	223f      	movs	r2, #63	; 0x3f
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	f010803f 	.word	0xf010803f

080020b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_DMA_Start_IT+0x26>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e040      	b.n	800215c <HAL_DMA_Start_IT+0xa8>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d12f      	bne.n	800214e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f9b8 	bl	8002478 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	223f      	movs	r2, #63	; 0x3f
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0216 	orr.w	r2, r2, #22
 8002122:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0208 	orr.w	r2, r2, #8
 800213a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e005      	b.n	800215a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800215a:	7dfb      	ldrb	r3, [r7, #23]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002170:	4b8e      	ldr	r3, [pc, #568]	; (80023ac <HAL_DMA_IRQHandler+0x248>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a8e      	ldr	r2, [pc, #568]	; (80023b0 <HAL_DMA_IRQHandler+0x24c>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0a9b      	lsrs	r3, r3, #10
 800217c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	2208      	movs	r2, #8
 8002190:	409a      	lsls	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01a      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	2208      	movs	r2, #8
 80021be:	409a      	lsls	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	2201      	movs	r2, #1
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d012      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	2201      	movs	r2, #1
 80021f4:	409a      	lsls	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f043 0202 	orr.w	r2, r3, #2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	2204      	movs	r2, #4
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2204      	movs	r2, #4
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	f043 0204 	orr.w	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	2210      	movs	r2, #16
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d043      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d03c      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2210      	movs	r2, #16
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d018      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d108      	bne.n	8002294 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d024      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
 8002292:	e01f      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01b      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e016      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0208 	bic.w	r2, r2, #8
 80022c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2220      	movs	r2, #32
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 808f 	beq.w	8002404 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8087 	beq.w	8002404 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	2220      	movs	r2, #32
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b05      	cmp	r3, #5
 800230c:	d136      	bne.n	800237c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0216 	bic.w	r2, r2, #22
 800231c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800232c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <HAL_DMA_IRQHandler+0x1da>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0208 	bic.w	r2, r2, #8
 800234c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	223f      	movs	r2, #63	; 0x3f
 8002354:	409a      	lsls	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236e:	2b00      	cmp	r3, #0
 8002370:	d07e      	beq.n	8002470 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
        }
        return;
 800237a:	e079      	b.n	8002470 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01d      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10d      	bne.n	80023b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	2b00      	cmp	r3, #0
 800239e:	d031      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e02c      	b.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
 80023aa:	bf00      	nop
 80023ac:	20000018 	.word	0x20000018
 80023b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d023      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
 80023c4:	e01e      	b.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10f      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0210 	bic.w	r2, r2, #16
 80023e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	2b00      	cmp	r3, #0
 800240a:	d032      	beq.n	8002472 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d022      	beq.n	800245e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2205      	movs	r2, #5
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	3301      	adds	r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	d307      	bcc.n	800244c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f2      	bne.n	8002430 <HAL_DMA_IRQHandler+0x2cc>
 800244a:	e000      	b.n	800244e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800244c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
 800246e:	e000      	b.n	8002472 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002470:	bf00      	nop
    }
  }
}
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002494:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b40      	cmp	r3, #64	; 0x40
 80024a4:	d108      	bne.n	80024b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024b6:	e007      	b.n	80024c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	60da      	str	r2, [r3, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	3b10      	subs	r3, #16
 80024e4:	4a14      	ldr	r2, [pc, #80]	; (8002538 <DMA_CalcBaseAndBitshift+0x64>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <DMA_CalcBaseAndBitshift+0x68>)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d909      	bls.n	8002516 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	1d1a      	adds	r2, r3, #4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	659a      	str	r2, [r3, #88]	; 0x58
 8002514:	e007      	b.n	8002526 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	aaaaaaab 	.word	0xaaaaaaab
 800253c:	080038e8 	.word	0x080038e8

08002540 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11f      	bne.n	800259a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d856      	bhi.n	800260e <DMA_CheckFifoParam+0xce>
 8002560:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <DMA_CheckFifoParam+0x28>)
 8002562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002566:	bf00      	nop
 8002568:	08002579 	.word	0x08002579
 800256c:	0800258b 	.word	0x0800258b
 8002570:	08002579 	.word	0x08002579
 8002574:	0800260f 	.word	0x0800260f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d046      	beq.n	8002612 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002588:	e043      	b.n	8002612 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002592:	d140      	bne.n	8002616 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002598:	e03d      	b.n	8002616 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a2:	d121      	bne.n	80025e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d837      	bhi.n	800261a <DMA_CheckFifoParam+0xda>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <DMA_CheckFifoParam+0x70>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	080025c7 	.word	0x080025c7
 80025b8:	080025c1 	.word	0x080025c1
 80025bc:	080025d9 	.word	0x080025d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e030      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d025      	beq.n	800261e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d6:	e022      	b.n	800261e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025e0:	d11f      	bne.n	8002622 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025e6:	e01c      	b.n	8002622 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d903      	bls.n	80025f6 <DMA_CheckFifoParam+0xb6>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d003      	beq.n	80025fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025f4:	e018      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
      break;
 80025fa:	e015      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00e      	beq.n	8002626 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
      break;
 800260c:	e00b      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 800260e:	bf00      	nop
 8002610:	e00a      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;
 8002612:	bf00      	nop
 8002614:	e008      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;
 8002616:	bf00      	nop
 8002618:	e006      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;
 800261a:	bf00      	nop
 800261c:	e004      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
 8002620:	e002      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;   
 8002622:	bf00      	nop
 8002624:	e000      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
    }
  } 
  
  return status; 
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop

08002638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	e16b      	b.n	800292c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002654:	2201      	movs	r2, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	429a      	cmp	r2, r3
 800266e:	f040 815a 	bne.w	8002926 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d005      	beq.n	800268a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002686:	2b02      	cmp	r3, #2
 8002688:	d130      	bne.n	80026ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2203      	movs	r2, #3
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c0:	2201      	movs	r2, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 0201 	and.w	r2, r3, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d017      	beq.n	8002728 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d123      	bne.n	800277c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	08da      	lsrs	r2, r3, #3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3208      	adds	r2, #8
 800273c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	08da      	lsrs	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3208      	adds	r2, #8
 8002776:	69b9      	ldr	r1, [r7, #24]
 8002778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0203 	and.w	r2, r3, #3
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80b4 	beq.w	8002926 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b60      	ldr	r3, [pc, #384]	; (8002944 <HAL_GPIO_Init+0x30c>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a5f      	ldr	r2, [pc, #380]	; (8002944 <HAL_GPIO_Init+0x30c>)
 80027c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b5d      	ldr	r3, [pc, #372]	; (8002944 <HAL_GPIO_Init+0x30c>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027da:	4a5b      	ldr	r2, [pc, #364]	; (8002948 <HAL_GPIO_Init+0x310>)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	220f      	movs	r2, #15
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a52      	ldr	r2, [pc, #328]	; (800294c <HAL_GPIO_Init+0x314>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02b      	beq.n	800285e <HAL_GPIO_Init+0x226>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a51      	ldr	r2, [pc, #324]	; (8002950 <HAL_GPIO_Init+0x318>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d025      	beq.n	800285a <HAL_GPIO_Init+0x222>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a50      	ldr	r2, [pc, #320]	; (8002954 <HAL_GPIO_Init+0x31c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01f      	beq.n	8002856 <HAL_GPIO_Init+0x21e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4f      	ldr	r2, [pc, #316]	; (8002958 <HAL_GPIO_Init+0x320>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d019      	beq.n	8002852 <HAL_GPIO_Init+0x21a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4e      	ldr	r2, [pc, #312]	; (800295c <HAL_GPIO_Init+0x324>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0x216>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4d      	ldr	r2, [pc, #308]	; (8002960 <HAL_GPIO_Init+0x328>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00d      	beq.n	800284a <HAL_GPIO_Init+0x212>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4c      	ldr	r2, [pc, #304]	; (8002964 <HAL_GPIO_Init+0x32c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x20e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4b      	ldr	r2, [pc, #300]	; (8002968 <HAL_GPIO_Init+0x330>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_GPIO_Init+0x20a>
 800283e:	2307      	movs	r3, #7
 8002840:	e00e      	b.n	8002860 <HAL_GPIO_Init+0x228>
 8002842:	2308      	movs	r3, #8
 8002844:	e00c      	b.n	8002860 <HAL_GPIO_Init+0x228>
 8002846:	2306      	movs	r3, #6
 8002848:	e00a      	b.n	8002860 <HAL_GPIO_Init+0x228>
 800284a:	2305      	movs	r3, #5
 800284c:	e008      	b.n	8002860 <HAL_GPIO_Init+0x228>
 800284e:	2304      	movs	r3, #4
 8002850:	e006      	b.n	8002860 <HAL_GPIO_Init+0x228>
 8002852:	2303      	movs	r3, #3
 8002854:	e004      	b.n	8002860 <HAL_GPIO_Init+0x228>
 8002856:	2302      	movs	r3, #2
 8002858:	e002      	b.n	8002860 <HAL_GPIO_Init+0x228>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_GPIO_Init+0x228>
 800285e:	2300      	movs	r3, #0
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	f002 0203 	and.w	r2, r2, #3
 8002866:	0092      	lsls	r2, r2, #2
 8002868:	4093      	lsls	r3, r2
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002870:	4935      	ldr	r1, [pc, #212]	; (8002948 <HAL_GPIO_Init+0x310>)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	3302      	adds	r3, #2
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287e:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_GPIO_Init+0x334>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028a2:	4a32      	ldr	r2, [pc, #200]	; (800296c <HAL_GPIO_Init+0x334>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a8:	4b30      	ldr	r3, [pc, #192]	; (800296c <HAL_GPIO_Init+0x334>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028cc:	4a27      	ldr	r2, [pc, #156]	; (800296c <HAL_GPIO_Init+0x334>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028d2:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_GPIO_Init+0x334>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028f6:	4a1d      	ldr	r2, [pc, #116]	; (800296c <HAL_GPIO_Init+0x334>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_GPIO_Init+0x334>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002920:	4a12      	ldr	r2, [pc, #72]	; (800296c <HAL_GPIO_Init+0x334>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3301      	adds	r3, #1
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	2b0f      	cmp	r3, #15
 8002930:	f67f ae90 	bls.w	8002654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3724      	adds	r7, #36	; 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40013800 	.word	0x40013800
 800294c:	40020000 	.word	0x40020000
 8002950:	40020400 	.word	0x40020400
 8002954:	40020800 	.word	0x40020800
 8002958:	40020c00 	.word	0x40020c00
 800295c:	40021000 	.word	0x40021000
 8002960:	40021400 	.word	0x40021400
 8002964:	40021800 	.word	0x40021800
 8002968:	40021c00 	.word	0x40021c00
 800296c:	40013c00 	.word	0x40013c00

08002970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	807b      	strh	r3, [r7, #2]
 800297c:	4613      	mov	r3, r2
 800297e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002980:	787b      	ldrb	r3, [r7, #1]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800298c:	e003      	b.n	8002996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800298e:	887b      	ldrh	r3, [r7, #2]
 8002990:	041a      	lsls	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	619a      	str	r2, [r3, #24]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029b4:	887a      	ldrh	r2, [r7, #2]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4013      	ands	r3, r2
 80029ba:	041a      	lsls	r2, r3, #16
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	43d9      	mvns	r1, r3
 80029c0:	887b      	ldrh	r3, [r7, #2]
 80029c2:	400b      	ands	r3, r1
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	619a      	str	r2, [r3, #24]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ee:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd fd64 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40013c00 	.word	0x40013c00

08002a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e267      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d075      	beq.n	8002b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a26:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d00c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a32:	4b85      	ldr	r3, [pc, #532]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d112      	bne.n	8002a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3e:	4b82      	ldr	r3, [pc, #520]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4a:	d10b      	bne.n	8002a64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4c:	4b7e      	ldr	r3, [pc, #504]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d05b      	beq.n	8002b10 <HAL_RCC_OscConfig+0x108>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d157      	bne.n	8002b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e242      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x74>
 8002a6e:	4b76      	ldr	r3, [pc, #472]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a75      	ldr	r2, [pc, #468]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e01d      	b.n	8002ab8 <HAL_RCC_OscConfig+0xb0>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x98>
 8002a86:	4b70      	ldr	r3, [pc, #448]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6f      	ldr	r2, [pc, #444]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a6c      	ldr	r2, [pc, #432]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0xb0>
 8002aa0:	4b69      	ldr	r3, [pc, #420]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a68      	ldr	r2, [pc, #416]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a65      	ldr	r2, [pc, #404]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d013      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fb70 	bl	80011a4 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fb6c 	bl	80011a4 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e207      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0xc0>
 8002ae6:	e014      	b.n	8002b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fb5c 	bl	80011a4 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af0:	f7fe fb58 	bl	80011a4 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e1f3      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b02:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0xe8>
 8002b0e:	e000      	b.n	8002b12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d063      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d11c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b36:	4b44      	ldr	r3, [pc, #272]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d116      	bne.n	8002b70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_RCC_OscConfig+0x152>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e1c7      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4937      	ldr	r1, [pc, #220]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	e03a      	b.n	8002be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b78:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <HAL_RCC_OscConfig+0x244>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fb11 	bl	80011a4 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b86:	f7fe fb0d 	bl	80011a4 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e1a8      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba4:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4925      	ldr	r1, [pc, #148]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]
 8002bb8:	e015      	b.n	8002be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bba:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <HAL_RCC_OscConfig+0x244>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe faf0 	bl	80011a4 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc8:	f7fe faec 	bl	80011a4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e187      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d036      	beq.n	8002c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_RCC_OscConfig+0x248>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe fad0 	bl	80011a4 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c08:	f7fe facc 	bl	80011a4 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e167      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x200>
 8002c26:	e01b      	b.n	8002c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_RCC_OscConfig+0x248>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fab9 	bl	80011a4 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	e00e      	b.n	8002c54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c36:	f7fe fab5 	bl	80011a4 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d907      	bls.n	8002c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e150      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	42470000 	.word	0x42470000
 8002c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	4b88      	ldr	r3, [pc, #544]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ea      	bne.n	8002c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8097 	beq.w	8002d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c72:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	4b7d      	ldr	r3, [pc, #500]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a7c      	ldr	r2, [pc, #496]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b7a      	ldr	r3, [pc, #488]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	4b77      	ldr	r3, [pc, #476]	; (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d118      	bne.n	8002cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002caa:	4b74      	ldr	r3, [pc, #464]	; (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a73      	ldr	r2, [pc, #460]	; (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fa75 	bl	80011a4 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbe:	f7fe fa71 	bl	80011a4 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e10c      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	4b6a      	ldr	r3, [pc, #424]	; (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x2ea>
 8002ce4:	4b64      	ldr	r3, [pc, #400]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	4a63      	ldr	r2, [pc, #396]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf0:	e01c      	b.n	8002d2c <HAL_RCC_OscConfig+0x324>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x30c>
 8002cfa:	4b5f      	ldr	r3, [pc, #380]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	4a5e      	ldr	r2, [pc, #376]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	6713      	str	r3, [r2, #112]	; 0x70
 8002d06:	4b5c      	ldr	r3, [pc, #368]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a5b      	ldr	r2, [pc, #364]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
 8002d12:	e00b      	b.n	8002d2c <HAL_RCC_OscConfig+0x324>
 8002d14:	4b58      	ldr	r3, [pc, #352]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a57      	ldr	r2, [pc, #348]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	4b55      	ldr	r3, [pc, #340]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a54      	ldr	r2, [pc, #336]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d26:	f023 0304 	bic.w	r3, r3, #4
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d015      	beq.n	8002d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe fa36 	bl	80011a4 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3c:	f7fe fa32 	bl	80011a4 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e0cb      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d52:	4b49      	ldr	r3, [pc, #292]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0ee      	beq.n	8002d3c <HAL_RCC_OscConfig+0x334>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d60:	f7fe fa20 	bl	80011a4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe fa1c 	bl	80011a4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0b5      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7e:	4b3e      	ldr	r3, [pc, #248]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ee      	bne.n	8002d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d90:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	4a38      	ldr	r2, [pc, #224]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80a1 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da6:	4b34      	ldr	r3, [pc, #208]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d05c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d141      	bne.n	8002e3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_RCC_OscConfig+0x478>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe f9f0 	bl	80011a4 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe f9ec 	bl	80011a4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e087      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	019b      	lsls	r3, r3, #6
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	041b      	lsls	r3, r3, #16
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	491b      	ldr	r1, [pc, #108]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_RCC_OscConfig+0x478>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe f9c5 	bl	80011a4 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe f9c1 	bl	80011a4 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e05c      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x416>
 8002e3c:	e054      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_RCC_OscConfig+0x478>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe f9ae 	bl	80011a4 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe f9aa 	bl	80011a4 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e045      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x444>
 8002e6a:	e03d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e038      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_RCC_OscConfig+0x4ec>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d028      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d121      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d11a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800

08002ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0cc      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b68      	ldr	r3, [pc, #416]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d90c      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b65      	ldr	r3, [pc, #404]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f22:	4b63      	ldr	r3, [pc, #396]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0b8      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f4c:	4b59      	ldr	r3, [pc, #356]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a58      	ldr	r2, [pc, #352]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f64:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f70:	4b50      	ldr	r3, [pc, #320]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	494d      	ldr	r1, [pc, #308]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d044      	beq.n	8003018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d119      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e07f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e06f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e067      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd6:	4b37      	ldr	r3, [pc, #220]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f023 0203 	bic.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4934      	ldr	r1, [pc, #208]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe f8dc 	bl	80011a4 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fe f8d8 	bl	80011a4 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e04f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 020c 	and.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1eb      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d20c      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e032      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304c:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4916      	ldr	r1, [pc, #88]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	490e      	ldr	r1, [pc, #56]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800307e:	f000 f821 	bl	80030c4 <HAL_RCC_GetSysClockFreq>
 8003082:	4602      	mov	r2, r0
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	490a      	ldr	r1, [pc, #40]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	5ccb      	ldrb	r3, [r1, r3]
 8003092:	fa22 f303 	lsr.w	r3, r2, r3
 8003096:	4a09      	ldr	r2, [pc, #36]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe f83c 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023c00 	.word	0x40023c00
 80030b4:	40023800 	.word	0x40023800
 80030b8:	080038d8 	.word	0x080038d8
 80030bc:	20000018 	.word	0x20000018
 80030c0:	2000001c 	.word	0x2000001c

080030c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c8:	b094      	sub	sp, #80	; 0x50
 80030ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	647b      	str	r3, [r7, #68]	; 0x44
 80030d0:	2300      	movs	r3, #0
 80030d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d4:	2300      	movs	r3, #0
 80030d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030dc:	4b79      	ldr	r3, [pc, #484]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d00d      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x40>
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	f200 80e1 	bhi.w	80032b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x34>
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x3a>
 80030f6:	e0db      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4b73      	ldr	r3, [pc, #460]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030fc:	e0db      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030fe:	4b73      	ldr	r3, [pc, #460]	; (80032cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003100:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003102:	e0d8      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003104:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800310c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310e:	4b6d      	ldr	r3, [pc, #436]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d063      	beq.n	80031e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311a:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	2200      	movs	r2, #0
 8003122:	63bb      	str	r3, [r7, #56]	; 0x38
 8003124:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312c:	633b      	str	r3, [r7, #48]	; 0x30
 800312e:	2300      	movs	r3, #0
 8003130:	637b      	str	r3, [r7, #52]	; 0x34
 8003132:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003136:	4622      	mov	r2, r4
 8003138:	462b      	mov	r3, r5
 800313a:	f04f 0000 	mov.w	r0, #0
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	0159      	lsls	r1, r3, #5
 8003144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003148:	0150      	lsls	r0, r2, #5
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4621      	mov	r1, r4
 8003150:	1a51      	subs	r1, r2, r1
 8003152:	6139      	str	r1, [r7, #16]
 8003154:	4629      	mov	r1, r5
 8003156:	eb63 0301 	sbc.w	r3, r3, r1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003168:	4659      	mov	r1, fp
 800316a:	018b      	lsls	r3, r1, #6
 800316c:	4651      	mov	r1, sl
 800316e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003172:	4651      	mov	r1, sl
 8003174:	018a      	lsls	r2, r1, #6
 8003176:	4651      	mov	r1, sl
 8003178:	ebb2 0801 	subs.w	r8, r2, r1
 800317c:	4659      	mov	r1, fp
 800317e:	eb63 0901 	sbc.w	r9, r3, r1
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800318e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003196:	4690      	mov	r8, r2
 8003198:	4699      	mov	r9, r3
 800319a:	4623      	mov	r3, r4
 800319c:	eb18 0303 	adds.w	r3, r8, r3
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	462b      	mov	r3, r5
 80031a4:	eb49 0303 	adc.w	r3, r9, r3
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031b6:	4629      	mov	r1, r5
 80031b8:	024b      	lsls	r3, r1, #9
 80031ba:	4621      	mov	r1, r4
 80031bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031c0:	4621      	mov	r1, r4
 80031c2:	024a      	lsls	r2, r1, #9
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ca:	2200      	movs	r2, #0
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031d4:	f7fc fff8 	bl	80001c8 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4613      	mov	r3, r2
 80031de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031e0:	e058      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e2:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	099b      	lsrs	r3, r3, #6
 80031e8:	2200      	movs	r2, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	4611      	mov	r1, r2
 80031ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031f2:	623b      	str	r3, [r7, #32]
 80031f4:	2300      	movs	r3, #0
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
 80031f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031fc:	4642      	mov	r2, r8
 80031fe:	464b      	mov	r3, r9
 8003200:	f04f 0000 	mov.w	r0, #0
 8003204:	f04f 0100 	mov.w	r1, #0
 8003208:	0159      	lsls	r1, r3, #5
 800320a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800320e:	0150      	lsls	r0, r2, #5
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4641      	mov	r1, r8
 8003216:	ebb2 0a01 	subs.w	sl, r2, r1
 800321a:	4649      	mov	r1, r9
 800321c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800322c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003230:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003234:	ebb2 040a 	subs.w	r4, r2, sl
 8003238:	eb63 050b 	sbc.w	r5, r3, fp
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	00eb      	lsls	r3, r5, #3
 8003246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324a:	00e2      	lsls	r2, r4, #3
 800324c:	4614      	mov	r4, r2
 800324e:	461d      	mov	r5, r3
 8003250:	4643      	mov	r3, r8
 8003252:	18e3      	adds	r3, r4, r3
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	464b      	mov	r3, r9
 8003258:	eb45 0303 	adc.w	r3, r5, r3
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800326a:	4629      	mov	r1, r5
 800326c:	028b      	lsls	r3, r1, #10
 800326e:	4621      	mov	r1, r4
 8003270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003274:	4621      	mov	r1, r4
 8003276:	028a      	lsls	r2, r1, #10
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327e:	2200      	movs	r2, #0
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	61fa      	str	r2, [r7, #28]
 8003284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003288:	f7fc ff9e 	bl	80001c8 <__aeabi_uldivmod>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4613      	mov	r3, r2
 8003292:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	3301      	adds	r3, #1
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ae:	e002      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3750      	adds	r7, #80	; 0x50
 80032bc:	46bd      	mov	sp, r7
 80032be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	007a1200 	.word	0x007a1200

080032d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e041      	b.n	8003366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd fe3e 	bl	8000f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 f8f4 	bl	80034fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_TIM_ConfigClockSource+0x1c>
 8003386:	2302      	movs	r3, #2
 8003388:	e0b4      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x186>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c2:	d03e      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0xd4>
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c8:	f200 8087 	bhi.w	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	f000 8086 	beq.w	80034e0 <HAL_TIM_ConfigClockSource+0x172>
 80033d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d8:	d87f      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033da:	2b70      	cmp	r3, #112	; 0x70
 80033dc:	d01a      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0xa6>
 80033de:	2b70      	cmp	r3, #112	; 0x70
 80033e0:	d87b      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033e2:	2b60      	cmp	r3, #96	; 0x60
 80033e4:	d050      	beq.n	8003488 <HAL_TIM_ConfigClockSource+0x11a>
 80033e6:	2b60      	cmp	r3, #96	; 0x60
 80033e8:	d877      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033ea:	2b50      	cmp	r3, #80	; 0x50
 80033ec:	d03c      	beq.n	8003468 <HAL_TIM_ConfigClockSource+0xfa>
 80033ee:	2b50      	cmp	r3, #80	; 0x50
 80033f0:	d873      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d058      	beq.n	80034a8 <HAL_TIM_ConfigClockSource+0x13a>
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d86f      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 80033fa:	2b30      	cmp	r3, #48	; 0x30
 80033fc:	d064      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x15a>
 80033fe:	2b30      	cmp	r3, #48	; 0x30
 8003400:	d86b      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 8003402:	2b20      	cmp	r3, #32
 8003404:	d060      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x15a>
 8003406:	2b20      	cmp	r3, #32
 8003408:	d867      	bhi.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d05c      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x15a>
 800340e:	2b10      	cmp	r3, #16
 8003410:	d05a      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x15a>
 8003412:	e062      	b.n	80034da <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6899      	ldr	r1, [r3, #8]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f000 f984 	bl	8003730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003436:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	609a      	str	r2, [r3, #8]
      break;
 8003440:	e04f      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6899      	ldr	r1, [r3, #8]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f000 f96d 	bl	8003730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003464:	609a      	str	r2, [r3, #8]
      break;
 8003466:	e03c      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	461a      	mov	r2, r3
 8003476:	f000 f8e1 	bl	800363c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2150      	movs	r1, #80	; 0x50
 8003480:	4618      	mov	r0, r3
 8003482:	f000 f93a 	bl	80036fa <TIM_ITRx_SetConfig>
      break;
 8003486:	e02c      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	461a      	mov	r2, r3
 8003496:	f000 f900 	bl	800369a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2160      	movs	r1, #96	; 0x60
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f92a 	bl	80036fa <TIM_ITRx_SetConfig>
      break;
 80034a6:	e01c      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f000 f8c1 	bl	800363c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2140      	movs	r1, #64	; 0x40
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f91a 	bl	80036fa <TIM_ITRx_SetConfig>
      break;
 80034c6:	e00c      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	f000 f911 	bl	80036fa <TIM_ITRx_SetConfig>
      break;
 80034d8:	e003      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
      break;
 80034de:	e000      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a40      	ldr	r2, [pc, #256]	; (8003610 <TIM_Base_SetConfig+0x114>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d013      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351a:	d00f      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3d      	ldr	r2, [pc, #244]	; (8003614 <TIM_Base_SetConfig+0x118>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00b      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3c      	ldr	r2, [pc, #240]	; (8003618 <TIM_Base_SetConfig+0x11c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d007      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3b      	ldr	r2, [pc, #236]	; (800361c <TIM_Base_SetConfig+0x120>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3a      	ldr	r2, [pc, #232]	; (8003620 <TIM_Base_SetConfig+0x124>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d108      	bne.n	800354e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <TIM_Base_SetConfig+0x114>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d027      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2c      	ldr	r2, [pc, #176]	; (8003614 <TIM_Base_SetConfig+0x118>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d023      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2b      	ldr	r2, [pc, #172]	; (8003618 <TIM_Base_SetConfig+0x11c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2a      	ldr	r2, [pc, #168]	; (800361c <TIM_Base_SetConfig+0x120>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a29      	ldr	r2, [pc, #164]	; (8003620 <TIM_Base_SetConfig+0x124>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d017      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a28      	ldr	r2, [pc, #160]	; (8003624 <TIM_Base_SetConfig+0x128>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a27      	ldr	r2, [pc, #156]	; (8003628 <TIM_Base_SetConfig+0x12c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00f      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a26      	ldr	r2, [pc, #152]	; (800362c <TIM_Base_SetConfig+0x130>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a25      	ldr	r2, [pc, #148]	; (8003630 <TIM_Base_SetConfig+0x134>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a24      	ldr	r2, [pc, #144]	; (8003634 <TIM_Base_SetConfig+0x138>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d003      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a23      	ldr	r2, [pc, #140]	; (8003638 <TIM_Base_SetConfig+0x13c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d108      	bne.n	80035c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <TIM_Base_SetConfig+0x114>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_Base_SetConfig+0xf8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <TIM_Base_SetConfig+0x124>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d103      	bne.n	80035fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	615a      	str	r2, [r3, #20]
}
 8003602:	bf00      	nop
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40010400 	.word	0x40010400
 8003624:	40014000 	.word	0x40014000
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800
 8003630:	40001800 	.word	0x40001800
 8003634:	40001c00 	.word	0x40001c00
 8003638:	40002000 	.word	0x40002000

0800363c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f023 030a 	bic.w	r3, r3, #10
 8003678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800369a:	b480      	push	{r7}
 800369c:	b087      	sub	sp, #28
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f023 0210 	bic.w	r2, r3, #16
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	031b      	lsls	r3, r3, #12
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	f043 0307 	orr.w	r3, r3, #7
 800371c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	609a      	str	r2, [r3, #8]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800374a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	021a      	lsls	r2, r3, #8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	431a      	orrs	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4313      	orrs	r3, r2
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	609a      	str	r2, [r3, #8]
}
 8003764:	bf00      	nop
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003784:	2302      	movs	r3, #2
 8003786:	e05a      	b.n	800383e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a21      	ldr	r2, [pc, #132]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d022      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d01d      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d018      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1a      	ldr	r2, [pc, #104]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a18      	ldr	r2, [pc, #96]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d009      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a17      	ldr	r2, [pc, #92]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a15      	ldr	r2, [pc, #84]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10c      	bne.n	800382c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	4313      	orrs	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40010000 	.word	0x40010000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40010400 	.word	0x40010400
 8003860:	40014000 	.word	0x40014000
 8003864:	40001800 	.word	0x40001800

08003868 <memset>:
 8003868:	4402      	add	r2, r0
 800386a:	4603      	mov	r3, r0
 800386c:	4293      	cmp	r3, r2
 800386e:	d100      	bne.n	8003872 <memset+0xa>
 8003870:	4770      	bx	lr
 8003872:	f803 1b01 	strb.w	r1, [r3], #1
 8003876:	e7f9      	b.n	800386c <memset+0x4>

08003878 <__libc_init_array>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	4d0d      	ldr	r5, [pc, #52]	; (80038b0 <__libc_init_array+0x38>)
 800387c:	4c0d      	ldr	r4, [pc, #52]	; (80038b4 <__libc_init_array+0x3c>)
 800387e:	1b64      	subs	r4, r4, r5
 8003880:	10a4      	asrs	r4, r4, #2
 8003882:	2600      	movs	r6, #0
 8003884:	42a6      	cmp	r6, r4
 8003886:	d109      	bne.n	800389c <__libc_init_array+0x24>
 8003888:	4d0b      	ldr	r5, [pc, #44]	; (80038b8 <__libc_init_array+0x40>)
 800388a:	4c0c      	ldr	r4, [pc, #48]	; (80038bc <__libc_init_array+0x44>)
 800388c:	f000 f818 	bl	80038c0 <_init>
 8003890:	1b64      	subs	r4, r4, r5
 8003892:	10a4      	asrs	r4, r4, #2
 8003894:	2600      	movs	r6, #0
 8003896:	42a6      	cmp	r6, r4
 8003898:	d105      	bne.n	80038a6 <__libc_init_array+0x2e>
 800389a:	bd70      	pop	{r4, r5, r6, pc}
 800389c:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a0:	4798      	blx	r3
 80038a2:	3601      	adds	r6, #1
 80038a4:	e7ee      	b.n	8003884 <__libc_init_array+0xc>
 80038a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038aa:	4798      	blx	r3
 80038ac:	3601      	adds	r6, #1
 80038ae:	e7f2      	b.n	8003896 <__libc_init_array+0x1e>
 80038b0:	080038f8 	.word	0x080038f8
 80038b4:	080038f8 	.word	0x080038f8
 80038b8:	080038f8 	.word	0x080038f8
 80038bc:	080038fc 	.word	0x080038fc

080038c0 <_init>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	bf00      	nop
 80038c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c6:	bc08      	pop	{r3}
 80038c8:	469e      	mov	lr, r3
 80038ca:	4770      	bx	lr

080038cc <_fini>:
 80038cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ce:	bf00      	nop
 80038d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d2:	bc08      	pop	{r3}
 80038d4:	469e      	mov	lr, r3
 80038d6:	4770      	bx	lr
