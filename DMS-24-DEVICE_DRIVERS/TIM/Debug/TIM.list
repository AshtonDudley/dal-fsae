
TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00003b4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cec  08003cec  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cf4  08003cf4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003cfc  00020000  2**2
=======
  1 .text         00003b64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d04  08003d04  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d0c  08003d0c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d10  08003d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003d14  00020000  2**2
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000041a0  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004208  20004208  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 14 .debug_info   0000e252  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000263d  00000000  00000000  0002e32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000de8  00000000  00000000  00030970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aa5  00000000  00000000  00031758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023330  00000000  00000000  000321fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000112ac  00000000  00000000  0005552d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d919e  00000000  00000000  000667d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000039b8  00000000  00000000  0013f978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00143330  2**0
=======
 14 .debug_info   0000e0f1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000025bc  00000000  00000000  0002e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000de0  00000000  00000000  00030788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a9f  00000000  00000000  00031568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002331c  00000000  00000000  00032007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011292  00000000  00000000  00055323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9072  00000000  00000000  000665b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003990  00000000  00000000  0013f628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00142fb8  2**0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001a8:	08003cbc 	.word	0x08003cbc
=======
 80001a8:	08003cd4 	.word	0x08003cd4
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
<<<<<<< HEAD
 80001c4:	08003cbc 	.word	0x08003cbc
=======
 80001c4:	08003cd4 	.word	0x08003cd4
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_GPIO_EXTI_Callback>:

#include "DRIVER_IO.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) {
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d105      	bne.n	80004e0 <HAL_GPIO_EXTI_Callback+0x1c>
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_P);
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80004d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <HAL_GPIO_EXTI_Callback+0x28>)
<<<<<<< HEAD
 80004da:	f002 fc60 	bl	8002d9e <HAL_GPIO_TogglePin>
=======
 80004da:	f002 fc6c 	bl	8002db6 <HAL_GPIO_TogglePin>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
	} else {
		__NOP();
  }
}
 80004de:	e000      	b.n	80004e2 <HAL_GPIO_EXTI_Callback+0x1e>
		__NOP();
 80004e0:	bf00      	nop
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40020c00 	.word	0x40020c00

080004f0 <PDP_PedealAgreement>:
  * @brief  Pedal Agreement Check. Latches until throttle pedal is released
  * @retval 0 no fault
  * @retval 1 PAG_fault, both pedals currently active
  * @retval 2 PAG_fault, waiting for latch to reset
  */
PDP_StatusTypeDef PDP_PedealAgreement(uint32_t apps, uint32_t fbps){ 		// PAG_fault active
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	if (apps > APPS_PAG_THRESHOLD && fbps > FBPS_PAG_THRESHOLD){
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b6b      	cmp	r3, #107	; 0x6b
 80004fe:	d909      	bls.n	8000514 <PDP_PedealAgreement+0x24>
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	2b13      	cmp	r3, #19
 8000504:	d906      	bls.n	8000514 <PDP_PedealAgreement+0x24>
		PAG_fault = PDP_ERROR;
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <PDP_PedealAgreement+0x74>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
		return PAG_fault;
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <PDP_PedealAgreement+0x74>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	e020      	b.n	8000556 <PDP_PedealAgreement+0x66>
	}

	else if (PAG_fault != PDP_OKAY && apps < APPS_PAG_RESET_THRESHOLD){		// Check if latch can be reset
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <PDP_PedealAgreement+0x74>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	b2db      	uxtb	r3, r3
 800051a:	2b00      	cmp	r3, #0
 800051c:	d009      	beq.n	8000532 <PDP_PedealAgreement+0x42>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b12      	cmp	r3, #18
 8000522:	d806      	bhi.n	8000532 <PDP_PedealAgreement+0x42>
		PAG_fault = 0;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <PDP_PedealAgreement+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
		return PAG_fault;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <PDP_PedealAgreement+0x74>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	e011      	b.n	8000556 <PDP_PedealAgreement+0x66>
	}
	else if(PAG_fault != PDP_OKAY && apps > APPS_PAG_THRESHOLD){ 			// Waiting for latch to reset fault
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <PDP_PedealAgreement+0x74>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	2b00      	cmp	r3, #0
 800053a:	d009      	beq.n	8000550 <PDP_PedealAgreement+0x60>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b6b      	cmp	r3, #107	; 0x6b
 8000540:	d906      	bls.n	8000550 <PDP_PedealAgreement+0x60>
		PAG_fault = PDP_RESET_LATCH;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <PDP_PedealAgreement+0x74>)
 8000544:	2202      	movs	r2, #2
 8000546:	701a      	strb	r2, [r3, #0]
		return PAG_fault;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <PDP_PedealAgreement+0x74>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	e002      	b.n	8000556 <PDP_PedealAgreement+0x66>
	}
	else{
		return PAG_fault;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <PDP_PedealAgreement+0x74>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2db      	uxtb	r3, r3
	}
}
 8000556:	4618      	mov	r0, r3
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000084 	.word	0x20000084

08000568 <PDP_AppsAgreement>:
  * @brief  APPS Agreement Check. Checks if both APPS sensors are within
  * %error threshold of each other.
  * @retval 0 no fault
  * @retval 1 AAC_fault, difference between pedal sensors > %threshold
  */
PDP_StatusTypeDef PDP_AppsAgreement (uint32_t apps1, uint32_t apps2){
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	float absDif = abs((int)apps1 - (int)apps2);
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	bfb8      	it	lt
 800057c:	425b      	neglt	r3, r3
 800057e:	ee07 3a90 	vmov	s15, r3
 8000582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000586:	edc7 7a03 	vstr	s15, [r7, #12]
	float percentDifference = (absDif / ((apps1 + apps2) / 2)) * 100; 		// Calculating percent Difference
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	4413      	add	r3, r2
 8000590:	085b      	lsrs	r3, r3, #1
 8000592:	ee07 3a90 	vmov	s15, r3
 8000596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800059a:	edd7 6a03 	vldr	s13, [r7, #12]
 800059e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005a2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80005e8 <PDP_AppsAgreement+0x80>
 80005a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005aa:	edc7 7a02 	vstr	s15, [r7, #8]

	if (percentDifference >= APPS_AAC_ERROR_THRESHOLD){
 80005ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80005b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80005b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	db06      	blt.n	80005ce <PDP_AppsAgreement+0x66>
		AAC_fault = PDP_ERROR;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <PDP_AppsAgreement+0x84>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
		return AAC_fault;
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <PDP_AppsAgreement+0x84>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	e005      	b.n	80005da <PDP_AppsAgreement+0x72>
	}
	else
	{
		AAC_fault = PDP_OKAY;
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <PDP_AppsAgreement+0x84>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
		return AAC_fault;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <PDP_AppsAgreement+0x84>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b2db      	uxtb	r3, r3
	}

}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	42c80000 	.word	0x42c80000
 80005ec:	20000085 	.word	0x20000085

080005f0 <TIM_ConvertValueLinearApprox>:
/**
 * @brief Throttle Input Module
 * @return Throttle value scaled to desired map
 */
uint16_t TIM_ConvertValueLinearApprox(uint16_t inputValue, thottleMap_t *thottleMap)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b089      	sub	sp, #36	; 0x24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	80fb      	strh	r3, [r7, #6]

	float x0 = 0.0f, x1 = 0.0f, y0 = 0.0f, y1 = 0.0f;
 80005fc:	f04f 0300 	mov.w	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
 8000602:	f04f 0300 	mov.w	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	f04f 0300 	mov.w	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	f04f 0300 	mov.w	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]

	int i = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
	while (thottleMap->xarray[i] < inputValue && i < 11) { // TODO: Improve the safety of this function
 8000618:	e002      	b.n	8000620 <TIM_ConvertValueLinearApprox+0x30>
		i++;
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	3301      	adds	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
	while (thottleMap->xarray[i] < inputValue && i < 11) { // TODO: Improve the safety of this function
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	ed93 7a00 	vldr	s14, [r3]
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063e:	d502      	bpl.n	8000646 <TIM_ConvertValueLinearApprox+0x56>
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	2b0a      	cmp	r3, #10
 8000644:	dde9      	ble.n	800061a <TIM_ConvertValueLinearApprox+0x2a>
	}
	x0 = thottleMap->xarray[i - 1];
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3b01      	subs	r3, #1
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	61bb      	str	r3, [r7, #24]
	x1 = thottleMap->xarray[i];
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	4413      	add	r3, r2
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	617b      	str	r3, [r7, #20]
	y0 = thottleMap->yarray[i - 1];
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	3b01      	subs	r3, #1
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	330a      	adds	r3, #10
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	3304      	adds	r3, #4
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	613b      	str	r3, [r7, #16]
	y1 = thottleMap->yarray[i];
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	330a      	adds	r3, #10
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	3304      	adds	r3, #4
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60fb      	str	r3, [r7, #12]

	uint16_t outputValue =  (y1 + (inputValue - x1) * ((y1 - y0) / (x1 - x0))); 	// Linear Approximation, On a scale of 1-100
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	ee07 3a90 	vmov	s15, r3
 8000688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800068c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000694:	edd7 6a03 	vldr	s13, [r7, #12]
 8000698:	edd7 7a04 	vldr	s15, [r7, #16]
 800069c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80006a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80006a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80006a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80006ac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80006b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80006b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006c0:	ee17 3a90 	vmov	r3, s15
 80006c4:	817b      	strh	r3, [r7, #10]
	//outputValue = outputValue / 30.3030f * 4096 / 3.3; 								// Convert Value from 1-100 scale to 1-4096
	return outputValue;
 80006c6:	897b      	ldrh	r3, [r7, #10]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3724      	adds	r7, #36	; 0x24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <TIM_Average>:
  *	Note, the signal is amplified to a 0-5V range using a hardware amp.
  * Motor Data sheet: https://wiki.neweagle.net/docs/Rinehart/PM100_User_Manual_3_2011.pdf
  * @todo Replace with a moving average algorithm, for large buffer sizes, an overflow may occur
  * @return averages first half the the input arrays
  */
uint16_t TIM_Average(uint16_t adc_buffer[], uint16_t depth){	// TODO FIX THIS ASAP ADC_CHANNEL_BUFFER_LEN / 2
 80006d4:	b480      	push	{r7}
 80006d6:	b087      	sub	sp, #28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	807b      	strh	r3, [r7, #2]
	uint32_t total = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < (depth / 2); i++) {  	// TODO Change buffer since to channel size
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	e00b      	b.n	8000702 <TIM_Average+0x2e>
		total += adc_buffer[i];									// TODO Change to moving average
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	4413      	add	r3, r2
 80006fa:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < (depth / 2); i++) {  	// TODO Change buffer since to channel size
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	3301      	adds	r3, #1
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	085b      	lsrs	r3, r3, #1
 8000706:	b29b      	uxth	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	4293      	cmp	r3, r2
 800070e:	dbec      	blt.n	80006ea <TIM_Average+0x16>
	}
	uint16_t avg = total / (depth / 2);
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	085b      	lsrs	r3, r3, #1
 8000714:	b29b      	uxth	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fbb3 f3f2 	udiv	r3, r3, r2
 800071e:	81fb      	strh	r3, [r7, #14]
	return avg;
 8000720:	89fb      	ldrh	r3, [r7, #14]
}
 8000722:	4618      	mov	r0, r3
 8000724:	371c      	adds	r7, #28
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <TIM_DeInterleave>:
  * @note we should look at improving this function so its scalable for more channels
  * and to improve efficiency. We may also want to pass a pointer to the struct, rather then
  * using global variables
  * @retval None
  */
uint16_t TIM_DeInterleave(uint16_t unsortedBuf[], uint16_t startPoint, uint16_t depth) {
 800072e:	b580      	push	{r7, lr}
 8000730:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	f843 0c0c 	str.w	r0, [r3, #-12]
 8000740:	4608      	mov	r0, r1
 8000742:	4611      	mov	r1, r2
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4602      	mov	r2, r0
 800074a:	f823 2c0e 	strh.w	r2, [r3, #-14]
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	460a      	mov	r2, r1
 8000754:	f823 2c10 	strh.w	r2, [r3, #-16]
	uint16_t DeInterleavedBuf[ADC_CHANNEL_BUFFER_LEN];

	for (int i = 0, j = 0; i < (depth + startPoint); i++, j += 2) {
 8000758:	2300      	movs	r3, #0
 800075a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800075e:	f102 020c 	add.w	r2, r2, #12
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	2300      	movs	r3, #0
 8000766:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800076a:	f102 0208 	add.w	r2, r2, #8
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	e032      	b.n	80007d8 <TIM_DeInterleave+0xaa>
		DeInterleavedBuf[i] = unsortedBuf[j + startPoint];
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	f833 2c0e 	ldrh.w	r2, [r3, #-14]
 800077a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800077e:	f103 0308 	add.w	r3, r3, #8
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4413      	add	r3, r2
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	f107 0210 	add.w	r2, r7, #16
 800078c:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 8000790:	4413      	add	r3, r2
 8000792:	881a      	ldrh	r2, [r3, #0]
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800079e:	f103 030c 	add.w	r3, r3, #12
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	440b      	add	r3, r1
 80007a8:	f823 2c08 	strh.w	r2, [r3, #-8]
	for (int i = 0, j = 0; i < (depth + startPoint); i++, j += 2) {
 80007ac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80007b0:	f103 030c 	add.w	r3, r3, #12
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3301      	adds	r3, #1
 80007b8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80007bc:	f102 020c 	add.w	r2, r2, #12
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80007c6:	f103 0308 	add.w	r3, r3, #8
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3302      	adds	r3, #2
 80007ce:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80007d2:	f102 0208 	add.w	r2, r2, #8
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 80007e8:	4413      	add	r3, r2
 80007ea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80007ee:	f102 020c 	add.w	r2, r2, #12
 80007f2:	6812      	ldr	r2, [r2, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dbbc      	blt.n	8000772 <TIM_DeInterleave+0x44>
	}
	return TIM_Average(DeInterleavedBuf, depth);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	3b08      	subs	r3, #8
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff63 	bl	80006d4 <TIM_Average>
 800080e:	4603      	mov	r3, r0
}
 8000810:	4618      	mov	r0, r3
 8000812:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <TIM_OutputDAC>:
  * @brief  Uses DAC to output a 0-3.3V signal to the motor controller.
  *	Note, the signal is amplified to a 0-5V range using a hardware amp.
  * Motor Data sheet: https://wiki.neweagle.net/docs/Rinehart/PM100_User_Manual_3_2011.pdf
  * @retval None
  */
void TIM_OutputDAC(uint16_t DAC_Output){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_Output);
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <TIM_OutputDAC+0x20>)
<<<<<<< HEAD
 800082e:	f001 fd1c 	bl	800226a <HAL_DAC_SetValue>
=======
 800082e:	f001 fd28 	bl	8002282 <HAL_DAC_SetValue>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20004160 	.word	0x20004160

08000840 <TIM_Init>:
/**
  * @brief  Must be used to initialize ADC with DMA
  * @param ADC_HandleTypeDef
  * @retval None
  */
void TIM_Init(ADC_HandleTypeDef *TIM_hadc1){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(TIM_hadc1, (uint32_t*)adc_buf, ADC_BUFFER_LEN);
 8000848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084c:	4903      	ldr	r1, [pc, #12]	; (800085c <TIM_Init+0x1c>)
 800084e:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 8000850:	f000 fed0 	bl	80015f4 <HAL_ADC_Start_DMA>
=======
 8000850:	f000 fedc 	bl	800160c <HAL_ADC_Start_DMA>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000088 	.word	0x20000088

08000860 <TIM_ProcessData>:
/**
  * @brief  This function is executed when half the TIM buffer is full
  * @retval None
  */

void TIM_ProcessData(){
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);	// DEBUG LED TOGGLE FOR TIME PROFILE
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086c:	4830      	ldr	r0, [pc, #192]	; (8000930 <TIM_ProcessData+0xd0>)
<<<<<<< HEAD
 800086e:	f002 fa7d 	bl	8002d6c <HAL_GPIO_WritePin>
=======
 800086e:	f002 fa89 	bl	8002d84 <HAL_GPIO_WritePin>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
	adcBufferChannel.adcAPPS1  =	TIM_DeInterleave(adc_buf, 0, 64); 	// The depth can be changed to control how many values we average
 8000872:	2240      	movs	r2, #64	; 0x40
 8000874:	2100      	movs	r1, #0
 8000876:	482f      	ldr	r0, [pc, #188]	; (8000934 <TIM_ProcessData+0xd4>)
 8000878:	f7ff ff59 	bl	800072e <TIM_DeInterleave>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <TIM_ProcessData+0xd8>)
 8000882:	801a      	strh	r2, [r3, #0]
	adcBufferChannel.adcBPS    =	TIM_DeInterleave(adc_buf, 1, 64);	// TODO Change to a smaller buffer (128) which samples slower
 8000884:	2240      	movs	r2, #64	; 0x40
 8000886:	2101      	movs	r1, #1
 8000888:	482a      	ldr	r0, [pc, #168]	; (8000934 <TIM_ProcessData+0xd4>)
 800088a:	f7ff ff50 	bl	800072e <TIM_DeInterleave>
 800088e:	4603      	mov	r3, r0
 8000890:	461a      	mov	r2, r3
 8000892:	4b29      	ldr	r3, [pc, #164]	; (8000938 <TIM_ProcessData+0xd8>)
 8000894:	805a      	strh	r2, [r3, #2]

	// Plausibility Checks
	PDP_StatusTypeDef PAG = PDP_PedealAgreement(adcBufferChannel.adcAPPS1, adcBufferChannel.adcBPS);
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <TIM_ProcessData+0xd8>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <TIM_ProcessData+0xd8>)
 800089e:	885b      	ldrh	r3, [r3, #2]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4610      	mov	r0, r2
 80008a4:	f7ff fe24 	bl	80004f0 <PDP_PedealAgreement>
 80008a8:	4603      	mov	r3, r0
 80008aa:	73fb      	strb	r3, [r7, #15]
	switch (PAG){
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d01c      	beq.n	80008ec <TIM_ProcessData+0x8c>
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	dc16      	bgt.n	80008e4 <TIM_ProcessData+0x84>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <TIM_ProcessData+0x60>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d00e      	beq.n	80008dc <TIM_ProcessData+0x7c>
 80008be:	e011      	b.n	80008e4 <TIM_ProcessData+0x84>
		case PDP_OKAY:
			uint32_t motorControllerOutputVoltage = TIM_ConvertValueLinearApprox(adcBufferChannel.adcAPPS1, &currentThottleMap);
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <TIM_ProcessData+0xd8>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	491d      	ldr	r1, [pc, #116]	; (800093c <TIM_ProcessData+0xdc>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fe92 	bl	80005f0 <TIM_ConvertValueLinearApprox>
 80008cc:	4603      	mov	r3, r0
 80008ce:	60bb      	str	r3, [r7, #8]
			TIM_OutputDAC(motorControllerOutputVoltage);
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ffa1 	bl	800081c <TIM_OutputDAC>
			break;
 80008da:	e008      	b.n	80008ee <TIM_ProcessData+0x8e>
		case PDP_ERROR:			// TODO add driver notifications and CAN logging for fault cases
			TIM_OutputDAC(CUT_MOTOR_SIGNAL);
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff ff9d 	bl	800081c <TIM_OutputDAC>
			break;
 80008e2:	e004      	b.n	80008ee <TIM_ProcessData+0x8e>
		case PDP_RESET_LATCH:	// TODO add driver notifications and CAN logging for fault cases
			break;
			TIM_OutputDAC(CUT_MOTOR_SIGNAL);
		default:
			TIM_OutputDAC(CUT_MOTOR_SIGNAL);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff99 	bl	800081c <TIM_OutputDAC>
			break;
 80008ea:	e000      	b.n	80008ee <TIM_ProcessData+0x8e>
			break;
 80008ec:	bf00      	nop
	}
	// TEST CODE FOR AAC

	PDP_StatusTypeDef AAG = PDP_AppsAgreement(adcBufferChannel.adcAPPS1, adcBufferChannel.adcBPS);
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <TIM_ProcessData+0xd8>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b10      	ldr	r3, [pc, #64]	; (8000938 <TIM_ProcessData+0xd8>)
 80008f6:	885b      	ldrh	r3, [r3, #2]
 80008f8:	4619      	mov	r1, r3
 80008fa:	4610      	mov	r0, r2
 80008fc:	f7ff fe34 	bl	8000568 <PDP_AppsAgreement>
 8000900:	4603      	mov	r3, r0
 8000902:	71fb      	strb	r3, [r7, #7]
	switch (AAG){
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <TIM_ProcessData+0xb0>
 800090a:	2b01      	cmp	r3, #1
 800090c:	d002      	beq.n	8000914 <TIM_ProcessData+0xb4>
			break;
		case PDP_ERROR:			// TODO add driver notifications and CAN logging for fault cases
			// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
			break;
		default:
			break;
 800090e:	e002      	b.n	8000916 <TIM_ProcessData+0xb6>
			break;
 8000910:	bf00      	nop
 8000912:	e000      	b.n	8000916 <TIM_ProcessData+0xb6>
			break;
 8000914:	bf00      	nop
	}

	// END TEST CODE FOR AAC

	dataReadyFlag = 0;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <TIM_ProcessData+0xe0>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);	// DEBUG LED TOGGLE FOR TIME PROFILE
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <TIM_ProcessData+0xd0>)
<<<<<<< HEAD
 8000924:	f002 fa22 	bl	8002d6c <HAL_GPIO_WritePin>
=======
 8000924:	f002 fa2e 	bl	8002d84 <HAL_GPIO_WritePin>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40020c00 	.word	0x40020c00
 8000934:	20000088 	.word	0x20000088
 8000938:	2000408c 	.word	0x2000408c
 800093c:	20000004 	.word	0x20000004
 8000940:	20000086 	.word	0x20000086

08000944 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	inBufPtr  = &adc_buf[0];
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000950:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_buf[0];
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000956:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]

	// Average the first half of the buffer


	// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);	// Flashing this LED lets us monitor the state
}															// of the buffer using the oscilloscope
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20004088 	.word	0x20004088
 8000970:	20000088 	.word	0x20000088
 8000974:	20000000 	.word	0x20000000
 8000978:	20002088 	.word	0x20002088
 800097c:	20000086 	.word	0x20000086

08000980 <HAL_ADC_ConvCpltCallback>:

/**
  * @brief  This function is executed when  TIM buffer is completely full
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	inBufPtr  = &adc_buf[ADC_BUFFER_LEN / 2];
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <HAL_ADC_ConvCpltCallback+0x28>)
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_ADC_ConvCpltCallback+0x2c>)
 800098c:	601a      	str	r2, [r3, #0]
	outBufPtr = &dac_buf[ADC_BUFFER_LEN / 2];
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_ADC_ConvCpltCallback+0x30>)
 8000990:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_ADC_ConvCpltCallback+0x34>)
 8000992:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_ADC_ConvCpltCallback+0x38>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
	// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20004088 	.word	0x20004088
 80009ac:	20001088 	.word	0x20001088
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20003088 	.word	0x20003088
 80009b8:	20000086 	.word	0x20000086

080009bc <AppConfig>:

extern DAC_HandleTypeDef hdac;
extern ADC_HandleTypeDef hadc1;


void AppConfig() {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4809      	ldr	r0, [pc, #36]	; (80009ec <AppConfig+0x30>)
 80009c8:	f002 f9dc 	bl	8002d84 <HAL_GPIO_WritePin>
	TIM_Init(&hadc1);
<<<<<<< HEAD
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <AppConfig+0x18>)
 80009c2:	f7ff ff3d 	bl	8000840 <TIM_Init>
	HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 80009c6:	2100      	movs	r1, #0
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <AppConfig+0x1c>)
 80009ca:	f001 fbfc 	bl	80021c6 <HAL_DAC_Start>
=======
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <AppConfig+0x34>)
 80009ce:	f7ff ff37 	bl	8000840 <TIM_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <AppConfig+0x30>)
 80009da:	f002 f9d3 	bl	8002d84 <HAL_GPIO_WritePin>

	HAL_DAC_Start(&hdac,DAC1_CHANNEL_1);
 80009de:	2100      	movs	r1, #0
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <AppConfig+0x38>)
 80009e2:	f001 fbfc 	bl	80021de <HAL_DAC_Start>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	20004090 	.word	0x20004090
 80009f4:	20004160 	.word	0x20004160

080009f8 <AppMain>:




void AppMain() {
<<<<<<< HEAD
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0

	uint32_t prevTime = 0, curTime = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]

	state_codes_t cur_state = ENTRY_STATE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	71fb      	strb	r3, [r7, #7]
	int (*state_fun)(void);
=======
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

	uint32_t prevTime =0, curTime = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

	while (1){
		//int voltage = TIM_ConvertValue(128);
		//TIM_OutputDAC(voltage);
		curTime = HAL_GetTick();
<<<<<<< HEAD
 80009ee:	f000 fdb1 	bl	8001554 <HAL_GetTick>
 80009f2:	60b8      	str	r0, [r7, #8]

		if (curTime - prevTime >= 500) {
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009fe:	d306      	bcc.n	8000a0e <AppMain+0x32>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <AppMain+0x40>)
 8000a06:	f002 f9ca 	bl	8002d9e <HAL_GPIO_TogglePin>
			prevTime = curTime;
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	60fb      	str	r3, [r7, #12]
		}
		extern uint8_t dataReadyFlag;
		if (dataReadyFlag == 1) {
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <AppMain+0x44>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d1eb      	bne.n	80009ee <AppMain+0x12>
			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
			TIM_ProcessData();
 8000a16:	f7ff ff23 	bl	8000860 <TIM_ProcessData>
	while (1) {
 8000a1a:	e7e8      	b.n	80009ee <AppMain+0x12>
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	20000086 	.word	0x20000086

08000a24 <main>:
=======
 8000a06:	f000 fdb1 	bl	800156c <HAL_GetTick>
 8000a0a:	6038      	str	r0, [r7, #0]

		if (curTime - prevTime >= 500) {
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a16:	d306      	bcc.n	8000a26 <AppMain+0x2e>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <AppMain+0x3c>)
 8000a1e:	f002 f9ca 	bl	8002db6 <HAL_GPIO_TogglePin>
			prevTime = curTime;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	607b      	str	r3, [r7, #4]
		}
		extern uint8_t dataReadyFlag;
		if (dataReadyFlag == 1) {
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <AppMain+0x40>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d1eb      	bne.n	8000a06 <AppMain+0xe>
			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
			TIM_ProcessData();
 8000a2e:	f7ff ff17 	bl	8000860 <TIM_ProcessData>
	while (1){
 8000a32:	e7e8      	b.n	8000a06 <AppMain+0xe>
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	20000086 	.word	0x20000086

08000a3c <main>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
=======
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000a28:	f000 fd2e 	bl	8001488 <HAL_Init>
=======
 8000a40:	f000 fd2e 	bl	80014a0 <HAL_Init>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000a2c:	f000 f814 	bl	8000a58 <SystemClock_Config>
=======
 8000a44:	f000 f814 	bl	8000a70 <SystemClock_Config>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000a30:	f000 f9e2 	bl	8000df8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a34:	f000 f9c0 	bl	8000db8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000a38:	f000 f938 	bl	8000cac <MX_TIM1_Init>
  MX_CAN1_Init();
 8000a3c:	f000 f8d6 	bl	8000bec <MX_CAN1_Init>
  MX_ADC1_Init();
 8000a40:	f000 f874 	bl	8000b2c <MX_ADC1_Init>
  MX_DAC_Init();
 8000a44:	f000 f908 	bl	8000c58 <MX_DAC_Init>
  MX_TIM6_Init();
 8000a48:	f000 f980 	bl	8000d4c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  AppConfig();
 8000a4c:	f7ff ffb6 	bl	80009bc <AppConfig>

  AppMain(); // Infinite Loop Begin
 8000a50:	f7ff ffc4 	bl	80009dc <AppMain>
=======
 8000a48:	f000 f9e2 	bl	8000e10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a4c:	f000 f9c0 	bl	8000dd0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000a50:	f000 f938 	bl	8000cc4 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000a54:	f000 f8d6 	bl	8000c04 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000a58:	f000 f874 	bl	8000b44 <MX_ADC1_Init>
  MX_DAC_Init();
 8000a5c:	f000 f908 	bl	8000c70 <MX_DAC_Init>
  MX_TIM6_Init();
 8000a60:	f000 f980 	bl	8000d64 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  AppConfig();
 8000a64:	f7ff ffaa 	bl	80009bc <AppConfig>

  AppMain(); // Infinite Loop Begin
 8000a68:	f7ff ffc6 	bl	80009f8 <AppMain>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)		// We don't use this, instead we use the loop inside AppMain()
<<<<<<< HEAD
 8000a54:	e7fe      	b.n	8000a54 <main+0x30>
	...

08000a58 <SystemClock_Config>:
=======
 8000a6c:	e7fe      	b.n	8000a6c <main+0x30>
	...

08000a70 <SystemClock_Config>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	; 0x50
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	2230      	movs	r2, #48	; 0x30
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f003 f8fc 	bl	8003c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
=======
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f8fc 	bl	8003c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <SystemClock_Config+0xcc>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a27      	ldr	r2, [pc, #156]	; (8000b24 <SystemClock_Config+0xcc>)
 8000a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <SystemClock_Config+0xcc>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <SystemClock_Config+0xd0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a21      	ldr	r2, [pc, #132]	; (8000b28 <SystemClock_Config+0xd0>)
 8000aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <SystemClock_Config+0xd0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
=======
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <SystemClock_Config+0xcc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a27      	ldr	r2, [pc, #156]	; (8000b3c <SystemClock_Config+0xcc>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <SystemClock_Config+0xcc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <SystemClock_Config+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <SystemClock_Config+0xd0>)
 8000aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abc:	2310      	movs	r3, #16
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000acc:	2340      	movs	r3, #64	; 0x40
 8000ace:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 f991 	bl	8002e04 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae8:	f000 faec 	bl	80010c4 <Error_Handler>
=======
 8000acc:	2302      	movs	r3, #2
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000ae4:	2340      	movs	r3, #64	; 0x40
 8000ae6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 f991 	bl	8002e1c <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b00:	f000 faec 	bl	80010dc <Error_Handler>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000aec:	230f      	movs	r3, #15
 8000aee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af0:	2302      	movs	r3, #2
 8000af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fbf2 	bl	80032f4 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b16:	f000 fad5 	bl	80010c4 <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	; 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <MX_ADC1_Init>:
=======
 8000b04:	230f      	movs	r3, #15
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2102      	movs	r1, #2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fbf2 	bl	800330c <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b2e:	f000 fad5 	bl	80010dc <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3750      	adds	r7, #80	; 0x50
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <MX_ADC1_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
=======
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 8000b32:	463b      	mov	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
=======
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b40:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <MX_ADC1_Init+0xb8>)
 8000b42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b44:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000b4a:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b6e:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <MX_ADC1_Init+0xbc>)
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b8c:	4814      	ldr	r0, [pc, #80]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000b8e:	f000 fced 	bl	800156c <HAL_ADC_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b98:	f000 fa94 	bl	80010c4 <Error_Handler>
=======
 8000b56:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000b58:	4a28      	ldr	r2, [pc, #160]	; (8000bfc <MX_ADC1_Init+0xb8>)
 8000b5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000b62:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b6a:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000b86:	4a1e      	ldr	r2, [pc, #120]	; (8000c00 <MX_ADC1_Init+0xbc>)
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000b92:	2202      	movs	r2, #2
 8000b94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba4:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000ba6:	f000 fced 	bl	8001584 <HAL_ADC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bb0:	f000 fa94 	bl	80010dc <Error_Handler>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
<<<<<<< HEAD
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000bae:	f000 fe3b 	bl	8001828 <HAL_ADC_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bb8:	f000 fa84 	bl	80010c4 <Error_Handler>
=======
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000bc6:	f000 fe3b 	bl	8001840 <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bd0:	f000 fa84 	bl	80010dc <Error_Handler>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
<<<<<<< HEAD
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_ADC1_Init+0xb4>)
 8000bca:	f000 fe2d 	bl	8001828 <HAL_ADC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000bd4:	f000 fa76 	bl	80010c4 <Error_Handler>
=======
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_ADC1_Init+0xb4>)
 8000be2:	f000 fe2d 	bl	8001840 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000bec:	f000 fa76 	bl	80010dc <Error_Handler>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20004090 	.word	0x20004090
 8000be4:	40012000 	.word	0x40012000
 8000be8:	0f000001 	.word	0x0f000001

08000bec <MX_CAN1_Init>:
=======
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20004090 	.word	0x20004090
 8000bfc:	40012000 	.word	0x40012000
 8000c00:	0f000001 	.word	0x0f000001

08000c04 <MX_CAN1_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
<<<<<<< HEAD
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
=======
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
<<<<<<< HEAD
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000bf2:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <MX_CAN1_Init+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000bf8:	2210      	movs	r2, #16
 8000bfa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000c0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c0e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_CAN1_Init+0x64>)
 8000c3c:	f001 f894 	bl	8001d68 <HAL_CAN_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c46:	f000 fa3d 	bl	80010c4 <Error_Handler>
=======
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <MX_CAN1_Init+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c10:	2210      	movs	r2, #16
 8000c12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_CAN1_Init+0x64>)
 8000c54:	f001 f894 	bl	8001d80 <HAL_CAN_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c5e:	f000 fa3d 	bl	80010dc <Error_Handler>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
<<<<<<< HEAD
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20004138 	.word	0x20004138
 8000c54:	40006400 	.word	0x40006400

08000c58 <MX_DAC_Init>:
=======
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20004138 	.word	0x20004138
 8000c6c:	40006400 	.word	0x40006400

08000c70 <MX_DAC_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
<<<<<<< HEAD
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
=======
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
=======
 8000c76:	463b      	mov	r3, r7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
<<<<<<< HEAD
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_DAC_Init+0x4c>)
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <MX_DAC_Init+0x50>)
 8000c6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_DAC_Init+0x4c>)
 8000c6e:	f001 fa88 	bl	8002182 <HAL_DAC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c78:	f000 fa24 	bl	80010c4 <Error_Handler>
=======
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_DAC_Init+0x4c>)
 8000c80:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <MX_DAC_Init+0x50>)
 8000c82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <MX_DAC_Init+0x4c>)
 8000c86:	f001 fa88 	bl	800219a <HAL_DAC_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c90:	f000 fa24 	bl	80010dc <Error_Handler>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
<<<<<<< HEAD
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_DAC_Init+0x4c>)
 8000c8c:	f001 fb12 	bl	80022b4 <HAL_DAC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c96:	f000 fa15 	bl	80010c4 <Error_Handler>
=======
 8000c94:	2300      	movs	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <MX_DAC_Init+0x4c>)
 8000ca4:	f001 fb12 	bl	80022cc <HAL_DAC_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000cae:	f000 fa15 	bl	80010dc <Error_Handler>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
<<<<<<< HEAD
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20004160 	.word	0x20004160
 8000ca8:	40007400 	.word	0x40007400

08000cac <MX_TIM1_Init>:
=======
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20004160 	.word	0x20004160
 8000cc0:	40007400 	.word	0x40007400

08000cc4 <MX_TIM1_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
=======
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
=======
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <MX_TIM1_Init+0x98>)
 8000cca:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <MX_TIM1_Init+0x9c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <MX_TIM1_Init+0x98>)
 8000cd0:	223f      	movs	r2, #63	; 0x3f
 8000cd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <MX_TIM1_Init+0x98>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <MX_TIM1_Init+0x98>)
 8000cdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ce0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_TIM1_Init+0x98>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_TIM1_Init+0x98>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_TIM1_Init+0x98>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cf4:	4813      	ldr	r0, [pc, #76]	; (8000d44 <MX_TIM1_Init+0x98>)
 8000cf6:	f002 fce9 	bl	80036cc <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d00:	f000 f9e0 	bl	80010c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <MX_TIM1_Init+0x98>)
 8000d12:	f002 fd2a 	bl	800376a <HAL_TIM_ConfigClockSource>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d1c:	f000 f9d2 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_TIM1_Init+0x98>)
 8000d2e:	f002 ff1d 	bl	8003b6c <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d38:	f000 f9c4 	bl	80010c4 <Error_Handler>
=======
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000ce2:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <MX_TIM1_Init+0x9c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000ce8:	223f      	movs	r2, #63	; 0x3f
 8000cea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000cf4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000cf8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d0c:	4813      	ldr	r0, [pc, #76]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000d0e:	f002 fce9 	bl	80036e4 <HAL_TIM_Base_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d18:	f000 f9e0 	bl	80010dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	4619      	mov	r1, r3
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000d2a:	f002 fd2a 	bl	8003782 <HAL_TIM_ConfigClockSource>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d34:	f000 f9d2 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000d46:	f002 ff1d 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d50:	f000 f9c4 	bl	80010dc <Error_Handler>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
<<<<<<< HEAD
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20004174 	.word	0x20004174
 8000d48:	40010000 	.word	0x40010000

08000d4c <MX_TIM6_Init>:
=======
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20004174 	.word	0x20004174
 8000d60:	40010000 	.word	0x40010000

08000d64 <MX_TIM6_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
<<<<<<< HEAD
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
=======
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
=======
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
<<<<<<< HEAD
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_TIM6_Init+0x64>)
 8000d5c:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <MX_TIM6_Init+0x68>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_TIM6_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_TIM6_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_TIM6_Init+0x64>)
 8000d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d72:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_TIM6_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_TIM6_Init+0x64>)
 8000d7c:	f002 fca6 	bl	80036cc <HAL_TIM_Base_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d86:	f000 f99d 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_TIM6_Init+0x64>)
 8000d98:	f002 fee8 	bl	8003b6c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000da2:	f000 f98f 	bl	80010c4 <Error_Handler>
=======
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_TIM6_Init+0x64>)
 8000d74:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <MX_TIM6_Init+0x68>)
 8000d76:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_TIM6_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_TIM6_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_TIM6_Init+0x64>)
 8000d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_TIM6_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_TIM6_Init+0x64>)
 8000d94:	f002 fca6 	bl	80036e4 <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d9e:	f000 f99d 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000daa:	463b      	mov	r3, r7
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MX_TIM6_Init+0x64>)
 8000db0:	f002 fee8 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000dba:	f000 f98f 	bl	80010dc <Error_Handler>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
<<<<<<< HEAD
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200041bc 	.word	0x200041bc
 8000db4:	40001000 	.word	0x40001000

08000db8 <MX_DMA_Init>:
=======
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200041bc 	.word	0x200041bc
 8000dcc:	40001000 	.word	0x40001000

08000dd0 <MX_DMA_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
<<<<<<< HEAD
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_DMA_Init+0x3c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <MX_DMA_Init+0x3c>)
 8000dc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_DMA_Init+0x3c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
=======
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_DMA_Init+0x3c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <MX_DMA_Init+0x3c>)
 8000de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_DMA_Init+0x3c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
<<<<<<< HEAD
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2038      	movs	r0, #56	; 0x38
 8000de0:	f001 f999 	bl	8002116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000de4:	2038      	movs	r0, #56	; 0x38
 8000de6:	f001 f9b2 	bl	800214e <HAL_NVIC_EnableIRQ>

}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800

08000df8 <MX_GPIO_Init>:
=======
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2038      	movs	r0, #56	; 0x38
 8000df8:	f001 f999 	bl	800212e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000dfc:	2038      	movs	r0, #56	; 0x38
 8000dfe:	f001 f9b2 	bl	8002166 <HAL_NVIC_EnableIRQ>

}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <MX_GPIO_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	; 0x30
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
=======
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	; 0x30
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
<<<<<<< HEAD
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	4ba6      	ldr	r3, [pc, #664]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4aa5      	ldr	r2, [pc, #660]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e18:	f043 0310 	orr.w	r3, r3, #16
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4ba3      	ldr	r3, [pc, #652]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	4b9f      	ldr	r3, [pc, #636]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a9e      	ldr	r2, [pc, #632]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b9c      	ldr	r3, [pc, #624]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b98      	ldr	r3, [pc, #608]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a97      	ldr	r2, [pc, #604]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b95      	ldr	r3, [pc, #596]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b91      	ldr	r3, [pc, #580]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a90      	ldr	r2, [pc, #576]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b8e      	ldr	r3, [pc, #568]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b8a      	ldr	r3, [pc, #552]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a89      	ldr	r2, [pc, #548]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b87      	ldr	r3, [pc, #540]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b83      	ldr	r3, [pc, #524]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a82      	ldr	r2, [pc, #520]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b80      	ldr	r3, [pc, #512]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f643 7188 	movw	r1, #16264	; 0x3f88
 8000ebc:	487c      	ldr	r0, [pc, #496]	; (80010b0 <MX_GPIO_Init+0x2b8>)
 8000ebe:	f001 ff55 	bl	8002d6c <HAL_GPIO_WritePin>
=======
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	4ba6      	ldr	r3, [pc, #664]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4aa5      	ldr	r2, [pc, #660]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e30:	f043 0310 	orr.w	r3, r3, #16
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4ba3      	ldr	r3, [pc, #652]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0310 	and.w	r3, r3, #16
 8000e3e:	61bb      	str	r3, [r7, #24]
 8000e40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	4b9f      	ldr	r3, [pc, #636]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a9e      	ldr	r2, [pc, #632]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b9c      	ldr	r3, [pc, #624]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b98      	ldr	r3, [pc, #608]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a97      	ldr	r2, [pc, #604]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b95      	ldr	r3, [pc, #596]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b91      	ldr	r3, [pc, #580]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a90      	ldr	r2, [pc, #576]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b8e      	ldr	r3, [pc, #568]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b8a      	ldr	r3, [pc, #552]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a89      	ldr	r2, [pc, #548]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b87      	ldr	r3, [pc, #540]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b83      	ldr	r3, [pc, #524]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a82      	ldr	r2, [pc, #520]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000ebc:	f043 0308 	orr.w	r3, r3, #8
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b80      	ldr	r3, [pc, #512]	; (80010c4 <MX_GPIO_Init+0x2b4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f643 7188 	movw	r1, #16264	; 0x3f88
 8000ed4:	487c      	ldr	r0, [pc, #496]	; (80010c8 <MX_GPIO_Init+0x2b8>)
 8000ed6:	f001 ff55 	bl	8002d84 <HAL_GPIO_WritePin>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
<<<<<<< HEAD
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	487b      	ldr	r0, [pc, #492]	; (80010b4 <MX_GPIO_Init+0x2bc>)
 8000ec8:	f001 ff50 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ed2:	4879      	ldr	r0, [pc, #484]	; (80010b8 <MX_GPIO_Init+0x2c0>)
 8000ed4:	f001 ff4a 	bl	8002d6c <HAL_GPIO_WritePin>
=======
 8000eda:	2201      	movs	r2, #1
 8000edc:	2101      	movs	r1, #1
 8000ede:	487b      	ldr	r0, [pc, #492]	; (80010cc <MX_GPIO_Init+0x2bc>)
 8000ee0:	f001 ff50 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000eea:	4879      	ldr	r0, [pc, #484]	; (80010d0 <MX_GPIO_Init+0x2c0>)
 8000eec:	f001 ff4a 	bl	8002d84 <HAL_GPIO_WritePin>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 PE8 PE9
                           PE10 PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
<<<<<<< HEAD
 8000ed8:	f643 7388 	movw	r3, #16264	; 0x3f88
 8000edc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	486f      	ldr	r0, [pc, #444]	; (80010b0 <MX_GPIO_Init+0x2b8>)
 8000ef2:	f001 fd9f 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
=======
 8000ef0:	f643 7388 	movw	r3, #16264	; 0x3f88
 8000ef4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
<<<<<<< HEAD
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4869      	ldr	r0, [pc, #420]	; (80010b4 <MX_GPIO_Init+0x2bc>)
 8000f0e:	f001 fd91 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f12:	2308      	movs	r3, #8
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	623b      	str	r3, [r7, #32]
=======
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	486f      	ldr	r0, [pc, #444]	; (80010c8 <MX_GPIO_Init+0x2b8>)
 8000f0a:	f001 fd9f 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
<<<<<<< HEAD
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f22:	2305      	movs	r3, #5
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4861      	ldr	r0, [pc, #388]	; (80010b4 <MX_GPIO_Init+0x2bc>)
 8000f2e:	f001 fd81 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f36:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	485d      	ldr	r0, [pc, #372]	; (80010bc <MX_GPIO_Init+0x2c4>)
 8000f48:	f001 fd74 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f4c:	23e0      	movs	r3, #224	; 0xe0
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f5c:	2305      	movs	r3, #5
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4855      	ldr	r0, [pc, #340]	; (80010bc <MX_GPIO_Init+0x2c4>)
 8000f68:	f001 fd64 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4850      	ldr	r0, [pc, #320]	; (80010c0 <MX_GPIO_Init+0x2c8>)
 8000f80:	f001 fd58 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4845      	ldr	r0, [pc, #276]	; (80010b0 <MX_GPIO_Init+0x2b8>)
 8000f9c:	f001 fd4a 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4840      	ldr	r0, [pc, #256]	; (80010c0 <MX_GPIO_Init+0x2c8>)
 8000fbe:	f001 fd39 	bl	8002a34 <HAL_GPIO_Init>
=======
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4869      	ldr	r0, [pc, #420]	; (80010cc <MX_GPIO_Init+0x2bc>)
 8000f26:	f001 fd91 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	4861      	ldr	r0, [pc, #388]	; (80010cc <MX_GPIO_Init+0x2bc>)
 8000f46:	f001 fd81 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f4e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	485d      	ldr	r0, [pc, #372]	; (80010d4 <MX_GPIO_Init+0x2c4>)
 8000f60:	f001 fd74 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f64:	23e0      	movs	r3, #224	; 0xe0
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f74:	2305      	movs	r3, #5
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4855      	ldr	r0, [pc, #340]	; (80010d4 <MX_GPIO_Init+0x2c4>)
 8000f80:	f001 fd64 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f84:	2304      	movs	r3, #4
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4850      	ldr	r0, [pc, #320]	; (80010d8 <MX_GPIO_Init+0x2c8>)
 8000f98:	f001 fd58 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4845      	ldr	r0, [pc, #276]	; (80010c8 <MX_GPIO_Init+0x2b8>)
 8000fb4:	f001 fd4a 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4840      	ldr	r0, [pc, #256]	; (80010d8 <MX_GPIO_Init+0x2c8>)
 8000fd6:	f001 fd39 	bl	8002a4c <HAL_GPIO_Init>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
<<<<<<< HEAD
 8000fc2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000fc6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4837      	ldr	r0, [pc, #220]	; (80010b8 <MX_GPIO_Init+0x2c0>)
 8000fdc:	f001 fd2a 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fe0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	482d      	ldr	r0, [pc, #180]	; (80010b4 <MX_GPIO_Init+0x2bc>)
 8000ffe:	f001 fd19 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4829      	ldr	r0, [pc, #164]	; (80010bc <MX_GPIO_Init+0x2c4>)
 8001018:	f001 fd0c 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800101c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800102e:	230a      	movs	r3, #10
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	4820      	ldr	r0, [pc, #128]	; (80010bc <MX_GPIO_Init+0x2c4>)
 800103a:	f001 fcfb 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800103e:	2320      	movs	r3, #32
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4819      	ldr	r0, [pc, #100]	; (80010b8 <MX_GPIO_Init+0x2c0>)
 8001052:	f001 fcef 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001056:	f44f 7310 	mov.w	r3, #576	; 0x240
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105c:	2312      	movs	r3, #18
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001060:	2301      	movs	r3, #1
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001068:	2304      	movs	r3, #4
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	4813      	ldr	r0, [pc, #76]	; (80010c0 <MX_GPIO_Init+0x2c8>)
 8001074:	f001 fcde 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001078:	2302      	movs	r3, #2
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800107c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4808      	ldr	r0, [pc, #32]	; (80010b0 <MX_GPIO_Init+0x2b8>)
 800108e:	f001 fcd1 	bl	8002a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2006      	movs	r0, #6
 8001098:	f001 f83d 	bl	8002116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800109c:	2006      	movs	r0, #6
 800109e:	f001 f856 	bl	800214e <HAL_NVIC_EnableIRQ>
=======
 8000fda:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000fde:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4837      	ldr	r0, [pc, #220]	; (80010d0 <MX_GPIO_Init+0x2c0>)
 8000ff4:	f001 fd2a 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ff8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800100a:	2306      	movs	r3, #6
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	482d      	ldr	r0, [pc, #180]	; (80010cc <MX_GPIO_Init+0x2bc>)
 8001016:	f001 fd19 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800101a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	4829      	ldr	r0, [pc, #164]	; (80010d4 <MX_GPIO_Init+0x2c4>)
 8001030:	f001 fd0c 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001034:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001046:	230a      	movs	r3, #10
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4820      	ldr	r0, [pc, #128]	; (80010d4 <MX_GPIO_Init+0x2c4>)
 8001052:	f001 fcfb 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001056:	2320      	movs	r3, #32
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	4819      	ldr	r0, [pc, #100]	; (80010d0 <MX_GPIO_Init+0x2c0>)
 800106a:	f001 fcef 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800106e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001074:	2312      	movs	r3, #18
 8001076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001078:	2301      	movs	r3, #1
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001080:	2304      	movs	r3, #4
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4813      	ldr	r0, [pc, #76]	; (80010d8 <MX_GPIO_Init+0x2c8>)
 800108c:	f001 fcde 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001090:	2302      	movs	r3, #2
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001094:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <MX_GPIO_Init+0x2b8>)
 80010a6:	f001 fcd1 	bl	8002a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	2006      	movs	r0, #6
 80010b0:	f001 f83d 	bl	800212e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010b4:	2006      	movs	r0, #6
 80010b6:	f001 f856 	bl	8002166 <HAL_NVIC_EnableIRQ>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 80010a2:	bf00      	nop
 80010a4:	3730      	adds	r7, #48	; 0x30
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40020800 	.word	0x40020800
 80010b8:	40020c00 	.word	0x40020c00
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400

080010c4 <Error_Handler>:
=======
 80010ba:	bf00      	nop
 80010bc:	3730      	adds	r7, #48	; 0x30
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020400 	.word	0x40020400

080010dc <Error_Handler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
=======
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
=======
 80010e0:	b672      	cpsid	i
}
 80010e2:	bf00      	nop
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>
	...

080010d0 <HAL_MspInit>:
=======
 80010e4:	e7fe      	b.n	80010e4 <Error_Handler+0x8>
	...

080010e8 <HAL_MspInit>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
=======
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_MspInit+0x4c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_MspInit+0x4c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800110e:	2007      	movs	r0, #7
 8001110:	f000 fff6 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>
=======
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_MspInit+0x4c>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_MspInit+0x4c>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001126:	2007      	movs	r0, #7
 8001128:	f000 fff6 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800

08001120 <HAL_ADC_MspInit>:
=======
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800

08001138 <HAL_ADC_MspInit>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a2f      	ldr	r2, [pc, #188]	; (80011fc <HAL_ADC_MspInit+0xdc>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d157      	bne.n	80011f2 <HAL_ADC_MspInit+0xd2>
=======
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a2f      	ldr	r2, [pc, #188]	; (8001214 <HAL_ADC_MspInit+0xdc>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d157      	bne.n	800120a <HAL_ADC_MspInit+0xd2>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a2d      	ldr	r2, [pc, #180]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 800114c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a26      	ldr	r2, [pc, #152]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
=======
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <HAL_ADC_MspInit+0xe0>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <HAL_ADC_MspInit+0xe0>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <HAL_ADC_MspInit+0xe0>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <HAL_ADC_MspInit+0xe0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a26      	ldr	r2, [pc, #152]	; (8001218 <HAL_ADC_MspInit+0xe0>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <HAL_ADC_MspInit+0xe0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
<<<<<<< HEAD
 800117a:	2306      	movs	r3, #6
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	481d      	ldr	r0, [pc, #116]	; (8001204 <HAL_ADC_MspInit+0xe4>)
 800118e:	f001 fc51 	bl	8002a34 <HAL_GPIO_Init>
=======
 8001192:	2306      	movs	r3, #6
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	481d      	ldr	r0, [pc, #116]	; (800121c <HAL_ADC_MspInit+0xe4>)
 80011a6:	f001 fc51 	bl	8002a4c <HAL_GPIO_Init>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
<<<<<<< HEAD
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_ADC_MspInit+0xec>)
 8001196:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011d8:	f001 f8bc 	bl	8002354 <HAL_DMA_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011e2:	f7ff ff6f 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6393      	str	r3, [r2, #56]	; 0x38
=======
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011ac:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011f0:	f001 f8bc 	bl	800236c <HAL_DMA_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011fa:	f7ff ff6f 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< HEAD
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40012000 	.word	0x40012000
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000
 8001208:	200040d8 	.word	0x200040d8
 800120c:	40026410 	.word	0x40026410

08001210 <HAL_CAN_MspInit>:
=======
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40012000 	.word	0x40012000
 8001218:	40023800 	.word	0x40023800
 800121c:	40020000 	.word	0x40020000
 8001220:	200040d8 	.word	0x200040d8
 8001224:	40026410 	.word	0x40026410

08001228 <HAL_CAN_MspInit>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
<<<<<<< HEAD
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_CAN_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12b      	bne.n	800128a <HAL_CAN_MspInit+0x7a>
=======
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a19      	ldr	r2, [pc, #100]	; (80012ac <HAL_CAN_MspInit+0x84>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12b      	bne.n	80012a2 <HAL_CAN_MspInit+0x7a>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
<<<<<<< HEAD
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_CAN_MspInit+0x88>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_CAN_MspInit+0x88>)
 800123c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_CAN_MspInit+0x88>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_CAN_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_CAN_MspInit+0x88>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_CAN_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
=======
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_CAN_MspInit+0x88>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_CAN_MspInit+0x88>)
 8001254:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_CAN_MspInit+0x88>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_CAN_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_CAN_MspInit+0x88>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_CAN_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
<<<<<<< HEAD
 800126a:	2303      	movs	r3, #3
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800127a:	2309      	movs	r3, #9
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_CAN_MspInit+0x8c>)
 8001286:	f001 fbd5 	bl	8002a34 <HAL_GPIO_Init>
=======
 8001282:	2303      	movs	r3, #3
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001292:	2309      	movs	r3, #9
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_CAN_MspInit+0x8c>)
 800129e:	f001 fbd5 	bl	8002a4c <HAL_GPIO_Init>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
<<<<<<< HEAD
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	; 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40006400 	.word	0x40006400
 8001298:	40023800 	.word	0x40023800
 800129c:	40020c00 	.word	0x40020c00

080012a0 <HAL_DAC_MspInit>:
=======
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40006400 	.word	0x40006400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020c00 	.word	0x40020c00

080012b8 <HAL_DAC_MspInit>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
<<<<<<< HEAD
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_DAC_MspInit+0x7c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d127      	bne.n	8001312 <HAL_DAC_MspInit+0x72>
=======
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_DAC_MspInit+0x7c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d127      	bne.n	800132a <HAL_DAC_MspInit+0x72>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
<<<<<<< HEAD
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_DAC_MspInit+0x80>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <HAL_DAC_MspInit+0x80>)
 80012cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <HAL_DAC_MspInit+0x80>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_DAC_MspInit+0x80>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_DAC_MspInit+0x80>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_DAC_MspInit+0x80>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
=======
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_DAC_MspInit+0x80>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <HAL_DAC_MspInit+0x80>)
 80012e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_DAC_MspInit+0x80>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_DAC_MspInit+0x80>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_DAC_MspInit+0x80>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_DAC_MspInit+0x80>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
<<<<<<< HEAD
 80012fa:	2310      	movs	r3, #16
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fe:	2303      	movs	r3, #3
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <HAL_DAC_MspInit+0x84>)
 800130e:	f001 fb91 	bl	8002a34 <HAL_GPIO_Init>
=======
 8001312:	2310      	movs	r3, #16
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_DAC_MspInit+0x84>)
 8001326:	f001 fb91 	bl	8002a4c <HAL_GPIO_Init>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40007400 	.word	0x40007400
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000

08001328 <HAL_TIM_Base_MspInit>:
=======
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40007400 	.word	0x40007400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <HAL_TIM_Base_MspInit>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a15      	ldr	r2, [pc, #84]	; (800138c <HAL_TIM_Base_MspInit+0x64>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10e      	bne.n	8001358 <HAL_TIM_Base_MspInit+0x30>
=======
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <HAL_TIM_Base_MspInit+0x64>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10e      	bne.n	8001370 <HAL_TIM_Base_MspInit+0x30>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_TIM_Base_MspInit+0x68>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <HAL_TIM_Base_MspInit+0x68>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_TIM_Base_MspInit+0x68>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
=======
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <HAL_TIM_Base_MspInit+0x68>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <HAL_TIM_Base_MspInit+0x68>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_TIM_Base_MspInit+0x68>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001356:	e012      	b.n	800137e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <HAL_TIM_Base_MspInit+0x6c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10d      	bne.n	800137e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_TIM_Base_MspInit+0x68>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_TIM_Base_MspInit+0x68>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_TIM_Base_MspInit+0x68>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40010000 	.word	0x40010000
 8001390:	40023800 	.word	0x40023800
 8001394:	40001000 	.word	0x40001000

08001398 <NMI_Handler>:
=======
 800136e:	e012      	b.n	8001396 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <HAL_TIM_Base_MspInit+0x6c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10d      	bne.n	8001396 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_TIM_Base_MspInit+0x68>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_TIM_Base_MspInit+0x68>)
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_TIM_Base_MspInit+0x68>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40010000 	.word	0x40010000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40001000 	.word	0x40001000

080013b0 <NMI_Handler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
=======
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:
=======
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
=======
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:
=======
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
=======
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:
=======
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
=======
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:
=======
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
=======
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <SVC_Handler>:
=======
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
=======
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <DebugMon_Handler>:
=======
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
=======
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <PendSV_Handler>:
=======
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
=======
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <SysTick_Handler>:
=======
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Handler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
=======
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80013e4:	f000 f8a2 	bl	800152c <HAL_IncTick>
=======
 80013fc:	f000 f8a2 	bl	8001544 <HAL_IncTick>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <EXTI0_IRQHandler>:
=======
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <EXTI0_IRQHandler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
<<<<<<< HEAD
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
=======
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
<<<<<<< HEAD
 80013f0:	2001      	movs	r0, #1
 80013f2:	f001 fcef 	bl	8002dd4 <HAL_GPIO_EXTI_IRQHandler>
=======
 8001408:	2001      	movs	r0, #1
 800140a:	f001 fcef 	bl	8002dec <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
<<<<<<< HEAD
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <DMA2_Stream0_IRQHandler>:
=======
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <DMA2_Stream0_IRQHandler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
=======
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <DMA2_Stream0_IRQHandler+0x10>)
 8001402:	f001 f8ad 	bl	8002560 <HAL_DMA_IRQHandler>
=======
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <DMA2_Stream0_IRQHandler+0x10>)
 800141a:	f001 f8ad 	bl	8002578 <HAL_DMA_IRQHandler>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200040d8 	.word	0x200040d8

08001410 <SystemInit>:
=======
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200040d8 	.word	0x200040d8

08001428 <SystemInit>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <SystemInit+0x20>)
 800142e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <SystemInit+0x20>)
 8001434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <Reset_Handler>:
=======
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <Reset_Handler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< HEAD
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800146c <LoopFillZerobss+0x12>
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800143a:	490e      	ldr	r1, [pc, #56]	; (8001474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001450:	4c0b      	ldr	r4, [pc, #44]	; (8001480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800145e:	f7ff ffd7 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001462:	f002 fc07 	bl	8003c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f7ff fadd 	bl	8000a24 <main>
  bx  lr    
 800146a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800146c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001478:	08003cfc 	.word	0x08003cfc
  ldr r2, =_sbss
 800147c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001480:	20004208 	.word	0x20004208

08001484 <ADC_IRQHandler>:
=======
 800144c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001484 <LoopFillZerobss+0x12>
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001452:	490e      	ldr	r1, [pc, #56]	; (800148c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001468:	4c0b      	ldr	r4, [pc, #44]	; (8001498 <LoopFillZerobss+0x26>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001476:	f7ff ffd7 	bl	8001428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147a:	f002 fc07 	bl	8003c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff fadd 	bl	8000a3c <main>
  bx  lr    
 8001482:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001490:	08003d14 	.word	0x08003d14
  ldr r2, =_sbss
 8001494:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001498:	20004208 	.word	0x20004208

0800149c <ADC_IRQHandler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <HAL_Init>:
=======
 800149c:	e7fe      	b.n	800149c <ADC_IRQHandler>
	...

080014a0 <HAL_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <HAL_Init+0x40>)
 8001492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001496:	6013      	str	r3, [r2, #0]
=======
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <HAL_Init+0x40>)
 80014aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ae:	6013      	str	r3, [r2, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_Init+0x40>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a2:	6013      	str	r3, [r2, #0]
=======
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_Init+0x40>)
 80014b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ba:	6013      	str	r3, [r2, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_Init+0x40>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ae:	6013      	str	r3, [r2, #0]
=======
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x40>)
 80014c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c6:	6013      	str	r3, [r2, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 fe25 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff fe08 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023c00 	.word	0x40023c00

080014cc <HAL_InitTick>:
=======
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 fe25 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 f808 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fe08 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <HAL_InitTick>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fe3d 	bl	800216a <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
=======
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fe3d 	bl	8002182 <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 fe05 	bl	8002116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
=======
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 fe05 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000005c 	.word	0x2000005c
 8001524:	20000064 	.word	0x20000064
 8001528:	20000060 	.word	0x20000060

0800152c <HAL_IncTick>:
=======
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000005c 	.word	0x2000005c
 800153c:	20000064 	.word	0x20000064
 8001540:	20000060 	.word	0x20000060

08001544 <HAL_IncTick>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000064 	.word	0x20000064
 8001550:	20004204 	.word	0x20004204

08001554 <HAL_GetTick>:
=======
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_IncTick+0x20>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x24>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_IncTick+0x24>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000064 	.word	0x20000064
 8001568:	20004204 	.word	0x20004204

0800156c <HAL_GetTick>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20004204 	.word	0x20004204

0800156c <HAL_ADC_Init>:
=======
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_GetTick+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20004204 	.word	0x20004204

08001584 <HAL_ADC_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e033      	b.n	80015ea <HAL_ADC_Init+0x7e>
=======
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e033      	b.n	8001602 <HAL_ADC_Init+0x7e>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <HAL_ADC_Init+0x32>
=======
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_ADC_Init+0x32>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fdc8 	bl	8001120 <HAL_ADC_MspInit>
=======
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fdc8 	bl	8001138 <HAL_ADC_MspInit>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d118      	bne.n	80015dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015b2:	f023 0302 	bic.w	r3, r3, #2
 80015b6:	f043 0202 	orr.w	r2, r3, #2
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d118      	bne.n	80015f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ca:	f023 0302 	bic.w	r3, r3, #2
 80015ce:	f043 0202 	orr.w	r2, r3, #2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fa54 	bl	8001a6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f023 0303 	bic.w	r3, r3, #3
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
 80015da:	e001      	b.n	80015e0 <HAL_ADC_Init+0x74>
=======
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fa54 	bl	8001a84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
 80015f2:	e001      	b.n	80015f8 <HAL_ADC_Init+0x74>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
=======
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_ADC_Start_DMA>:
=======
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_ADC_Start_DMA>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
<<<<<<< HEAD
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
=======
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_ADC_Start_DMA+0x1e>
 800160e:	2302      	movs	r3, #2
 8001610:	e0e9      	b.n	80017e6 <HAL_ADC_Start_DMA+0x1f2>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_ADC_Start_DMA+0x1e>
 8001626:	2302      	movs	r3, #2
 8001628:	e0e9      	b.n	80017fe <HAL_ADC_Start_DMA+0x1f2>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b01      	cmp	r3, #1
 8001626:	d018      	beq.n	800165a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	609a      	str	r2, [r3, #8]
=======
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b01      	cmp	r3, #1
 800163e:	d018      	beq.n	8001672 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	609a      	str	r2, [r3, #8]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8001638:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_ADC_Start_DMA+0x1fc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6d      	ldr	r2, [pc, #436]	; (80017f4 <HAL_ADC_Start_DMA+0x200>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0c9a      	lsrs	r2, r3, #18
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800164c:	e002      	b.n	8001654 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	3b01      	subs	r3, #1
 8001652:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f9      	bne.n	800164e <HAL_ADC_Start_DMA+0x5a>
=======
 8001650:	4b6d      	ldr	r3, [pc, #436]	; (8001808 <HAL_ADC_Start_DMA+0x1fc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6d      	ldr	r2, [pc, #436]	; (800180c <HAL_ADC_Start_DMA+0x200>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0c9a      	lsrs	r2, r3, #18
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001664:	e002      	b.n	800166c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	3b01      	subs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f9      	bne.n	8001666 <HAL_ADC_Start_DMA+0x5a>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
<<<<<<< HEAD
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001668:	d107      	bne.n	800167a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001678:	609a      	str	r2, [r3, #8]
=======
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001680:	d107      	bne.n	8001692 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001690:	609a      	str	r2, [r3, #8]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b01      	cmp	r3, #1
 8001686:	f040 80a1 	bne.w	80017cc <HAL_ADC_Start_DMA+0x1d8>
=======
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b01      	cmp	r3, #1
 800169e:	f040 80a1 	bne.w	80017e4 <HAL_ADC_Start_DMA+0x1d8>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d007      	beq.n	80016d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c8:	d106      	bne.n	80016d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f023 0206 	bic.w	r2, r3, #6
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44
 80016d6:	e002      	b.n	80016de <HAL_ADC_Start_DMA+0xea>
=======
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016e0:	d106      	bne.n	80016f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f023 0206 	bic.w	r2, r3, #6
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	645a      	str	r2, [r3, #68]	; 0x44
 80016ee:	e002      	b.n	80016f6 <HAL_ADC_Start_DMA+0xea>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
<<<<<<< HEAD
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 80016e6:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <HAL_ADC_Start_DMA+0x204>)
 80016e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ee:	4a43      	ldr	r2, [pc, #268]	; (80017fc <HAL_ADC_Start_DMA+0x208>)
 80016f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f6:	4a42      	ldr	r2, [pc, #264]	; (8001800 <HAL_ADC_Start_DMA+0x20c>)
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fe:	4a41      	ldr	r2, [pc, #260]	; (8001804 <HAL_ADC_Start_DMA+0x210>)
 8001700:	64da      	str	r2, [r3, #76]	; 0x4c
=======
 80016fe:	4b44      	ldr	r3, [pc, #272]	; (8001810 <HAL_ADC_Start_DMA+0x204>)
 8001700:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001706:	4a43      	ldr	r2, [pc, #268]	; (8001814 <HAL_ADC_Start_DMA+0x208>)
 8001708:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170e:	4a42      	ldr	r2, [pc, #264]	; (8001818 <HAL_ADC_Start_DMA+0x20c>)
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001716:	4a41      	ldr	r2, [pc, #260]	; (800181c <HAL_ADC_Start_DMA+0x210>)
 8001718:	64da      	str	r2, [r3, #76]	; 0x4c
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800170a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800171a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800172a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	334c      	adds	r3, #76	; 0x4c
 8001736:	4619      	mov	r1, r3
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f000 feb8 	bl	80024b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	2b00      	cmp	r3, #0
 800174a:	d12a      	bne.n	80017a2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a2d      	ldr	r2, [pc, #180]	; (8001808 <HAL_ADC_Start_DMA+0x214>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d015      	beq.n	8001782 <HAL_ADC_Start_DMA+0x18e>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a2c      	ldr	r2, [pc, #176]	; (800180c <HAL_ADC_Start_DMA+0x218>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d105      	bne.n	800176c <HAL_ADC_Start_DMA+0x178>
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <HAL_ADC_Start_DMA+0x204>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 031f 	and.w	r3, r3, #31
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00a      	beq.n	8001782 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a27      	ldr	r2, [pc, #156]	; (8001810 <HAL_ADC_Start_DMA+0x21c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d136      	bne.n	80017e4 <HAL_ADC_Start_DMA+0x1f0>
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_ADC_Start_DMA+0x204>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	d130      	bne.n	80017e4 <HAL_ADC_Start_DMA+0x1f0>
=======
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001722:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001732:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001742:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	334c      	adds	r3, #76	; 0x4c
 800174e:	4619      	mov	r1, r3
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f000 feb8 	bl	80024c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	2b00      	cmp	r3, #0
 8001762:	d12a      	bne.n	80017ba <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a2d      	ldr	r2, [pc, #180]	; (8001820 <HAL_ADC_Start_DMA+0x214>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d015      	beq.n	800179a <HAL_ADC_Start_DMA+0x18e>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a2c      	ldr	r2, [pc, #176]	; (8001824 <HAL_ADC_Start_DMA+0x218>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d105      	bne.n	8001784 <HAL_ADC_Start_DMA+0x178>
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_ADC_Start_DMA+0x204>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00a      	beq.n	800179a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a27      	ldr	r2, [pc, #156]	; (8001828 <HAL_ADC_Start_DMA+0x21c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d136      	bne.n	80017fc <HAL_ADC_Start_DMA+0x1f0>
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_ADC_Start_DMA+0x204>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d130      	bne.n	80017fc <HAL_ADC_Start_DMA+0x1f0>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
<<<<<<< HEAD
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d129      	bne.n	80017e4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	e020      	b.n	80017e4 <HAL_ADC_Start_DMA+0x1f0>
=======
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d129      	bne.n	80017fc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	e020      	b.n	80017fc <HAL_ADC_Start_DMA+0x1f0>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a18      	ldr	r2, [pc, #96]	; (8001808 <HAL_ADC_Start_DMA+0x214>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d11b      	bne.n	80017e4 <HAL_ADC_Start_DMA+0x1f0>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d114      	bne.n	80017e4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	e00b      	b.n	80017e4 <HAL_ADC_Start_DMA+0x1f0>
=======
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <HAL_ADC_Start_DMA+0x214>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d11b      	bne.n	80017fc <HAL_ADC_Start_DMA+0x1f0>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d114      	bne.n	80017fc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	e00b      	b.n	80017fc <HAL_ADC_Start_DMA+0x1f0>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f043 0210 	orr.w	r2, r3, #16
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f043 0210 	orr.w	r2, r3, #16
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	f043 0201 	orr.w	r2, r3, #1
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  
  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000005c 	.word	0x2000005c
 80017f4:	431bde83 	.word	0x431bde83
 80017f8:	40012300 	.word	0x40012300
 80017fc:	08001c65 	.word	0x08001c65
 8001800:	08001d1f 	.word	0x08001d1f
 8001804:	08001d3b 	.word	0x08001d3b
 8001808:	40012000 	.word	0x40012000
 800180c:	40012100 	.word	0x40012100
 8001810:	40012200 	.word	0x40012200

08001814 <HAL_ADC_ErrorCallback>:
=======
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000005c 	.word	0x2000005c
 800180c:	431bde83 	.word	0x431bde83
 8001810:	40012300 	.word	0x40012300
 8001814:	08001c7d 	.word	0x08001c7d
 8001818:	08001d37 	.word	0x08001d37
 800181c:	08001d53 	.word	0x08001d53
 8001820:	40012000 	.word	0x40012000
 8001824:	40012100 	.word	0x40012100
 8001828:	40012200 	.word	0x40012200

0800182c <HAL_ADC_ErrorCallback>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
=======
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_ADC_ConfigChannel>:
=======
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_ADC_ConfigChannel>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
=======
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1c>
 8001840:	2302      	movs	r3, #2
 8001842:	e105      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x228>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b09      	cmp	r3, #9
 8001852:	d925      	bls.n	80018a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68d9      	ldr	r1, [r3, #12]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	3b1e      	subs	r3, #30
 800186a:	2207      	movs	r2, #7
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43da      	mvns	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	400a      	ands	r2, r1
 8001878:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68d9      	ldr	r1, [r3, #12]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	4603      	mov	r3, r0
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4403      	add	r3, r0
 8001892:	3b1e      	subs	r3, #30
 8001894:	409a      	lsls	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	e022      	b.n	80018e6 <HAL_ADC_ConfigChannel+0xbe>
=======
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_ADC_ConfigChannel+0x1c>
 8001858:	2302      	movs	r3, #2
 800185a:	e105      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x228>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b09      	cmp	r3, #9
 800186a:	d925      	bls.n	80018b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68d9      	ldr	r1, [r3, #12]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	3b1e      	subs	r3, #30
 8001882:	2207      	movs	r2, #7
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43da      	mvns	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	400a      	ands	r2, r1
 8001890:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68d9      	ldr	r1, [r3, #12]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	4603      	mov	r3, r0
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4403      	add	r3, r0
 80018aa:	3b1e      	subs	r3, #30
 80018ac:	409a      	lsls	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	e022      	b.n	80018fe <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6919      	ldr	r1, [r3, #16]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	2207      	movs	r2, #7
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	400a      	ands	r2, r1
 80018c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6919      	ldr	r1, [r3, #16]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4403      	add	r3, r0
 80018dc:	409a      	lsls	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	611a      	str	r2, [r3, #16]
=======
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6919      	ldr	r1, [r3, #16]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	2207      	movs	r2, #7
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	400a      	ands	r2, r1
 80018da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6919      	ldr	r1, [r3, #16]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	4603      	mov	r3, r0
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4403      	add	r3, r0
 80018f4:	409a      	lsls	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	611a      	str	r2, [r3, #16]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d824      	bhi.n	8001938 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	3b05      	subs	r3, #5
 8001900:	221f      	movs	r2, #31
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	400a      	ands	r2, r1
 800190e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b05      	subs	r3, #5
 800192a:	fa00 f203 	lsl.w	r2, r0, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
 8001936:	e04c      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d824      	bhi.n	800198a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b23      	subs	r3, #35	; 0x23
 8001952:	221f      	movs	r2, #31
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43da      	mvns	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	400a      	ands	r2, r1
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4618      	mov	r0, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b23      	subs	r3, #35	; 0x23
 800197c:	fa00 f203 	lsl.w	r2, r0, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
 8001988:	e023      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x1aa>
=======
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b06      	cmp	r3, #6
 8001904:	d824      	bhi.n	8001950 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	3b05      	subs	r3, #5
 8001918:	221f      	movs	r2, #31
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	400a      	ands	r2, r1
 8001926:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	4618      	mov	r0, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	3b05      	subs	r3, #5
 8001942:	fa00 f203 	lsl.w	r2, r0, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	635a      	str	r2, [r3, #52]	; 0x34
 800194e:	e04c      	b.n	80019ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b0c      	cmp	r3, #12
 8001956:	d824      	bhi.n	80019a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	3b23      	subs	r3, #35	; 0x23
 800196a:	221f      	movs	r2, #31
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43da      	mvns	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	400a      	ands	r2, r1
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4618      	mov	r0, r3
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	3b23      	subs	r3, #35	; 0x23
 8001994:	fa00 f203 	lsl.w	r2, r0, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
 80019a0:	e023      	b.n	80019ea <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3b41      	subs	r3, #65	; 0x41
 800199c:	221f      	movs	r2, #31
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	400a      	ands	r2, r1
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b41      	subs	r3, #65	; 0x41
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	3b41      	subs	r3, #65	; 0x41
 80019b4:	221f      	movs	r2, #31
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	400a      	ands	r2, r1
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	3b41      	subs	r3, #65	; 0x41
 80019de:	fa00 f203 	lsl.w	r2, r0, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_ADC_ConfigChannel+0x234>)
 80019d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a21      	ldr	r2, [pc, #132]	; (8001a60 <HAL_ADC_ConfigChannel+0x238>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d109      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x1cc>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b12      	cmp	r3, #18
 80019e6:	d105      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x1cc>
=======
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_ADC_ConfigChannel+0x234>)
 80019ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a21      	ldr	r2, [pc, #132]	; (8001a78 <HAL_ADC_ConfigChannel+0x238>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d109      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1cc>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b12      	cmp	r3, #18
 80019fe:	d105      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1cc>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
<<<<<<< HEAD
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
=======
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	605a      	str	r2, [r3, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <HAL_ADC_ConfigChannel+0x238>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d123      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x21e>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b10      	cmp	r3, #16
 8001a04:	d003      	beq.n	8001a0e <HAL_ADC_ConfigChannel+0x1e6>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b11      	cmp	r3, #17
 8001a0c:	d11b      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x21e>
=======
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <HAL_ADC_ConfigChannel+0x238>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d123      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x21e>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d003      	beq.n	8001a26 <HAL_ADC_ConfigChannel+0x1e6>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b11      	cmp	r3, #17
 8001a24:	d11b      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
<<<<<<< HEAD
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b10      	cmp	r3, #16
 8001a20:	d111      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x21e>
=======
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d111      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_ADC_ConfigChannel+0x23c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_ADC_ConfigChannel+0x240>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	0c9a      	lsrs	r2, r3, #18
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a38:	e002      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f9      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x212>
=======
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_ADC_ConfigChannel+0x23c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_ADC_ConfigChannel+0x240>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0c9a      	lsrs	r2, r3, #18
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a50:	e002      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f9      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x212>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40012300 	.word	0x40012300
 8001a60:	40012000 	.word	0x40012000
 8001a64:	2000005c 	.word	0x2000005c
 8001a68:	431bde83 	.word	0x431bde83

08001a6c <ADC_Init>:
=======
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40012300 	.word	0x40012300
 8001a78:	40012000 	.word	0x40012000
 8001a7c:	2000005c 	.word	0x2000005c
 8001a80:	431bde83 	.word	0x431bde83

08001a84 <ADC_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
=======
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8001a74:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <ADC_Init+0x1f0>)
 8001a76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	021a      	lsls	r2, r3, #8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6899      	ldr	r1, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	609a      	str	r2, [r3, #8]
=======
 8001a8c:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <ADC_Init+0x1f0>)
 8001a8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ab8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	021a      	lsls	r2, r3, #8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001adc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6859      	ldr	r1, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001afe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6899      	ldr	r1, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <ADC_Init+0x1f4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d022      	beq.n	8001b4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6899      	ldr	r1, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6899      	ldr	r1, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	e00f      	b.n	8001b6a <ADC_Init+0xfe>
=======
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	4a58      	ldr	r2, [pc, #352]	; (8001c78 <ADC_Init+0x1f4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d022      	beq.n	8001b62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6899      	ldr	r1, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6899      	ldr	r1, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	e00f      	b.n	8001b82 <ADC_Init+0xfe>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b68:	609a      	str	r2, [r3, #8]
=======
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b80:	609a      	str	r2, [r3, #8]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0202 	bic.w	r2, r2, #2
 8001b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6899      	ldr	r1, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7e1b      	ldrb	r3, [r3, #24]
 8001b84:	005a      	lsls	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01b      	beq.n	8001bd0 <ADC_Init+0x164>
=======
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0202 	bic.w	r2, r2, #2
 8001b90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6899      	ldr	r1, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7e1b      	ldrb	r3, [r3, #24]
 8001b9c:	005a      	lsls	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01b      	beq.n	8001be8 <ADC_Init+0x164>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ba6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6859      	ldr	r1, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	035a      	lsls	r2, r3, #13
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	e007      	b.n	8001be0 <ADC_Init+0x174>
=======
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6859      	ldr	r1, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	035a      	lsls	r2, r3, #13
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	e007      	b.n	8001bf8 <ADC_Init+0x174>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bde:	605a      	str	r2, [r3, #4]
=======
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf6:	605a      	str	r2, [r3, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	051a      	lsls	r2, r3, #20
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6899      	ldr	r1, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c22:	025a      	lsls	r2, r3, #9
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6899      	ldr	r1, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	029a      	lsls	r2, r3, #10
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	609a      	str	r2, [r3, #8]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40012300 	.word	0x40012300
 8001c60:	0f000001 	.word	0x0f000001

08001c64 <ADC_DMAConvCplt>:
=======
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	051a      	lsls	r2, r3, #20
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6899      	ldr	r1, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c3a:	025a      	lsls	r2, r3, #9
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6899      	ldr	r1, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	029a      	lsls	r2, r3, #10
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	609a      	str	r2, [r3, #8]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40012300 	.word	0x40012300
 8001c78:	0f000001 	.word	0x0f000001

08001c7c <ADC_DMAConvCplt>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d13c      	bne.n	8001cf8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d13c      	bne.n	8001d10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d12b      	bne.n	8001cf0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d127      	bne.n	8001cf0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d006      	beq.n	8001cbc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d119      	bne.n	8001cf0 <ADC_DMAConvCplt+0x8c>
=======
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d12b      	bne.n	8001d08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d127      	bne.n	8001d08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d119      	bne.n	8001d08 <ADC_DMAConvCplt+0x8c>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
<<<<<<< HEAD
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0220 	bic.w	r2, r2, #32
 8001cca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d105      	bne.n	8001cf0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0220 	bic.w	r2, r2, #32
 8001ce2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7fe fe45 	bl	8000980 <HAL_ADC_ConvCpltCallback>
=======
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7fe fe39 	bl	8000980 <HAL_ADC_ConvCpltCallback>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 8001cf6:	e00e      	b.n	8001d16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7ff fd85 	bl	8001814 <HAL_ADC_ErrorCallback>
}
 8001d0a:	e004      	b.n	8001d16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7fe fe09 	bl	8000944 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
=======
 8001d0e:	e00e      	b.n	8001d2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f7ff fd85 	bl	800182c <HAL_ADC_ErrorCallback>
}
 8001d22:	e004      	b.n	8001d2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	4798      	blx	r3
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001d3a <ADC_DMAError>:
=======
08001d36 <ADC_DMAHalfConvCplt>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
<<<<<<< HEAD
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	f043 0204 	orr.w	r2, r3, #4
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f7fe fdfd 	bl	8000944 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2240      	movs	r2, #64	; 0x40
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f043 0204 	orr.w	r2, r3, #4
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff fd5a 	bl	8001814 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_CAN_Init>:
=======
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f7ff fd5a 	bl	800182c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_CAN_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
=======
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< HEAD
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0ed      	b.n	8001f56 <HAL_CAN_Init+0x1ee>
=======
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0ed      	b.n	8001f6e <HAL_CAN_Init+0x1ee>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
<<<<<<< HEAD
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fa42 	bl	8001210 <HAL_CAN_MspInit>
=======
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fa42 	bl	8001228 <HAL_CAN_MspInit>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< HEAD
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d9c:	f7ff fbda 	bl	8001554 <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001da2:	e012      	b.n	8001dca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da4:	f7ff fbd6 	bl	8001554 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b0a      	cmp	r3, #10
 8001db0:	d90b      	bls.n	8001dca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0c5      	b.n	8001f56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0e5      	beq.n	8001da4 <HAL_CAN_Init+0x3c>
=======
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001db4:	f7ff fbda 	bl	800156c <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dba:	e012      	b.n	8001de2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dbc:	f7ff fbd6 	bl	800156c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b0a      	cmp	r3, #10
 8001dc8:	d90b      	bls.n	8001de2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2205      	movs	r2, #5
 8001dda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0c5      	b.n	8001f6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0e5      	beq.n	8001dbc <HAL_CAN_Init+0x3c>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0202 	bic.w	r2, r2, #2
 8001de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de8:	f7ff fbb4 	bl	8001554 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dee:	e012      	b.n	8001e16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001df0:	f7ff fbb0 	bl	8001554 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b0a      	cmp	r3, #10
 8001dfc:	d90b      	bls.n	8001e16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2205      	movs	r2, #5
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e09f      	b.n	8001f56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e5      	bne.n	8001df0 <HAL_CAN_Init+0x88>
=======
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0202 	bic.w	r2, r2, #2
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e00:	f7ff fbb4 	bl	800156c <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e06:	e012      	b.n	8001e2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e08:	f7ff fbb0 	bl	800156c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b0a      	cmp	r3, #10
 8001e14:	d90b      	bls.n	8001e2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2205      	movs	r2, #5
 8001e26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e09f      	b.n	8001f6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e5      	bne.n	8001e08 <HAL_CAN_Init+0x88>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< HEAD
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7e1b      	ldrb	r3, [r3, #24]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d108      	bne.n	8001e3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e007      	b.n	8001e4e <HAL_CAN_Init+0xe6>
=======
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7e1b      	ldrb	r3, [r3, #24]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d108      	bne.n	8001e56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e007      	b.n	8001e66 <HAL_CAN_Init+0xe6>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
<<<<<<< HEAD
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e4c:	601a      	str	r2, [r3, #0]
=======
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e64:	601a      	str	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
<<<<<<< HEAD
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7e5b      	ldrb	r3, [r3, #25]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d108      	bne.n	8001e68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e007      	b.n	8001e78 <HAL_CAN_Init+0x110>
=======
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7e5b      	ldrb	r3, [r3, #25]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d108      	bne.n	8001e80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e007      	b.n	8001e90 <HAL_CAN_Init+0x110>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
<<<<<<< HEAD
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e76:	601a      	str	r2, [r3, #0]
=======
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e8e:	601a      	str	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
<<<<<<< HEAD
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7e9b      	ldrb	r3, [r3, #26]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d108      	bne.n	8001e92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0220 	orr.w	r2, r2, #32
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e007      	b.n	8001ea2 <HAL_CAN_Init+0x13a>
=======
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7e9b      	ldrb	r3, [r3, #26]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d108      	bne.n	8001eaa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0220 	orr.w	r2, r2, #32
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e007      	b.n	8001eba <HAL_CAN_Init+0x13a>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
<<<<<<< HEAD
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0220 	bic.w	r2, r2, #32
 8001ea0:	601a      	str	r2, [r3, #0]
=======
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0220 	bic.w	r2, r2, #32
 8001eb8:	601a      	str	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
<<<<<<< HEAD
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7edb      	ldrb	r3, [r3, #27]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0210 	bic.w	r2, r2, #16
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e007      	b.n	8001ecc <HAL_CAN_Init+0x164>
=======
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7edb      	ldrb	r3, [r3, #27]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d108      	bne.n	8001ed4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0210 	bic.w	r2, r2, #16
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e007      	b.n	8001ee4 <HAL_CAN_Init+0x164>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
<<<<<<< HEAD
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0210 	orr.w	r2, r2, #16
 8001eca:	601a      	str	r2, [r3, #0]
=======
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0210 	orr.w	r2, r2, #16
 8001ee2:	601a      	str	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
<<<<<<< HEAD
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7f1b      	ldrb	r3, [r3, #28]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d108      	bne.n	8001ee6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0208 	orr.w	r2, r2, #8
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e007      	b.n	8001ef6 <HAL_CAN_Init+0x18e>
=======
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7f1b      	ldrb	r3, [r3, #28]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0208 	orr.w	r2, r2, #8
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e007      	b.n	8001f0e <HAL_CAN_Init+0x18e>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
<<<<<<< HEAD
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0208 	bic.w	r2, r2, #8
 8001ef4:	601a      	str	r2, [r3, #0]
=======
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0208 	bic.w	r2, r2, #8
 8001f0c:	601a      	str	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
<<<<<<< HEAD
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7f5b      	ldrb	r3, [r3, #29]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d108      	bne.n	8001f10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0204 	orr.w	r2, r2, #4
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e007      	b.n	8001f20 <HAL_CAN_Init+0x1b8>
=======
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7f5b      	ldrb	r3, [r3, #29]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0204 	orr.w	r2, r2, #4
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e007      	b.n	8001f38 <HAL_CAN_Init+0x1b8>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
<<<<<<< HEAD
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0204 	bic.w	r2, r2, #4
 8001f1e:	601a      	str	r2, [r3, #0]
=======
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0204 	bic.w	r2, r2, #4
 8001f36:	601a      	str	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
<<<<<<< HEAD
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	ea42 0103 	orr.w	r1, r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	1e5a      	subs	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	61da      	str	r2, [r3, #28]
=======
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	ea42 0103 	orr.w	r1, r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	61da      	str	r2, [r3, #28]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <__NVIC_SetPriorityGrouping>:
=======
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <__NVIC_SetPriorityGrouping>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
=======
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
=======
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4907      	ldr	r1, [pc, #28]	; (8001ffc <__NVIC_EnableIRQ+0x38>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_SetPriority>:
=======
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	; (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	; (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
=======
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
=======
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <SysTick_Config>:
=======
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <SysTick_Config>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020cc:	d301      	bcc.n	80020d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00f      	b.n	80020f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <SysTick_Config+0x40>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020da:	210f      	movs	r1, #15
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f7ff ff8e 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <SysTick_Config+0x40>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <SysTick_Config+0x40>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_NVIC_SetPriorityGrouping>:
=======
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f7ff ff8e 	bl	8002018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
=======
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff29 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_SetPriority>:
=======
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff29 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
=======
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002128:	f7ff ff3e 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 800212c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7ff ff8e 	bl	8002054 <NVIC_EncodePriority>
 8002138:	4602      	mov	r2, r0
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff5d 	bl	8002000 <__NVIC_SetPriority>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_EnableIRQ>:
=======
 8002140:	f7ff ff3e 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff8e 	bl	800206c <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5d 	bl	8002018 <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	71fb      	strb	r3, [r7, #7]
=======
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff31 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_SYSTICK_Config>:
=======
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff31 	bl	8001fdc <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffa2 	bl	80020bc <SysTick_Config>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_DAC_Init>:
=======
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffa2 	bl	80020d4 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_DAC_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
<<<<<<< HEAD
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e014      	b.n	80021be <HAL_DAC_Init+0x3c>
=======
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e014      	b.n	80021d6 <HAL_DAC_Init+0x3c>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
<<<<<<< HEAD
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	791b      	ldrb	r3, [r3, #4]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d105      	bne.n	80021aa <HAL_DAC_Init+0x28>
=======
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	791b      	ldrb	r3, [r3, #4]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <HAL_DAC_Init+0x28>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	715a      	strb	r2, [r3, #5]
=======
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	715a      	strb	r2, [r3, #5]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
<<<<<<< HEAD
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff f87b 	bl	80012a0 <HAL_DAC_MspInit>
=======
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff f87b 	bl	80012b8 <HAL_DAC_MspInit>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
<<<<<<< HEAD
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2202      	movs	r2, #2
 80021ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_DAC_Start>:
=======
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_DAC_Start>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
<<<<<<< HEAD
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
=======
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
<<<<<<< HEAD
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	795b      	ldrb	r3, [r3, #5]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_DAC_Start+0x16>
 80021d8:	2302      	movs	r3, #2
 80021da:	e040      	b.n	800225e <HAL_DAC_Start+0x98>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2202      	movs	r2, #2
 80021e6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2201      	movs	r2, #1
 80021f6:	409a      	lsls	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002210:	2b3c      	cmp	r3, #60	; 0x3c
 8002212:	d11d      	bne.n	8002250 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	e014      	b.n	8002250 <HAL_DAC_Start+0x8a>
=======
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	795b      	ldrb	r3, [r3, #5]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_DAC_Start+0x16>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e040      	b.n	8002276 <HAL_DAC_Start+0x98>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2201      	movs	r2, #1
 800220e:	409a      	lsls	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002228:	2b3c      	cmp	r3, #60	; 0x3c
 800222a:	d11d      	bne.n	8002268 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	e014      	b.n	8002268 <HAL_DAC_Start+0x8a>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
<<<<<<< HEAD
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	213c      	movs	r1, #60	; 0x3c
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	429a      	cmp	r2, r3
 800223e:	d107      	bne.n	8002250 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0202 	orr.w	r2, r2, #2
 800224e:	605a      	str	r2, [r3, #4]
=======
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	213c      	movs	r1, #60	; 0x3c
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	429a      	cmp	r2, r3
 8002256:	d107      	bne.n	8002268 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0202 	orr.w	r2, r2, #2
 8002266:	605a      	str	r2, [r3, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
<<<<<<< HEAD
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_DAC_SetValue>:
=======
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_DAC_SetValue>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
<<<<<<< HEAD
 800226a:	b480      	push	{r7}
 800226c:	b087      	sub	sp, #28
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
=======
 8002282:	b480      	push	{r7}
 8002284:	b087      	sub	sp, #28
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
<<<<<<< HEAD
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	3308      	adds	r3, #8
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e004      	b.n	800229e <HAL_DAC_SetValue+0x34>
=======
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	3308      	adds	r3, #8
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e004      	b.n	80022b6 <HAL_DAC_SetValue+0x34>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
<<<<<<< HEAD
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	3314      	adds	r3, #20
 800229c:	617b      	str	r3, [r7, #20]
=======
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	3314      	adds	r3, #20
 80022b4:	617b      	str	r3, [r7, #20]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
<<<<<<< HEAD
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	461a      	mov	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	371c      	adds	r7, #28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_DAC_ConfigChannel>:
=======
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	461a      	mov	r2, r3
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_DAC_ConfigChannel>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
<<<<<<< HEAD
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
=======
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
<<<<<<< HEAD
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	795b      	ldrb	r3, [r3, #5]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_DAC_ConfigChannel+0x18>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e03c      	b.n	8002346 <HAL_DAC_ConfigChannel+0x92>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2202      	movs	r2, #2
 80022d6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4013      	ands	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
=======
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	795b      	ldrb	r3, [r3, #5]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_DAC_ConfigChannel+0x18>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e03c      	b.n	800235e <HAL_DAC_ConfigChannel+0x92>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2202      	movs	r2, #2
 80022ee:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4013      	ands	r3, r2
 800230c:	617b      	str	r3, [r7, #20]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
<<<<<<< HEAD
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	22c0      	movs	r2, #192	; 0xc0
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	400a      	ands	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_DMA_Init>:
=======
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	22c0      	movs	r2, #192	; 0xc0
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	400a      	ands	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_DMA_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff f8f8 	bl	8001554 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]
=======
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff f8f8 	bl	800156c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e099      	b.n	80024a4 <HAL_DMA_Init+0x150>
=======
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e099      	b.n	80024bc <HAL_DMA_Init+0x150>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002390:	e00f      	b.n	80023b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002392:	f7ff f8df 	bl	8001554 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b05      	cmp	r3, #5
 800239e:	d908      	bls.n	80023b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2203      	movs	r2, #3
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e078      	b.n	80024a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e8      	bne.n	8002392 <HAL_DMA_Init+0x3e>
=======
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a8:	e00f      	b.n	80023ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023aa:	f7ff f8df 	bl	800156c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d908      	bls.n	80023ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2203      	movs	r2, #3
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e078      	b.n	80024bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e8      	bne.n	80023aa <HAL_DMA_Init+0x3e>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4b38      	ldr	r3, [pc, #224]	; (80024ac <HAL_DMA_Init+0x158>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
=======
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_DMA_Init+0x158>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	2b04      	cmp	r3, #4
 800240a:	d107      	bne.n	800241c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	4313      	orrs	r3, r2
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
=======
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2b04      	cmp	r3, #4
 8002422:	d107      	bne.n	8002434 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	4313      	orrs	r3, r2
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f023 0307 	bic.w	r3, r3, #7
 8002432:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	2b04      	cmp	r3, #4
 8002444:	d117      	bne.n	8002476 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
=======
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f023 0307 	bic.w	r3, r3, #7
 800244a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	2b04      	cmp	r3, #4
 800245c:	d117      	bne.n	800248e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00e      	beq.n	8002476 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fa6f 	bl	800293c <DMA_CheckFifoParam>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002472:	2301      	movs	r3, #1
 8002474:	e016      	b.n	80024a4 <HAL_DMA_Init+0x150>
=======
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fa6f 	bl	8002954 <DMA_CheckFifoParam>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2240      	movs	r2, #64	; 0x40
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800248a:	2301      	movs	r3, #1
 800248c:	e016      	b.n	80024bc <HAL_DMA_Init+0x150>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	615a      	str	r2, [r3, #20]
=======
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	615a      	str	r2, [r3, #20]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fa26 	bl	80028d0 <DMA_CalcBaseAndBitshift>
 8002484:	4603      	mov	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	223f      	movs	r2, #63	; 0x3f
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	f010803f 	.word	0xf010803f

080024b0 <HAL_DMA_Start_IT>:
=======
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fa26 	bl	80028e8 <DMA_CalcBaseAndBitshift>
 800249c:	4603      	mov	r3, r0
 800249e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	223f      	movs	r2, #63	; 0x3f
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	f010803f 	.word	0xf010803f

080024c8 <HAL_DMA_Start_IT>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	613b      	str	r3, [r7, #16]
=======
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	613b      	str	r3, [r7, #16]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_DMA_Start_IT+0x26>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e040      	b.n	8002558 <HAL_DMA_Start_IT+0xa8>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d12f      	bne.n	800254a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2202      	movs	r2, #2
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f9b8 	bl	8002874 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	223f      	movs	r2, #63	; 0x3f
 800250a:	409a      	lsls	r2, r3
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0216 	orr.w	r2, r2, #22
 800251e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0208 	orr.w	r2, r2, #8
 8002536:	601a      	str	r2, [r3, #0]
=======
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_DMA_Start_IT+0x26>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e040      	b.n	8002570 <HAL_DMA_Start_IT+0xa8>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d12f      	bne.n	8002562 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f9b8 	bl	800288c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	223f      	movs	r2, #63	; 0x3f
 8002522:	409a      	lsls	r2, r3
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0216 	orr.w	r2, r2, #22
 8002536:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0208 	orr.w	r2, r2, #8
 800254e:	601a      	str	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e005      	b.n	8002556 <HAL_DMA_Start_IT+0xa6>
=======
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e005      	b.n	800256e <HAL_DMA_Start_IT+0xa6>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< HEAD
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002552:	2302      	movs	r3, #2
 8002554:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002556:	7dfb      	ldrb	r3, [r7, #23]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_DMA_IRQHandler>:
=======
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800256a:	2302      	movs	r3, #2
 800256c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800256e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_IRQHandler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800256c:	4b8e      	ldr	r3, [pc, #568]	; (80027a8 <HAL_DMA_IRQHandler+0x248>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a8e      	ldr	r2, [pc, #568]	; (80027ac <HAL_DMA_IRQHandler+0x24c>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	0a9b      	lsrs	r3, r3, #10
 8002578:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	2208      	movs	r2, #8
 800258c:	409a      	lsls	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01a      	beq.n	80025cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0204 	bic.w	r2, r2, #4
 80025b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	2208      	movs	r2, #8
 80025ba:	409a      	lsls	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002584:	4b8e      	ldr	r3, [pc, #568]	; (80027c0 <HAL_DMA_IRQHandler+0x248>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a8e      	ldr	r2, [pc, #568]	; (80027c4 <HAL_DMA_IRQHandler+0x24c>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	0a9b      	lsrs	r3, r3, #10
 8002590:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	2208      	movs	r2, #8
 80025a4:	409a      	lsls	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01a      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0204 	bic.w	r2, r2, #4
 80025ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	2208      	movs	r2, #8
 80025d2:	409a      	lsls	r2, r3
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	2201      	movs	r2, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	2201      	movs	r2, #1
 80025f0:	409a      	lsls	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f043 0202 	orr.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	2201      	movs	r2, #1
 80025ea:	409a      	lsls	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2201      	movs	r2, #1
 8002608:	409a      	lsls	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	f043 0202 	orr.w	r2, r3, #2
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2204      	movs	r2, #4
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d012      	beq.n	8002638 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00b      	beq.n	8002638 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2204      	movs	r2, #4
 8002626:	409a      	lsls	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	f043 0204 	orr.w	r2, r3, #4
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	2204      	movs	r2, #4
 8002620:	409a      	lsls	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d012      	beq.n	8002650 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00b      	beq.n	8002650 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	2204      	movs	r2, #4
 800263e:	409a      	lsls	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002648:	f043 0204 	orr.w	r2, r3, #4
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	2210      	movs	r2, #16
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d043      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d03c      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	2210      	movs	r2, #16
 800265c:	409a      	lsls	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d018      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d108      	bne.n	8002690 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d024      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
 800268e:	e01f      	b.n	80026d0 <HAL_DMA_IRQHandler+0x170>
=======
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2210      	movs	r2, #16
 8002656:	409a      	lsls	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d043      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d03c      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	2210      	movs	r2, #16
 8002674:	409a      	lsls	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d018      	beq.n	80026ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d108      	bne.n	80026a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d024      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	4798      	blx	r3
 80026a6:	e01f      	b.n	80026e8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01b      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e016      	b.n	80026d0 <HAL_DMA_IRQHandler+0x170>
=======
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01b      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
 80026b8:	e016      	b.n	80026e8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d107      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0208 	bic.w	r2, r2, #8
 80026be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
=======
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d107      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0208 	bic.w	r2, r2, #8
 80026d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	4798      	blx	r3
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2220      	movs	r2, #32
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 808f 	beq.w	8002800 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8087 	beq.w	8002800 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2220      	movs	r2, #32
 80026f8:	409a      	lsls	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b05      	cmp	r3, #5
 8002708:	d136      	bne.n	8002778 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0216 	bic.w	r2, r2, #22
 8002718:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002728:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_DMA_IRQHandler+0x1da>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0208 	bic.w	r2, r2, #8
 8002748:	601a      	str	r2, [r3, #0]
=======
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	2220      	movs	r2, #32
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 808f 	beq.w	8002818 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8087 	beq.w	8002818 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	2220      	movs	r2, #32
 8002710:	409a      	lsls	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b05      	cmp	r3, #5
 8002720:	d136      	bne.n	8002790 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0216 	bic.w	r2, r2, #22
 8002730:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002740:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d103      	bne.n	8002752 <HAL_DMA_IRQHandler+0x1da>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274e:	2b00      	cmp	r3, #0
 8002750:	d007      	beq.n	8002762 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0208 	bic.w	r2, r2, #8
 8002760:	601a      	str	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	223f      	movs	r2, #63	; 0x3f
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276a:	2b00      	cmp	r3, #0
 800276c:	d07e      	beq.n	800286c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
        }
        return;
 8002776:	e079      	b.n	800286c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01d      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10d      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	2b00      	cmp	r3, #0
 800279a:	d031      	beq.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
 80027a4:	e02c      	b.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
 80027a6:	bf00      	nop
 80027a8:	2000005c 	.word	0x2000005c
 80027ac:	1b4e81b5 	.word	0x1b4e81b5
=======
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	223f      	movs	r2, #63	; 0x3f
 8002768:	409a      	lsls	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002782:	2b00      	cmp	r3, #0
 8002784:	d07e      	beq.n	8002884 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	4798      	blx	r3
        }
        return;
 800278e:	e079      	b.n	8002884 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01d      	beq.n	80027da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d031      	beq.n	8002818 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
 80027bc:	e02c      	b.n	8002818 <HAL_DMA_IRQHandler+0x2a0>
 80027be:	bf00      	nop
 80027c0:	2000005c 	.word	0x2000005c
 80027c4:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
 80027c0:	e01e      	b.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
=======
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d023      	beq.n	8002818 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
 80027d8:	e01e      	b.n	8002818 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10f      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0210 	bic.w	r2, r2, #16
 80027de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
=======
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10f      	bne.n	8002808 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0210 	bic.w	r2, r2, #16
 80027f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	2b00      	cmp	r3, #0
 8002806:	d032      	beq.n	800286e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d022      	beq.n	800285a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2205      	movs	r2, #5
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
=======
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	2b00      	cmp	r3, #0
 800281e:	d032      	beq.n	8002886 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d022      	beq.n	8002872 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2205      	movs	r2, #5
 8002830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	3301      	adds	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	d307      	bcc.n	8002848 <HAL_DMA_IRQHandler+0x2e8>
=======
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	3301      	adds	r3, #1
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	d307      	bcc.n	8002860 <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f2      	bne.n	800282c <HAL_DMA_IRQHandler+0x2cc>
 8002846:	e000      	b.n	800284a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002848:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
 800286a:	e000      	b.n	800286e <HAL_DMA_IRQHandler+0x30e>
        return;
 800286c:	bf00      	nop
    }
  }
}
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <DMA_SetConfig>:
=======
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f2      	bne.n	8002844 <HAL_DMA_IRQHandler+0x2cc>
 800285e:	e000      	b.n	8002862 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002860:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
 8002882:	e000      	b.n	8002886 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002884:	bf00      	nop
    }
  }
}
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <DMA_SetConfig>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002890:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d108      	bne.n	80028b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	60da      	str	r2, [r3, #12]
=======
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d108      	bne.n	80028cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	60da      	str	r2, [r3, #12]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< HEAD
 80028b2:	e007      	b.n	80028c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	60da      	str	r2, [r3, #12]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <DMA_CalcBaseAndBitshift>:
=======
 80028ca:	e007      	b.n	80028dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	60da      	str	r2, [r3, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <DMA_CalcBaseAndBitshift>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	3b10      	subs	r3, #16
 80028e0:	4a14      	ldr	r2, [pc, #80]	; (8002934 <DMA_CalcBaseAndBitshift+0x64>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	60fb      	str	r3, [r7, #12]
=======
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	3b10      	subs	r3, #16
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <DMA_CalcBaseAndBitshift+0x64>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 80028ea:	4a13      	ldr	r2, [pc, #76]	; (8002938 <DMA_CalcBaseAndBitshift+0x68>)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d909      	bls.n	8002912 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	659a      	str	r2, [r3, #88]	; 0x58
 8002910:	e007      	b.n	8002922 <DMA_CalcBaseAndBitshift+0x52>
=======
 8002902:	4a13      	ldr	r2, [pc, #76]	; (8002950 <DMA_CalcBaseAndBitshift+0x68>)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d909      	bls.n	800292a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800291e:	f023 0303 	bic.w	r3, r3, #3
 8002922:	1d1a      	adds	r2, r3, #4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	659a      	str	r2, [r3, #88]	; 0x58
 8002928:	e007      	b.n	800293a <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	aaaaaaab 	.word	0xaaaaaaab
 8002938:	08003ce4 	.word	0x08003ce4

0800293c <DMA_CheckFifoParam>:
=======
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002932:	f023 0303 	bic.w	r3, r3, #3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	aaaaaaab 	.word	0xaaaaaaab
 8002950:	08003cfc 	.word	0x08003cfc

08002954 <DMA_CheckFifoParam>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11f      	bne.n	8002996 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d856      	bhi.n	8002a0a <DMA_CheckFifoParam+0xce>
 800295c:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <DMA_CheckFifoParam+0x28>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	08002975 	.word	0x08002975
 8002968:	08002987 	.word	0x08002987
 800296c:	08002975 	.word	0x08002975
 8002970:	08002a0b 	.word	0x08002a0b
=======
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11f      	bne.n	80029ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d856      	bhi.n	8002a22 <DMA_CheckFifoParam+0xce>
 8002974:	a201      	add	r2, pc, #4	; (adr r2, 800297c <DMA_CheckFifoParam+0x28>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	0800298d 	.word	0x0800298d
 8002980:	0800299f 	.word	0x0800299f
 8002984:	0800298d 	.word	0x0800298d
 8002988:	08002a23 	.word	0x08002a23
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d046      	beq.n	8002a0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002984:	e043      	b.n	8002a0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800298e:	d140      	bne.n	8002a12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002994:	e03d      	b.n	8002a12 <DMA_CheckFifoParam+0xd6>
=======
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d046      	beq.n	8002a26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299c:	e043      	b.n	8002a26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029a6:	d140      	bne.n	8002a2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ac:	e03d      	b.n	8002a2a <DMA_CheckFifoParam+0xd6>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299e:	d121      	bne.n	80029e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d837      	bhi.n	8002a16 <DMA_CheckFifoParam+0xda>
 80029a6:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <DMA_CheckFifoParam+0x70>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029bd 	.word	0x080029bd
 80029b0:	080029c3 	.word	0x080029c3
 80029b4:	080029bd 	.word	0x080029bd
 80029b8:	080029d5 	.word	0x080029d5
=======
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b6:	d121      	bne.n	80029fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d837      	bhi.n	8002a2e <DMA_CheckFifoParam+0xda>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <DMA_CheckFifoParam+0x70>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	080029db 	.word	0x080029db
 80029cc:	080029d5 	.word	0x080029d5
 80029d0:	080029ed 	.word	0x080029ed
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      break;
 80029c0:	e030      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d025      	beq.n	8002a1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d2:	e022      	b.n	8002a1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029dc:	d11f      	bne.n	8002a1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029e2:	e01c      	b.n	8002a1e <DMA_CheckFifoParam+0xe2>
=======
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      break;
 80029d8:	e030      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d025      	beq.n	8002a32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ea:	e022      	b.n	8002a32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029f4:	d11f      	bne.n	8002a36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029fa:	e01c      	b.n	8002a36 <DMA_CheckFifoParam+0xe2>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d903      	bls.n	80029f2 <DMA_CheckFifoParam+0xb6>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d003      	beq.n	80029f8 <DMA_CheckFifoParam+0xbc>
=======
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d903      	bls.n	8002a0a <DMA_CheckFifoParam+0xb6>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d003      	beq.n	8002a10 <DMA_CheckFifoParam+0xbc>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 80029f0:	e018      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
      break;
 80029f6:	e015      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      break;
 8002a08:	e00b      	b.n	8002a22 <DMA_CheckFifoParam+0xe6>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e00a      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e008      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a12:	bf00      	nop
 8002a14:	e006      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a16:	bf00      	nop
 8002a18:	e004      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e002      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a22:	bf00      	nop
=======
 8002a08:	e018      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a0e:	e015      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00e      	beq.n	8002a3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a20:	e00b      	b.n	8002a3a <DMA_CheckFifoParam+0xe6>
      break;
 8002a22:	bf00      	nop
 8002a24:	e00a      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;
 8002a26:	bf00      	nop
 8002a28:	e008      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e006      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e004      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;
 8002a32:	bf00      	nop
 8002a34:	e002      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a36:	bf00      	nop
 8002a38:	e000      	b.n	8002a3c <DMA_CheckFifoParam+0xe8>
      break;
 8002a3a:	bf00      	nop
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  } 
  
  return status; 
<<<<<<< HEAD
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop

08002a34 <HAL_GPIO_Init>:
=======
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop

08002a4c <HAL_GPIO_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
=======
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	e16b      	b.n	8002d28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 815a 	bne.w	8002d22 <HAL_GPIO_Init+0x2ee>
=======
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e16b      	b.n	8002d40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a68:	2201      	movs	r2, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	f040 815a 	bne.w	8002d3a <HAL_GPIO_Init+0x2ee>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d005      	beq.n	8002a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d130      	bne.n	8002ae8 <HAL_GPIO_Init+0xb4>
=======
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d005      	beq.n	8002a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d130      	bne.n	8002b00 <HAL_GPIO_Init+0xb4>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002abc:	2201      	movs	r2, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 0201 	and.w	r2, r3, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d017      	beq.n	8002b24 <HAL_GPIO_Init+0xf0>
=======
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 0201 	and.w	r2, r3, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d017      	beq.n	8002b3c <HAL_GPIO_Init+0xf0>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	60da      	str	r2, [r3, #12]
=======
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	2203      	movs	r2, #3
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	60da      	str	r2, [r3, #12]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d123      	bne.n	8002b78 <HAL_GPIO_Init+0x144>
=======
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d123      	bne.n	8002b90 <HAL_GPIO_Init+0x144>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3208      	adds	r2, #8
 8002b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	08da      	lsrs	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3208      	adds	r2, #8
 8002b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	220f      	movs	r2, #15
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	08da      	lsrs	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3208      	adds	r2, #8
 8002b8a:	69b9      	ldr	r1, [r7, #24]
 8002b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	601a      	str	r2, [r3, #0]
=======
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0203 	and.w	r2, r3, #3
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	601a      	str	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80b4 	beq.w	8002d22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b60      	ldr	r3, [pc, #384]	; (8002d40 <HAL_GPIO_Init+0x30c>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	4a5f      	ldr	r2, [pc, #380]	; (8002d40 <HAL_GPIO_Init+0x30c>)
 8002bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bca:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <HAL_GPIO_Init+0x30c>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd6:	4a5b      	ldr	r2, [pc, #364]	; (8002d44 <HAL_GPIO_Init+0x310>)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a52      	ldr	r2, [pc, #328]	; (8002d48 <HAL_GPIO_Init+0x314>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d02b      	beq.n	8002c5a <HAL_GPIO_Init+0x226>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a51      	ldr	r2, [pc, #324]	; (8002d4c <HAL_GPIO_Init+0x318>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d025      	beq.n	8002c56 <HAL_GPIO_Init+0x222>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a50      	ldr	r2, [pc, #320]	; (8002d50 <HAL_GPIO_Init+0x31c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01f      	beq.n	8002c52 <HAL_GPIO_Init+0x21e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4f      	ldr	r2, [pc, #316]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d019      	beq.n	8002c4e <HAL_GPIO_Init+0x21a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4e      	ldr	r2, [pc, #312]	; (8002d58 <HAL_GPIO_Init+0x324>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_GPIO_Init+0x216>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4d      	ldr	r2, [pc, #308]	; (8002d5c <HAL_GPIO_Init+0x328>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00d      	beq.n	8002c46 <HAL_GPIO_Init+0x212>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4c      	ldr	r2, [pc, #304]	; (8002d60 <HAL_GPIO_Init+0x32c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <HAL_GPIO_Init+0x20e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4b      	ldr	r2, [pc, #300]	; (8002d64 <HAL_GPIO_Init+0x330>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_GPIO_Init+0x20a>
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	e00e      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c3e:	2308      	movs	r3, #8
 8002c40:	e00c      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c42:	2306      	movs	r3, #6
 8002c44:	e00a      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c46:	2305      	movs	r3, #5
 8002c48:	e008      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	e006      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e004      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e002      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	f002 0203 	and.w	r2, r2, #3
 8002c62:	0092      	lsls	r2, r2, #2
 8002c64:	4093      	lsls	r3, r2
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c6c:	4935      	ldr	r1, [pc, #212]	; (8002d44 <HAL_GPIO_Init+0x310>)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	3302      	adds	r3, #2
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <HAL_GPIO_Init+0x334>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c9e:	4a32      	ldr	r2, [pc, #200]	; (8002d68 <HAL_GPIO_Init+0x334>)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca4:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <HAL_GPIO_Init+0x334>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc8:	4a27      	ldr	r2, [pc, #156]	; (8002d68 <HAL_GPIO_Init+0x334>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <HAL_GPIO_Init+0x334>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf2:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <HAL_GPIO_Init+0x334>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_GPIO_Init+0x334>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d1c:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <HAL_GPIO_Init+0x334>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3301      	adds	r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	f67f ae90 	bls.w	8002a50 <HAL_GPIO_Init+0x1c>
=======
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80b4 	beq.w	8002d3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	4b60      	ldr	r3, [pc, #384]	; (8002d58 <HAL_GPIO_Init+0x30c>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	4a5f      	ldr	r2, [pc, #380]	; (8002d58 <HAL_GPIO_Init+0x30c>)
 8002bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be0:	6453      	str	r3, [r2, #68]	; 0x44
 8002be2:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <HAL_GPIO_Init+0x30c>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bee:	4a5b      	ldr	r2, [pc, #364]	; (8002d5c <HAL_GPIO_Init+0x310>)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	220f      	movs	r2, #15
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a52      	ldr	r2, [pc, #328]	; (8002d60 <HAL_GPIO_Init+0x314>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d02b      	beq.n	8002c72 <HAL_GPIO_Init+0x226>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a51      	ldr	r2, [pc, #324]	; (8002d64 <HAL_GPIO_Init+0x318>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d025      	beq.n	8002c6e <HAL_GPIO_Init+0x222>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a50      	ldr	r2, [pc, #320]	; (8002d68 <HAL_GPIO_Init+0x31c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01f      	beq.n	8002c6a <HAL_GPIO_Init+0x21e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4f      	ldr	r2, [pc, #316]	; (8002d6c <HAL_GPIO_Init+0x320>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d019      	beq.n	8002c66 <HAL_GPIO_Init+0x21a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4e      	ldr	r2, [pc, #312]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_GPIO_Init+0x216>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a4d      	ldr	r2, [pc, #308]	; (8002d74 <HAL_GPIO_Init+0x328>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00d      	beq.n	8002c5e <HAL_GPIO_Init+0x212>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4c      	ldr	r2, [pc, #304]	; (8002d78 <HAL_GPIO_Init+0x32c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d007      	beq.n	8002c5a <HAL_GPIO_Init+0x20e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	; (8002d7c <HAL_GPIO_Init+0x330>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_GPIO_Init+0x20a>
 8002c52:	2307      	movs	r3, #7
 8002c54:	e00e      	b.n	8002c74 <HAL_GPIO_Init+0x228>
 8002c56:	2308      	movs	r3, #8
 8002c58:	e00c      	b.n	8002c74 <HAL_GPIO_Init+0x228>
 8002c5a:	2306      	movs	r3, #6
 8002c5c:	e00a      	b.n	8002c74 <HAL_GPIO_Init+0x228>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x228>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x228>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x228>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x228>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x228>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	; (8002d5c <HAL_GPIO_Init+0x310>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a32      	ldr	r2, [pc, #200]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce6:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d34:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <HAL_GPIO_Init+0x334>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f ae90 	bls.w	8002a68 <HAL_GPIO_Init+0x1c>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }
  }
}
<<<<<<< HEAD
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3724      	adds	r7, #36	; 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40013800 	.word	0x40013800
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	40020800 	.word	0x40020800
 8002d54:	40020c00 	.word	0x40020c00
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40021400 	.word	0x40021400
 8002d60:	40021800 	.word	0x40021800
 8002d64:	40021c00 	.word	0x40021c00
 8002d68:	40013c00 	.word	0x40013c00

08002d6c <HAL_GPIO_WritePin>:
=======
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40021400 	.word	0x40021400
 8002d78:	40021800 	.word	0x40021800
 8002d7c:	40021c00 	.word	0x40021c00
 8002d80:	40013c00 	.word	0x40013c00

08002d84 <HAL_GPIO_WritePin>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	707b      	strb	r3, [r7, #1]
=======
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
 8002d90:	4613      	mov	r3, r2
 8002d92:	707b      	strb	r3, [r7, #1]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8002d7c:	787b      	ldrb	r3, [r7, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	619a      	str	r2, [r3, #24]
=======
 8002d94:	787b      	ldrb	r3, [r7, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8002d88:	e003      	b.n	8002d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d8a:	887b      	ldrh	r3, [r7, #2]
 8002d8c:	041a      	lsls	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	619a      	str	r2, [r3, #24]
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_GPIO_TogglePin>:
=======
 8002da0:	e003      	b.n	8002daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	041a      	lsls	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	619a      	str	r2, [r3, #24]
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_GPIO_TogglePin>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	807b      	strh	r3, [r7, #2]
=======
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	807b      	strh	r3, [r7, #2]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002db0:	887a      	ldrh	r2, [r7, #2]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4013      	ands	r3, r2
 8002db6:	041a      	lsls	r2, r3, #16
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	43d9      	mvns	r1, r3
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	400b      	ands	r3, r1
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	619a      	str	r2, [r3, #24]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dc8:	887a      	ldrh	r2, [r7, #2]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	041a      	lsls	r2, r3, #16
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	887b      	ldrh	r3, [r7, #2]
 8002dd6:	400b      	ands	r3, r1
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	619a      	str	r2, [r3, #24]
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dde:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d006      	beq.n	8002df8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fb66 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40013c00 	.word	0x40013c00

08002e04 <HAL_RCC_OscConfig>:
=======
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e02:	4a05      	ldr	r2, [pc, #20]	; (8002e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fb5a 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40013c00 	.word	0x40013c00

08002e1c <HAL_RCC_OscConfig>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
=======
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e267      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
=======
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e267      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d075      	beq.n	8002f0e <HAL_RCC_OscConfig+0x10a>
=======
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d075      	beq.n	8002f26 <HAL_RCC_OscConfig+0x10a>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8002e22:	4b88      	ldr	r3, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d00c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2e:	4b85      	ldr	r3, [pc, #532]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d112      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3a:	4b82      	ldr	r3, [pc, #520]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e46:	d10b      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	4b7e      	ldr	r3, [pc, #504]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d05b      	beq.n	8002f0c <HAL_RCC_OscConfig+0x108>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d157      	bne.n	8002f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e242      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
=======
 8002e3a:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d00c      	beq.n	8002e60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e46:	4b85      	ldr	r3, [pc, #532]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d112      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e52:	4b82      	ldr	r3, [pc, #520]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5e:	d10b      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	4b7e      	ldr	r3, [pc, #504]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05b      	beq.n	8002f24 <HAL_RCC_OscConfig+0x108>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d157      	bne.n	8002f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e242      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e68:	d106      	bne.n	8002e78 <HAL_RCC_OscConfig+0x74>
 8002e6a:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a75      	ldr	r2, [pc, #468]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e01d      	b.n	8002eb4 <HAL_RCC_OscConfig+0xb0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x98>
 8002e82:	4b70      	ldr	r3, [pc, #448]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a6f      	ldr	r2, [pc, #444]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b6d      	ldr	r3, [pc, #436]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a6c      	ldr	r2, [pc, #432]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCC_OscConfig+0xb0>
 8002e9c:	4b69      	ldr	r3, [pc, #420]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a68      	ldr	r2, [pc, #416]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b66      	ldr	r3, [pc, #408]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a65      	ldr	r2, [pc, #404]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fb4a 	bl	8001554 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fe fb46 	bl	8001554 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e207      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xc0>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x10a>
=======
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x74>
 8002e82:	4b76      	ldr	r3, [pc, #472]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a75      	ldr	r2, [pc, #468]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x98>
 8002e9a:	4b70      	ldr	r3, [pc, #448]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a6f      	ldr	r2, [pc, #444]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6c      	ldr	r2, [pc, #432]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002eb4:	4b69      	ldr	r3, [pc, #420]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a68      	ldr	r2, [pc, #416]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b66      	ldr	r3, [pc, #408]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a65      	ldr	r2, [pc, #404]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fb4a 	bl	800156c <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fb46 	bl	800156c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e207      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b5b      	ldr	r3, [pc, #364]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0xc0>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002ee4:	f7fe fb36 	bl	8001554 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fe fb32 	bl	8001554 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e1f3      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efe:	4b51      	ldr	r3, [pc, #324]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0xe8>
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	bf00      	nop
=======
 8002efc:	f7fe fb36 	bl	800156c <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe fb32 	bl	800156c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e1f3      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	4b51      	ldr	r3, [pc, #324]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0xe8>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d063      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x1de>
=======
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d063      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8002f1a:	4b4a      	ldr	r3, [pc, #296]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00b      	beq.n	8002f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d11c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f32:	4b44      	ldr	r3, [pc, #272]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d116      	bne.n	8002f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_RCC_OscConfig+0x152>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e1c7      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
=======
 8002f32:	4b4a      	ldr	r3, [pc, #296]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b47      	ldr	r3, [pc, #284]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d11c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b44      	ldr	r3, [pc, #272]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_RCC_OscConfig+0x152>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e1c7      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002f56:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4937      	ldr	r1, [pc, #220]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6a:	e03a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1de>
=======
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4937      	ldr	r1, [pc, #220]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	e03a      	b.n	8002ffa <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f74:	4b34      	ldr	r3, [pc, #208]	; (8003048 <HAL_RCC_OscConfig+0x244>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7fe faeb 	bl	8001554 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f82:	f7fe fae7 	bl	8001554 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e1a8      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x17e>
=======
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b34      	ldr	r3, [pc, #208]	; (8003060 <HAL_RCC_OscConfig+0x244>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fe faeb 	bl	800156c <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fe fae7 	bl	800156c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e1a8      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	4b2b      	ldr	r3, [pc, #172]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x17e>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002fa0:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4925      	ldr	r1, [pc, #148]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]
 8002fb4:	e015      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1de>
=======
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4925      	ldr	r1, [pc, #148]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e015      	b.n	8002ffa <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCC_OscConfig+0x244>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe faca 	bl	8001554 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc4:	f7fe fac6 	bl	8001554 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e187      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x1c0>
=======
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCC_OscConfig+0x244>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe faca 	bl	800156c <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fac6 	bl	800156c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e187      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1c0>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d036      	beq.n	800305c <HAL_RCC_OscConfig+0x258>
=======
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d036      	beq.n	8003074 <HAL_RCC_OscConfig+0x258>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d016      	beq.n	8003024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <HAL_RCC_OscConfig+0x248>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7fe faaa 	bl	8001554 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003004:	f7fe faa6 	bl	8001554 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e167      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8003018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x200>
 8003022:	e01b      	b.n	800305c <HAL_RCC_OscConfig+0x258>
=======
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_RCC_OscConfig+0x248>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe faaa 	bl	800156c <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301c:	f7fe faa6 	bl	800156c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e167      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_OscConfig+0x240>)
 8003030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x200>
 800303a:	e01b      	b.n	8003074 <HAL_RCC_OscConfig+0x258>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_OscConfig+0x248>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302a:	f7fe fa93 	bl	8001554 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003030:	e00e      	b.n	8003050 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003032:	f7fe fa8f 	bl	8001554 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d907      	bls.n	8003050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e150      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
 8003044:	40023800 	.word	0x40023800
 8003048:	42470000 	.word	0x42470000
 800304c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	4b88      	ldr	r3, [pc, #544]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ea      	bne.n	8003032 <HAL_RCC_OscConfig+0x22e>
=======
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCC_OscConfig+0x248>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7fe fa93 	bl	800156c <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	e00e      	b.n	8003068 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304a:	f7fe fa8f 	bl	800156c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d907      	bls.n	8003068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e150      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
 800305c:	40023800 	.word	0x40023800
 8003060:	42470000 	.word	0x42470000
 8003064:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ea      	bne.n	800304a <HAL_RCC_OscConfig+0x22e>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8097 	beq.w	8003198 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]
=======
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8097 	beq.w	80031b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800306e:	4b81      	ldr	r3, [pc, #516]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10f      	bne.n	800309a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	4b7d      	ldr	r3, [pc, #500]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a7c      	ldr	r2, [pc, #496]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
 800308a:	4b7a      	ldr	r3, [pc, #488]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003096:	2301      	movs	r3, #1
 8003098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309a:	4b77      	ldr	r3, [pc, #476]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d118      	bne.n	80030d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a6:	4b74      	ldr	r3, [pc, #464]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a73      	ldr	r2, [pc, #460]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b2:	f7fe fa4f 	bl	8001554 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ba:	f7fe fa4b 	bl	8001554 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e10c      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x2b6>
=======
 8003086:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10f      	bne.n	80030b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	4b7d      	ldr	r3, [pc, #500]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a7c      	ldr	r2, [pc, #496]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b7a      	ldr	r3, [pc, #488]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b77      	ldr	r3, [pc, #476]	; (8003290 <HAL_RCC_OscConfig+0x474>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030be:	4b74      	ldr	r3, [pc, #464]	; (8003290 <HAL_RCC_OscConfig+0x474>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a73      	ldr	r2, [pc, #460]	; (8003290 <HAL_RCC_OscConfig+0x474>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fa4f 	bl	800156c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fe fa4b 	bl	800156c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e10c      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b6a      	ldr	r3, [pc, #424]	; (8003290 <HAL_RCC_OscConfig+0x474>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x2ea>
 80030e0:	4b64      	ldr	r3, [pc, #400]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a63      	ldr	r2, [pc, #396]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
 80030ec:	e01c      	b.n	8003128 <HAL_RCC_OscConfig+0x324>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b05      	cmp	r3, #5
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x30c>
 80030f6:	4b5f      	ldr	r3, [pc, #380]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a5e      	ldr	r2, [pc, #376]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 0304 	orr.w	r3, r3, #4
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	4a5b      	ldr	r2, [pc, #364]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6713      	str	r3, [r2, #112]	; 0x70
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0x324>
 8003110:	4b58      	ldr	r3, [pc, #352]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a57      	ldr	r2, [pc, #348]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	4b55      	ldr	r3, [pc, #340]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4a54      	ldr	r2, [pc, #336]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003122:	f023 0304 	bic.w	r3, r3, #4
 8003126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d015      	beq.n	800315c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fe fa10 	bl	8001554 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003138:	f7fe fa0c 	bl	8001554 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e0cb      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	4b49      	ldr	r3, [pc, #292]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0ee      	beq.n	8003138 <HAL_RCC_OscConfig+0x334>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x382>
=======
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x2ea>
 80030f8:	4b64      	ldr	r3, [pc, #400]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a63      	ldr	r2, [pc, #396]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
 8003104:	e01c      	b.n	8003140 <HAL_RCC_OscConfig+0x324>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x30c>
 800310e:	4b5f      	ldr	r3, [pc, #380]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a5e      	ldr	r2, [pc, #376]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	4b5c      	ldr	r3, [pc, #368]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a5b      	ldr	r2, [pc, #364]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0x324>
 8003128:	4b58      	ldr	r3, [pc, #352]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a57      	ldr	r2, [pc, #348]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	; 0x70
 8003134:	4b55      	ldr	r3, [pc, #340]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a54      	ldr	r2, [pc, #336]	; (800328c <HAL_RCC_OscConfig+0x470>)
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d015      	beq.n	8003174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe fa10 	bl	800156c <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fe fa0c 	bl	800156c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e0cb      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	4b49      	ldr	r3, [pc, #292]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ee      	beq.n	8003150 <HAL_RCC_OscConfig+0x334>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x382>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 800315c:	f7fe f9fa 	bl	8001554 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003162:	e00a      	b.n	800317a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7fe f9f6 	bl	8001554 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e0b5      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1ee      	bne.n	8003164 <HAL_RCC_OscConfig+0x360>
=======
 8003174:	f7fe f9fa 	bl	800156c <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe f9f6 	bl	800156c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0b5      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	4b3e      	ldr	r3, [pc, #248]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ee      	bne.n	800317c <HAL_RCC_OscConfig+0x360>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318c:	4b39      	ldr	r3, [pc, #228]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	4a38      	ldr	r2, [pc, #224]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003196:	6413      	str	r3, [r2, #64]	; 0x40
=======
 800319e:	7dfb      	ldrb	r3, [r7, #23]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a4:	4b39      	ldr	r3, [pc, #228]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	4a38      	ldr	r2, [pc, #224]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80031aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a1 	beq.w	80032e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031a2:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d05c      	beq.n	8003268 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d141      	bne.n	800323a <HAL_RCC_OscConfig+0x436>
=======
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80a1 	beq.w	80032fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ba:	4b34      	ldr	r3, [pc, #208]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d05c      	beq.n	8003280 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d141      	bne.n	8003252 <HAL_RCC_OscConfig+0x436>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80031b6:	4b31      	ldr	r3, [pc, #196]	; (800327c <HAL_RCC_OscConfig+0x478>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe f9ca 	bl	8001554 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe f9c6 	bl	8001554 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e087      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
=======
 80031ce:	4b31      	ldr	r3, [pc, #196]	; (8003294 <HAL_RCC_OscConfig+0x478>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe f9ca 	bl	800156c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe f9c6 	bl	800156c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e087      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	4b27      	ldr	r3, [pc, #156]	; (800328c <HAL_RCC_OscConfig+0x470>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x3c0>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	019b      	lsls	r3, r3, #6
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	3b01      	subs	r3, #1
 80031fc:	041b      	lsls	r3, r3, #16
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	491b      	ldr	r1, [pc, #108]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
=======
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	3b01      	subs	r3, #1
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	491b      	ldr	r1, [pc, #108]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <HAL_RCC_OscConfig+0x478>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fe f99f 	bl	8001554 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321a:	f7fe f99b 	bl	8001554 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e05c      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x416>
 8003238:	e054      	b.n	80032e4 <HAL_RCC_OscConfig+0x4e0>
=======
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x478>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe f99f 	bl	800156c <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe f99b 	bl	800156c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e05c      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x416>
 8003250:	e054      	b.n	80032fc <HAL_RCC_OscConfig+0x4e0>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <HAL_RCC_OscConfig+0x478>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe f988 	bl	8001554 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe f984 	bl	8001554 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e045      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x444>
 8003266:	e03d      	b.n	80032e4 <HAL_RCC_OscConfig+0x4e0>
=======
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_RCC_OscConfig+0x478>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe f988 	bl	800156c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003260:	f7fe f984 	bl	800156c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e045      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_OscConfig+0x470>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x444>
 800327e:	e03d      	b.n	80032fc <HAL_RCC_OscConfig+0x4e0>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d107      	bne.n	8003280 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e038      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
 8003274:	40023800 	.word	0x40023800
 8003278:	40007000 	.word	0x40007000
 800327c:	42470060 	.word	0x42470060
=======
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e038      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
 800328c:	40023800 	.word	0x40023800
 8003290:	40007000 	.word	0x40007000
 8003294:	42470060 	.word	0x42470060
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8003280:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_RCC_OscConfig+0x4ec>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	60fb      	str	r3, [r7, #12]
=======
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <HAL_RCC_OscConfig+0x4ec>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d028      	beq.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d121      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d11a      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032b0:	4013      	ands	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d111      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	3b01      	subs	r3, #1
 80032ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
=======
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d028      	beq.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d121      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d11a      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d111      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	3b01      	subs	r3, #1
 80032e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800

080032f4 <HAL_RCC_ClockConfig>:
=======
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800

0800330c <HAL_RCC_ClockConfig>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
=======
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0cc      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0cc      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003308:	4b68      	ldr	r3, [pc, #416]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d90c      	bls.n	8003330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]
=======
 8003320:	4b68      	ldr	r3, [pc, #416]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d90c      	bls.n	8003348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b65      	ldr	r3, [pc, #404]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0b8      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x8a>
=======
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800336a:	6093      	str	r3, [r2, #8]
=======
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003360:	4b59      	ldr	r3, [pc, #356]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800336a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003382:	6093      	str	r3, [r2, #8]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 800336c:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
=======
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	494d      	ldr	r1, [pc, #308]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d044      	beq.n	8003414 <HAL_RCC_ClockConfig+0x120>
=======
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d044      	beq.n	800342c <HAL_RCC_ClockConfig+0x120>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d119      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
=======
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d119      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e07f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b3f      	ldr	r3, [pc, #252]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e06f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
=======
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d003      	beq.n	80033ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b3f      	ldr	r3, [pc, #252]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e06f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80033c2:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e067      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
=======
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e067      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80033d2:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f023 0203 	bic.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4934      	ldr	r1, [pc, #208]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e4:	f7fe f8b6 	bl	8001554 <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ec:	f7fe f8b2 	bl	8001554 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e04f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 020c 	and.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	429a      	cmp	r2, r3
 8003412:	d1eb      	bne.n	80033ec <HAL_RCC_ClockConfig+0xf8>
=======
 80033ea:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4934      	ldr	r1, [pc, #208]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033fc:	f7fe f8b6 	bl	800156c <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe f8b2 	bl	800156c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e04f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003414:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d20c      	bcs.n	800343c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]
=======
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d20c      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e032      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
=======
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4916      	ldr	r1, [pc, #88]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
=======
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	490e      	ldr	r1, [pc, #56]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe f816 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023c00 	.word	0x40023c00
 80034b0:	40023800 	.word	0x40023800
 80034b4:	08003cd4 	.word	0x08003cd4
 80034b8:	2000005c 	.word	0x2000005c
 80034bc:	20000060 	.word	0x20000060

080034c0 <HAL_RCC_GetSysClockFreq>:
=======
 8003492:	f000 f821 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003496:	4602      	mov	r2, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	490a      	ldr	r1, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe f816 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023c00 	.word	0x40023c00
 80034c8:	40023800 	.word	0x40023800
 80034cc:	08003cec 	.word	0x08003cec
 80034d0:	2000005c 	.word	0x2000005c
 80034d4:	20000060 	.word	0x20000060

080034d8 <HAL_RCC_GetSysClockFreq>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80034c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c4:	b094      	sub	sp, #80	; 0x50
 80034c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	647b      	str	r3, [r7, #68]	; 0x44
 80034cc:	2300      	movs	r3, #0
 80034ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d0:	2300      	movs	r3, #0
 80034d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034d8:	4b79      	ldr	r3, [pc, #484]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d00d      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x40>
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	f200 80e1 	bhi.w	80036ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x34>
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x3a>
 80034f2:	e0db      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 80034d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034dc:	b094      	sub	sp, #80	; 0x50
 80034de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	647b      	str	r3, [r7, #68]	; 0x44
 80034e4:	2300      	movs	r3, #0
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e8:	2300      	movs	r3, #0
 80034ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f0:	4b79      	ldr	r3, [pc, #484]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d00d      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x40>
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	f200 80e1 	bhi.w	80036c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x34>
 8003506:	2b04      	cmp	r3, #4
 8003508:	d003      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x3a>
 800350a:	e0db      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80034f4:	4b73      	ldr	r3, [pc, #460]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034f8:	e0db      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 800350c:	4b73      	ldr	r3, [pc, #460]	; (80036dc <HAL_RCC_GetSysClockFreq+0x204>)
 800350e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003510:	e0db      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 80034fa:	4b73      	ldr	r3, [pc, #460]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80034fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034fe:	e0d8      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8003512:	4b73      	ldr	r3, [pc, #460]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003514:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003516:	e0d8      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8003500:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003508:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800350a:	4b6d      	ldr	r3, [pc, #436]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d063      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003516:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	099b      	lsrs	r3, r3, #6
 800351c:	2200      	movs	r2, #0
 800351e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003520:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
 800352a:	2300      	movs	r3, #0
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
 800352e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003532:	4622      	mov	r2, r4
 8003534:	462b      	mov	r3, r5
 8003536:	f04f 0000 	mov.w	r0, #0
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	0159      	lsls	r1, r3, #5
 8003540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003544:	0150      	lsls	r0, r2, #5
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4621      	mov	r1, r4
 800354c:	1a51      	subs	r1, r2, r1
 800354e:	6139      	str	r1, [r7, #16]
 8003550:	4629      	mov	r1, r5
 8003552:	eb63 0301 	sbc.w	r3, r3, r1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003564:	4659      	mov	r1, fp
 8003566:	018b      	lsls	r3, r1, #6
 8003568:	4651      	mov	r1, sl
 800356a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800356e:	4651      	mov	r1, sl
 8003570:	018a      	lsls	r2, r1, #6
 8003572:	4651      	mov	r1, sl
 8003574:	ebb2 0801 	subs.w	r8, r2, r1
 8003578:	4659      	mov	r1, fp
 800357a:	eb63 0901 	sbc.w	r9, r3, r1
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800358a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800358e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003592:	4690      	mov	r8, r2
 8003594:	4699      	mov	r9, r3
 8003596:	4623      	mov	r3, r4
 8003598:	eb18 0303 	adds.w	r3, r8, r3
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	462b      	mov	r3, r5
 80035a0:	eb49 0303 	adc.w	r3, r9, r3
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035b2:	4629      	mov	r1, r5
 80035b4:	024b      	lsls	r3, r1, #9
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035bc:	4621      	mov	r1, r4
 80035be:	024a      	lsls	r2, r1, #9
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c6:	2200      	movs	r2, #0
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035d0:	f7fc fdfa 	bl	80001c8 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035dc:	e058      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 8003518:	4b6f      	ldr	r3, [pc, #444]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003520:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003522:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d063      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352e:	4b6a      	ldr	r3, [pc, #424]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	2200      	movs	r2, #0
 8003536:	63bb      	str	r3, [r7, #56]	; 0x38
 8003538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003540:	633b      	str	r3, [r7, #48]	; 0x30
 8003542:	2300      	movs	r3, #0
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
 8003546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800354a:	4622      	mov	r2, r4
 800354c:	462b      	mov	r3, r5
 800354e:	f04f 0000 	mov.w	r0, #0
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	0159      	lsls	r1, r3, #5
 8003558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355c:	0150      	lsls	r0, r2, #5
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4621      	mov	r1, r4
 8003564:	1a51      	subs	r1, r2, r1
 8003566:	6139      	str	r1, [r7, #16]
 8003568:	4629      	mov	r1, r5
 800356a:	eb63 0301 	sbc.w	r3, r3, r1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800357c:	4659      	mov	r1, fp
 800357e:	018b      	lsls	r3, r1, #6
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003586:	4651      	mov	r1, sl
 8003588:	018a      	lsls	r2, r1, #6
 800358a:	4651      	mov	r1, sl
 800358c:	ebb2 0801 	subs.w	r8, r2, r1
 8003590:	4659      	mov	r1, fp
 8003592:	eb63 0901 	sbc.w	r9, r3, r1
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035aa:	4690      	mov	r8, r2
 80035ac:	4699      	mov	r9, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	eb18 0303 	adds.w	r3, r8, r3
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	462b      	mov	r3, r5
 80035b8:	eb49 0303 	adc.w	r3, r9, r3
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035ca:	4629      	mov	r1, r5
 80035cc:	024b      	lsls	r3, r1, #9
 80035ce:	4621      	mov	r1, r4
 80035d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035d4:	4621      	mov	r1, r4
 80035d6:	024a      	lsls	r2, r1, #9
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035de:	2200      	movs	r2, #0
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035e8:	f7fc fdee 	bl	80001c8 <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4613      	mov	r3, r2
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f4:	e058      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 80035de:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	099b      	lsrs	r3, r3, #6
 80035e4:	2200      	movs	r2, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	4611      	mov	r1, r2
 80035ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035ee:	623b      	str	r3, [r7, #32]
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
 80035f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	f04f 0000 	mov.w	r0, #0
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	0159      	lsls	r1, r3, #5
 8003606:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800360a:	0150      	lsls	r0, r2, #5
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4641      	mov	r1, r8
 8003612:	ebb2 0a01 	subs.w	sl, r2, r1
 8003616:	4649      	mov	r1, r9
 8003618:	eb63 0b01 	sbc.w	fp, r3, r1
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003628:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800362c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003630:	ebb2 040a 	subs.w	r4, r2, sl
 8003634:	eb63 050b 	sbc.w	r5, r3, fp
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	00eb      	lsls	r3, r5, #3
 8003642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003646:	00e2      	lsls	r2, r4, #3
 8003648:	4614      	mov	r4, r2
 800364a:	461d      	mov	r5, r3
 800364c:	4643      	mov	r3, r8
 800364e:	18e3      	adds	r3, r4, r3
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	464b      	mov	r3, r9
 8003654:	eb45 0303 	adc.w	r3, r5, r3
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003666:	4629      	mov	r1, r5
 8003668:	028b      	lsls	r3, r1, #10
 800366a:	4621      	mov	r1, r4
 800366c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003670:	4621      	mov	r1, r4
 8003672:	028a      	lsls	r2, r1, #10
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367a:	2200      	movs	r2, #0
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	61fa      	str	r2, [r7, #28]
 8003680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003684:	f7fc fda0 	bl	80001c8 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	3301      	adds	r3, #1
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036aa:	e002      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 80035f6:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	2200      	movs	r2, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	4611      	mov	r1, r2
 8003602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003606:	623b      	str	r3, [r7, #32]
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
 800360c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003610:	4642      	mov	r2, r8
 8003612:	464b      	mov	r3, r9
 8003614:	f04f 0000 	mov.w	r0, #0
 8003618:	f04f 0100 	mov.w	r1, #0
 800361c:	0159      	lsls	r1, r3, #5
 800361e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003622:	0150      	lsls	r0, r2, #5
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4641      	mov	r1, r8
 800362a:	ebb2 0a01 	subs.w	sl, r2, r1
 800362e:	4649      	mov	r1, r9
 8003630:	eb63 0b01 	sbc.w	fp, r3, r1
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003648:	ebb2 040a 	subs.w	r4, r2, sl
 800364c:	eb63 050b 	sbc.w	r5, r3, fp
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	00eb      	lsls	r3, r5, #3
 800365a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800365e:	00e2      	lsls	r2, r4, #3
 8003660:	4614      	mov	r4, r2
 8003662:	461d      	mov	r5, r3
 8003664:	4643      	mov	r3, r8
 8003666:	18e3      	adds	r3, r4, r3
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	464b      	mov	r3, r9
 800366c:	eb45 0303 	adc.w	r3, r5, r3
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800367e:	4629      	mov	r1, r5
 8003680:	028b      	lsls	r3, r1, #10
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003688:	4621      	mov	r1, r4
 800368a:	028a      	lsls	r2, r1, #10
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003692:	2200      	movs	r2, #0
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	61fa      	str	r2, [r7, #28]
 8003698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800369c:	f7fc fd94 	bl	80001c8 <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4613      	mov	r3, r2
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	3301      	adds	r3, #1
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036c2:	e002      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3750      	adds	r7, #80	; 0x50
 80036b8:	46bd      	mov	sp, r7
 80036ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	00f42400 	.word	0x00f42400
 80036c8:	007a1200 	.word	0x007a1200

080036cc <HAL_TIM_Base_Init>:
=======
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetSysClockFreq+0x204>)
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3750      	adds	r7, #80	; 0x50
 80036d0:	46bd      	mov	sp, r7
 80036d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	00f42400 	.word	0x00f42400
 80036e0:	007a1200 	.word	0x007a1200

080036e4 <HAL_TIM_Base_Init>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e041      	b.n	8003762 <HAL_TIM_Base_Init+0x96>
=======
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e041      	b.n	800377a <HAL_TIM_Base_Init+0x96>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd fe18 	bl	8001328 <HAL_TIM_Base_MspInit>
=======
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd fe18 	bl	8001340 <HAL_TIM_Base_MspInit>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f000 f8f4 	bl	80038f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_TIM_ConfigClockSource>:
=======
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f000 f8f4 	bl	8003910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_TIM_ConfigClockSource>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	73fb      	strb	r3, [r7, #15]
=======
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_TIM_ConfigClockSource+0x1c>
 8003782:	2302      	movs	r3, #2
 8003784:	e0b4      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x186>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_TIM_ConfigClockSource+0x1c>
 800379a:	2302      	movs	r3, #2
 800379c:	e0b4      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x186>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037be:	d03e      	beq.n	800383e <HAL_TIM_ConfigClockSource+0xd4>
 80037c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c4:	f200 8087 	bhi.w	80038d6 <HAL_TIM_ConfigClockSource+0x16c>
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037cc:	f000 8086 	beq.w	80038dc <HAL_TIM_ConfigClockSource+0x172>
 80037d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d4:	d87f      	bhi.n	80038d6 <HAL_TIM_ConfigClockSource+0x16c>
 80037d6:	2b70      	cmp	r3, #112	; 0x70
 80037d8:	d01a      	beq.n	8003810 <HAL_TIM_ConfigClockSource+0xa6>
 80037da:	2b70      	cmp	r3, #112	; 0x70
 80037dc:	d87b      	bhi.n	80038d6 <HAL_TIM_ConfigClockSource+0x16c>
 80037de:	2b60      	cmp	r3, #96	; 0x60
 80037e0:	d050      	beq.n	8003884 <HAL_TIM_ConfigClockSource+0x11a>
 80037e2:	2b60      	cmp	r3, #96	; 0x60
 80037e4:	d877      	bhi.n	80038d6 <HAL_TIM_ConfigClockSource+0x16c>
 80037e6:	2b50      	cmp	r3, #80	; 0x50
 80037e8:	d03c      	beq.n	8003864 <HAL_TIM_ConfigClockSource+0xfa>
 80037ea:	2b50      	cmp	r3, #80	; 0x50
 80037ec:	d873      	bhi.n	80038d6 <HAL_TIM_ConfigClockSource+0x16c>
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d058      	beq.n	80038a4 <HAL_TIM_ConfigClockSource+0x13a>
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d86f      	bhi.n	80038d6 <HAL_TIM_ConfigClockSource+0x16c>
 80037f6:	2b30      	cmp	r3, #48	; 0x30
 80037f8:	d064      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0x15a>
 80037fa:	2b30      	cmp	r3, #48	; 0x30
 80037fc:	d86b      	bhi.n	80038d6 <HAL_TIM_ConfigClockSource+0x16c>
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d060      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0x15a>
 8003802:	2b20      	cmp	r3, #32
 8003804:	d867      	bhi.n	80038d6 <HAL_TIM_ConfigClockSource+0x16c>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d05c      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0x15a>
 800380a:	2b10      	cmp	r3, #16
 800380c:	d05a      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0x15a>
 800380e:	e062      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16c>
=======
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d6:	d03e      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0xd4>
 80037d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037dc:	f200 8087 	bhi.w	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e4:	f000 8086 	beq.w	80038f4 <HAL_TIM_ConfigClockSource+0x172>
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ec:	d87f      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 80037ee:	2b70      	cmp	r3, #112	; 0x70
 80037f0:	d01a      	beq.n	8003828 <HAL_TIM_ConfigClockSource+0xa6>
 80037f2:	2b70      	cmp	r3, #112	; 0x70
 80037f4:	d87b      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 80037f6:	2b60      	cmp	r3, #96	; 0x60
 80037f8:	d050      	beq.n	800389c <HAL_TIM_ConfigClockSource+0x11a>
 80037fa:	2b60      	cmp	r3, #96	; 0x60
 80037fc:	d877      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 80037fe:	2b50      	cmp	r3, #80	; 0x50
 8003800:	d03c      	beq.n	800387c <HAL_TIM_ConfigClockSource+0xfa>
 8003802:	2b50      	cmp	r3, #80	; 0x50
 8003804:	d873      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d058      	beq.n	80038bc <HAL_TIM_ConfigClockSource+0x13a>
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d86f      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 800380e:	2b30      	cmp	r3, #48	; 0x30
 8003810:	d064      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0x15a>
 8003812:	2b30      	cmp	r3, #48	; 0x30
 8003814:	d86b      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 8003816:	2b20      	cmp	r3, #32
 8003818:	d060      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0x15a>
 800381a:	2b20      	cmp	r3, #32
 800381c:	d867      	bhi.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d05c      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0x15a>
 8003822:	2b10      	cmp	r3, #16
 8003824:	d05a      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0x15a>
 8003826:	e062      	b.n	80038ee <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6899      	ldr	r1, [r3, #8]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f000 f984 	bl	8003b2c <TIM_ETR_SetConfig>
=======
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	6899      	ldr	r1, [r3, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f000 f984 	bl	8003b44 <TIM_ETR_SetConfig>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003832:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	609a      	str	r2, [r3, #8]
      break;
 800383c:	e04f      	b.n	80038de <HAL_TIM_ConfigClockSource+0x174>
=======
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800384a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	609a      	str	r2, [r3, #8]
      break;
 8003854:	e04f      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6899      	ldr	r1, [r3, #8]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f000 f96d 	bl	8003b2c <TIM_ETR_SetConfig>
=======
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6899      	ldr	r1, [r3, #8]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f000 f96d 	bl	8003b44 <TIM_ETR_SetConfig>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< HEAD
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003860:	609a      	str	r2, [r3, #8]
      break;
 8003862:	e03c      	b.n	80038de <HAL_TIM_ConfigClockSource+0x174>
=======
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003878:	609a      	str	r2, [r3, #8]
      break;
 800387a:	e03c      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	461a      	mov	r2, r3
 8003872:	f000 f8e1 	bl	8003a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2150      	movs	r1, #80	; 0x50
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f93a 	bl	8003af6 <TIM_ITRx_SetConfig>
      break;
 8003882:	e02c      	b.n	80038de <HAL_TIM_ConfigClockSource+0x174>
=======
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	461a      	mov	r2, r3
 800388a:	f000 f8e1 	bl	8003a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2150      	movs	r1, #80	; 0x50
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f93a 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 800389a:	e02c      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	461a      	mov	r2, r3
 8003892:	f000 f900 	bl	8003a96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2160      	movs	r1, #96	; 0x60
 800389c:	4618      	mov	r0, r3
 800389e:	f000 f92a 	bl	8003af6 <TIM_ITRx_SetConfig>
      break;
 80038a2:	e01c      	b.n	80038de <HAL_TIM_ConfigClockSource+0x174>
=======
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f000 f900 	bl	8003aae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2160      	movs	r1, #96	; 0x60
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f92a 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 80038ba:	e01c      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	461a      	mov	r2, r3
 80038b2:	f000 f8c1 	bl	8003a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2140      	movs	r1, #64	; 0x40
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f91a 	bl	8003af6 <TIM_ITRx_SetConfig>
      break;
 80038c2:	e00c      	b.n	80038de <HAL_TIM_ConfigClockSource+0x174>
=======
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	461a      	mov	r2, r3
 80038ca:	f000 f8c1 	bl	8003a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2140      	movs	r1, #64	; 0x40
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 f91a 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 80038da:	e00c      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f000 f911 	bl	8003af6 <TIM_ITRx_SetConfig>
      break;
 80038d4:	e003      	b.n	80038de <HAL_TIM_ConfigClockSource+0x174>
=======
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f000 f911 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 80038ec:	e003      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
      break;
 80038da:	e000      	b.n	80038de <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <TIM_Base_SetConfig>:
=======
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
      break;
 80038f2:	e000      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <TIM_Base_SetConfig>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a40      	ldr	r2, [pc, #256]	; (8003a0c <TIM_Base_SetConfig+0x114>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d00f      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3d      	ldr	r2, [pc, #244]	; (8003a10 <TIM_Base_SetConfig+0x118>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00b      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3c      	ldr	r2, [pc, #240]	; (8003a14 <TIM_Base_SetConfig+0x11c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d007      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a3b      	ldr	r2, [pc, #236]	; (8003a18 <TIM_Base_SetConfig+0x120>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3a      	ldr	r2, [pc, #232]	; (8003a1c <TIM_Base_SetConfig+0x124>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d108      	bne.n	800394a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2f      	ldr	r2, [pc, #188]	; (8003a0c <TIM_Base_SetConfig+0x114>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02b      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003958:	d027      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2c      	ldr	r2, [pc, #176]	; (8003a10 <TIM_Base_SetConfig+0x118>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d023      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <TIM_Base_SetConfig+0x11c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01f      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <TIM_Base_SetConfig+0x120>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d01b      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a29      	ldr	r2, [pc, #164]	; (8003a1c <TIM_Base_SetConfig+0x124>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d017      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a28      	ldr	r2, [pc, #160]	; (8003a20 <TIM_Base_SetConfig+0x128>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <TIM_Base_SetConfig+0x12c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00f      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <TIM_Base_SetConfig+0x130>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00b      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <TIM_Base_SetConfig+0x134>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d007      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <TIM_Base_SetConfig+0x138>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d003      	beq.n	80039aa <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a23      	ldr	r2, [pc, #140]	; (8003a34 <TIM_Base_SetConfig+0x13c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d108      	bne.n	80039bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
=======
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392e:	d00f      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3d      	ldr	r2, [pc, #244]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3c      	ldr	r2, [pc, #240]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3a      	ldr	r2, [pc, #232]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2f      	ldr	r2, [pc, #188]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003970:	d027      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d023      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a2b      	ldr	r2, [pc, #172]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a2a      	ldr	r2, [pc, #168]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d017      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <TIM_Base_SetConfig+0x128>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <TIM_Base_SetConfig+0x12c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <TIM_Base_SetConfig+0x130>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <TIM_Base_SetConfig+0x134>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <TIM_Base_SetConfig+0x138>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <TIM_Base_SetConfig+0x13c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <TIM_Base_SetConfig+0x114>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_Base_SetConfig+0xf8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a0c      	ldr	r2, [pc, #48]	; (8003a1c <TIM_Base_SetConfig+0x124>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d103      	bne.n	80039f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0xf8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	615a      	str	r2, [r3, #20]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40010400 	.word	0x40010400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800
 8003a2c:	40001800 	.word	0x40001800
 8003a30:	40001c00 	.word	0x40001c00
 8003a34:	40002000 	.word	0x40002000

08003a38 <TIM_TI1_ConfigInputStage>:
=======
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40010400 	.word	0x40010400
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800
 8003a44:	40001800 	.word	0x40001800
 8003a48:	40001c00 	.word	0x40001c00
 8003a4c:	40002000 	.word	0x40002000

08003a50 <TIM_TI1_ConfigInputStage>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
=======
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f023 0201 	bic.w	r2, r3, #1
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f023 030a 	bic.w	r3, r3, #10
 8003a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	621a      	str	r2, [r3, #32]
}
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <TIM_TI2_ConfigInputStage>:
=======
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f023 030a 	bic.w	r3, r3, #10
 8003a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <TIM_TI2_ConfigInputStage>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8003a96:	b480      	push	{r7}
 8003a98:	b087      	sub	sp, #28
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
=======
 8003aae:	b480      	push	{r7}
 8003ab0:	b087      	sub	sp, #28
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0210 	bic.w	r2, r3, #16
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	031b      	lsls	r3, r3, #12
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ad2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <TIM_ITRx_SetConfig>:
=======
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f023 0210 	bic.w	r2, r3, #16
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	031b      	lsls	r3, r3, #12
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <TIM_ITRx_SetConfig>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8003af6:	b480      	push	{r7}
 8003af8:	b085      	sub	sp, #20
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
=======
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f043 0307 	orr.w	r3, r3, #7
 8003b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	609a      	str	r2, [r3, #8]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <TIM_ETR_SetConfig>:
=======
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f043 0307 	orr.w	r3, r3, #7
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	609a      	str	r2, [r3, #8]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <TIM_ETR_SetConfig>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	021a      	lsls	r2, r3, #8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	609a      	str	r2, [r3, #8]
}
 8003b60:	bf00      	nop
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
=======
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e05a      	b.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a21      	ldr	r2, [pc, #132]	; (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d022      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd0:	d01d      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1a      	ldr	r2, [pc, #104]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10c      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	609a      	str	r2, [r3, #8]
=======
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e05a      	b.n	8003c52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a21      	ldr	r2, [pc, #132]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d022      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be8:	d01d      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d018      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10c      	bne.n	8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40010400 	.word	0x40010400
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40001800 	.word	0x40001800

08003c64 <memset>:
 8003c64:	4402      	add	r2, r0
 8003c66:	4603      	mov	r3, r0
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d100      	bne.n	8003c6e <memset+0xa>
 8003c6c:	4770      	bx	lr
 8003c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c72:	e7f9      	b.n	8003c68 <memset+0x4>

08003c74 <__libc_init_array>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	4d0d      	ldr	r5, [pc, #52]	; (8003cac <__libc_init_array+0x38>)
 8003c78:	4c0d      	ldr	r4, [pc, #52]	; (8003cb0 <__libc_init_array+0x3c>)
 8003c7a:	1b64      	subs	r4, r4, r5
 8003c7c:	10a4      	asrs	r4, r4, #2
 8003c7e:	2600      	movs	r6, #0
 8003c80:	42a6      	cmp	r6, r4
 8003c82:	d109      	bne.n	8003c98 <__libc_init_array+0x24>
 8003c84:	4d0b      	ldr	r5, [pc, #44]	; (8003cb4 <__libc_init_array+0x40>)
 8003c86:	4c0c      	ldr	r4, [pc, #48]	; (8003cb8 <__libc_init_array+0x44>)
 8003c88:	f000 f818 	bl	8003cbc <_init>
 8003c8c:	1b64      	subs	r4, r4, r5
 8003c8e:	10a4      	asrs	r4, r4, #2
 8003c90:	2600      	movs	r6, #0
 8003c92:	42a6      	cmp	r6, r4
 8003c94:	d105      	bne.n	8003ca2 <__libc_init_array+0x2e>
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9c:	4798      	blx	r3
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	e7ee      	b.n	8003c80 <__libc_init_array+0xc>
 8003ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca6:	4798      	blx	r3
 8003ca8:	3601      	adds	r6, #1
 8003caa:	e7f2      	b.n	8003c92 <__libc_init_array+0x1e>
 8003cac:	08003cf4 	.word	0x08003cf4
 8003cb0:	08003cf4 	.word	0x08003cf4
 8003cb4:	08003cf4 	.word	0x08003cf4
 8003cb8:	08003cf8 	.word	0x08003cf8

08003cbc <_init>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr

08003cc8 <_fini>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr
=======
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40010400 	.word	0x40010400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40001800 	.word	0x40001800

08003c7c <memset>:
 8003c7c:	4402      	add	r2, r0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d100      	bne.n	8003c86 <memset+0xa>
 8003c84:	4770      	bx	lr
 8003c86:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8a:	e7f9      	b.n	8003c80 <memset+0x4>

08003c8c <__libc_init_array>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4d0d      	ldr	r5, [pc, #52]	; (8003cc4 <__libc_init_array+0x38>)
 8003c90:	4c0d      	ldr	r4, [pc, #52]	; (8003cc8 <__libc_init_array+0x3c>)
 8003c92:	1b64      	subs	r4, r4, r5
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	2600      	movs	r6, #0
 8003c98:	42a6      	cmp	r6, r4
 8003c9a:	d109      	bne.n	8003cb0 <__libc_init_array+0x24>
 8003c9c:	4d0b      	ldr	r5, [pc, #44]	; (8003ccc <__libc_init_array+0x40>)
 8003c9e:	4c0c      	ldr	r4, [pc, #48]	; (8003cd0 <__libc_init_array+0x44>)
 8003ca0:	f000 f818 	bl	8003cd4 <_init>
 8003ca4:	1b64      	subs	r4, r4, r5
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	2600      	movs	r6, #0
 8003caa:	42a6      	cmp	r6, r4
 8003cac:	d105      	bne.n	8003cba <__libc_init_array+0x2e>
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb4:	4798      	blx	r3
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7ee      	b.n	8003c98 <__libc_init_array+0xc>
 8003cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbe:	4798      	blx	r3
 8003cc0:	3601      	adds	r6, #1
 8003cc2:	e7f2      	b.n	8003caa <__libc_init_array+0x1e>
 8003cc4:	08003d0c 	.word	0x08003d0c
 8003cc8:	08003d0c 	.word	0x08003d0c
 8003ccc:	08003d0c 	.word	0x08003d0c
 8003cd0:	08003d10 	.word	0x08003d10

08003cd4 <_init>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	bf00      	nop
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr

08003ce0 <_fini>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr
>>>>>>> parent of b00526e (setup structure and function prototypes for state machine)
