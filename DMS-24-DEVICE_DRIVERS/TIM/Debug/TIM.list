
TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bdc  08003bdc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be4  08003be4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000419c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200041a8  200041a8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d772  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022ef  00000000  00000000  0002d7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da0  00000000  00000000  0002fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a79  00000000  00000000  00030880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022dc8  00000000  00000000  000312f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010185  00000000  00000000  000540c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d908f  00000000  00000000  00064246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003944  00000000  00000000  0013d2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00140c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b54 	.word	0x08003b54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b54 	.word	0x08003b54

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <PDP_PedealAgreement>:
  * @brief  Pedal Agreement Check. Latches until throttle pedal is released
  * @retval 0 no fault
  * @retval 1 PAG_fault, both pedals currently active
  * @retval 2 PAG_fault, waiting for latch to reset
  */
PDP_StatusTypeDef PDP_PedealAgreement(uint32_t apps, uint32_t fbps){ 		// PAG_fault active
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	if (apps > APPS_PAG_THRESHOLD && fbps > FBPS_PAG_THRESHOLD){
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b6b      	cmp	r3, #107	; 0x6b
 80004d2:	d909      	bls.n	80004e8 <PDP_PedealAgreement+0x24>
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	2b13      	cmp	r3, #19
 80004d8:	d906      	bls.n	80004e8 <PDP_PedealAgreement+0x24>
		PAG_fault = PDP_ERROR;
 80004da:	4b17      	ldr	r3, [pc, #92]	; (8000538 <PDP_PedealAgreement+0x74>)
 80004dc:	2201      	movs	r2, #1
 80004de:	701a      	strb	r2, [r3, #0]
		return PAG_fault;
 80004e0:	4b15      	ldr	r3, [pc, #84]	; (8000538 <PDP_PedealAgreement+0x74>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	e020      	b.n	800052a <PDP_PedealAgreement+0x66>
	}

	else if (PAG_fault != PDP_OKAY && apps < APPS_PAG_RESET_THRESHOLD){		// Check if latch can be reset
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <PDP_PedealAgreement+0x74>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d009      	beq.n	8000506 <PDP_PedealAgreement+0x42>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b12      	cmp	r3, #18
 80004f6:	d806      	bhi.n	8000506 <PDP_PedealAgreement+0x42>
		PAG_fault = 0;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <PDP_PedealAgreement+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
		return PAG_fault;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <PDP_PedealAgreement+0x74>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	e011      	b.n	800052a <PDP_PedealAgreement+0x66>
	}
	else if(PAG_fault != PDP_OKAY && apps > APPS_PAG_THRESHOLD){ 			// Waiting for latch to reset fault
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <PDP_PedealAgreement+0x74>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d009      	beq.n	8000524 <PDP_PedealAgreement+0x60>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b6b      	cmp	r3, #107	; 0x6b
 8000514:	d906      	bls.n	8000524 <PDP_PedealAgreement+0x60>
		PAG_fault = PDP_RESET_LATCH;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <PDP_PedealAgreement+0x74>)
 8000518:	2202      	movs	r2, #2
 800051a:	701a      	strb	r2, [r3, #0]
		return PAG_fault;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <PDP_PedealAgreement+0x74>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	e002      	b.n	800052a <PDP_PedealAgreement+0x66>
	}
	else{
		return PAG_fault;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <PDP_PedealAgreement+0x74>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
	}
}
 800052a:	4618      	mov	r0, r3
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028

0800053c <PDP_AppsAgreement>:
  * @brief  APPS Agreement Check. Checks if both APPS sensors are within
  * %error threshold of each other.
  * @retval 0 no fault
  * @retval 1 AAC_fault, difference between pedal sensors > %threshold
  */
PDP_StatusTypeDef PDP_AppsAgreement (uint32_t apps1, uint32_t apps2){
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	float absDif = abs((int)apps1 - (int)apps2);
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	bfb8      	it	lt
 8000550:	425b      	neglt	r3, r3
 8000552:	ee07 3a90 	vmov	s15, r3
 8000556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800055a:	edc7 7a03 	vstr	s15, [r7, #12]
	float percentDifference = (absDif / ((apps1 + apps2) / 2)) * 100; 		// Calculating percent Difference
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	4413      	add	r3, r2
 8000564:	085b      	lsrs	r3, r3, #1
 8000566:	ee07 3a90 	vmov	s15, r3
 800056a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800056e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000576:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80005bc <PDP_AppsAgreement+0x80>
 800057a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800057e:	edc7 7a02 	vstr	s15, [r7, #8]

	if (percentDifference >= APPS_AAC_ERROR_THRESHOLD){
 8000582:	edd7 7a02 	vldr	s15, [r7, #8]
 8000586:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800058a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800058e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000592:	db06      	blt.n	80005a2 <PDP_AppsAgreement+0x66>
		AAC_fault = PDP_ERROR;
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <PDP_AppsAgreement+0x84>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
		return AAC_fault;
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <PDP_AppsAgreement+0x84>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	e005      	b.n	80005ae <PDP_AppsAgreement+0x72>
	}
	else
	{
		AAC_fault = PDP_OKAY;
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <PDP_AppsAgreement+0x84>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
		return AAC_fault;
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <PDP_AppsAgreement+0x84>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
	}

}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	42c80000 	.word	0x42c80000
 80005c0:	20000029 	.word	0x20000029

080005c4 <TIM_ConvertValueLinearApprox>:
/**
 * @brief Throttle Input Module
 * @return Throttle value scaled to desired map
 */
uint16_t TIM_ConvertValueLinearApprox(uint16_t inputValue)
{
 80005c4:	b4b0      	push	{r4, r5, r7}
 80005c6:	b09f      	sub	sp, #124	; 0x7c
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
	float xarray[] = {0.0f, 25.6f, 51.2f, 76.8f, 102.4f, 128.0f, 153.6f, 179.2f, 204.8f, 230.4f, 256.0f};	// NOTE: The last value on this array MUST be larger then the largest possible ADC input value
 80005ce:	4b43      	ldr	r3, [pc, #268]	; (80006dc <TIM_ConvertValueLinearApprox+0x118>)
 80005d0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80005d4:	461d      	mov	r5, r3
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float yarray[] = {0.0f, 102.4f, 307.2f, 512.0f, 819.2f, 1228.8f, 1638.4f, 2048.0f, 2457.6f, 3072.0f, 4096.0f};
 80005e6:	4b3e      	ldr	r3, [pc, #248]	; (80006e0 <TIM_ConvertValueLinearApprox+0x11c>)
 80005e8:	f107 0408 	add.w	r4, r7, #8
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	float x0 = 0.0f, x1 = 0.0f, y0 = 0.0f, y1 = 0.0f;
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	673b      	str	r3, [r7, #112]	; 0x70
 8000604:	f04f 0300 	mov.w	r3, #0
 8000608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000610:	f04f 0300 	mov.w	r3, #0
 8000614:	667b      	str	r3, [r7, #100]	; 0x64

	int i = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	677b      	str	r3, [r7, #116]	; 0x74
	while (xarray[i] < inputValue && i < 11) { // TODO: Improve the safety of this function
 800061a:	e002      	b.n	8000622 <TIM_ConvertValueLinearApprox+0x5e>
		i++;
 800061c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800061e:	3301      	adds	r3, #1
 8000620:	677b      	str	r3, [r7, #116]	; 0x74
	while (xarray[i] < inputValue && i < 11) { // TODO: Improve the safety of this function
 8000622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	3378      	adds	r3, #120	; 0x78
 8000628:	443b      	add	r3, r7
 800062a:	3b44      	subs	r3, #68	; 0x44
 800062c:	ed93 7a00 	vldr	s14, [r3]
 8000630:	88fb      	ldrh	r3, [r7, #6]
 8000632:	ee07 3a90 	vmov	s15, r3
 8000636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800063a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800063e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000642:	d502      	bpl.n	800064a <TIM_ConvertValueLinearApprox+0x86>
 8000644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000646:	2b0a      	cmp	r3, #10
 8000648:	dde8      	ble.n	800061c <TIM_ConvertValueLinearApprox+0x58>
	}
	x0 = xarray[i - 1];
 800064a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800064c:	3b01      	subs	r3, #1
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	3378      	adds	r3, #120	; 0x78
 8000652:	443b      	add	r3, r7
 8000654:	3b44      	subs	r3, #68	; 0x44
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	673b      	str	r3, [r7, #112]	; 0x70
	x1 = xarray[i];
 800065a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	3378      	adds	r3, #120	; 0x78
 8000660:	443b      	add	r3, r7
 8000662:	3b44      	subs	r3, #68	; 0x44
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	66fb      	str	r3, [r7, #108]	; 0x6c
	y0 = yarray[i - 1];
 8000668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800066a:	3b01      	subs	r3, #1
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	3378      	adds	r3, #120	; 0x78
 8000670:	443b      	add	r3, r7
 8000672:	3b70      	subs	r3, #112	; 0x70
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	66bb      	str	r3, [r7, #104]	; 0x68
	y1 = yarray[i];
 8000678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3378      	adds	r3, #120	; 0x78
 800067e:	443b      	add	r3, r7
 8000680:	3b70      	subs	r3, #112	; 0x70
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	667b      	str	r3, [r7, #100]	; 0x64

	uint16_t outputValue =  (y1 + (inputValue - x1) * ((y1 - y0) / (x1 - x0))); 	// Linear Approximation, On a scale of 1-100
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	ee07 3a90 	vmov	s15, r3
 800068c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000690:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000698:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800069c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80006a0:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80006a4:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80006a8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80006ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80006b0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80006b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006b8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80006bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006c4:	ee17 3a90 	vmov	r3, s15
 80006c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	//outputValue = outputValue / 30.3030f * 4096 / 3.3; 								// Convert Value from 1-100 scale to 1-4096
	return outputValue;
 80006cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	377c      	adds	r7, #124	; 0x7c
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bcb0      	pop	{r4, r5, r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	08003b6c 	.word	0x08003b6c
 80006e0:	08003b98 	.word	0x08003b98

080006e4 <TIM_DeInterleave>:
  * @note we should look at improving this function so its scalable for more channels
  * and to improve efficiency. We may also want to pass a pointer to the struct, rather then
  * using global variables
  * @retval None
  */
void TIM_DeInterleave(adcBufferChannel_t *adcBuf, uint16_t unsortedBuf[]){
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	int k = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
	for (int i = 0;  i < ADC_BUFFER_LEN; i++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	e021      	b.n	800073c <TIM_DeInterleave+0x58>
		// if i is divisible by two, add it to the adcBPS buffer, otherwise add it
		// to the adcThottle buffer
		if (i % 2 == 0) {
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d10d      	bne.n	800071e <TIM_DeInterleave+0x3a>
			adcBuf->adcBPS_buf[k] = unsortedBuf[i];
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	4413      	add	r3, r2
 800070a:	8819      	ldrh	r1, [r3, #0]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	460a      	mov	r2, r1
 800071a:	805a      	strh	r2, [r3, #2]
 800071c:	e00b      	b.n	8000736 <TIM_DeInterleave+0x52>
		}
		else {
			adcBuf->adcThrottle_buf[k] = unsortedBuf[i];
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	4413      	add	r3, r2
 8000726:	8819      	ldrh	r1, [r3, #0]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k++;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	3301      	adds	r3, #1
 8000734:	60fb      	str	r3, [r7, #12]
	for (int i = 0;  i < ADC_BUFFER_LEN; i++) {
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	3301      	adds	r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000742:	dbd9      	blt.n	80006f8 <TIM_DeInterleave+0x14>
		}
	}
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <TIM_OutputDAC>:
  * @brief  Uses DAC to output a 0-3.3V signal to the motor controller.
  *	Note, the signal is amplified to a 0-5V range using a hardware amp.
  * Motor Data sheet: https://wiki.neweagle.net/docs/Rinehart/PM100_User_Manual_3_2011.pdf
  * @retval None
  */
void TIM_OutputDAC(uint16_t DAC_Output){
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	80fb      	strh	r3, [r7, #6]
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_Output);
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <TIM_OutputDAC+0x20>)
 8000766:	f001 fce4 	bl	8002132 <HAL_DAC_SetValue>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20004100 	.word	0x20004100

08000778 <TIM_Init>:
/**
  * @brief  Must be used to initialize ADC with DMA
  * @param ADC_HandleTypeDef
  * @retval None
  */
void TIM_Init(ADC_HandleTypeDef *TIM_hadc1){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(TIM_hadc1, (uint32_t*)adc_buf, ADC_BUFFER_LEN);
 8000780:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000784:	4903      	ldr	r1, [pc, #12]	; (8000794 <TIM_Init+0x1c>)
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 fe98 	bl	80014bc <HAL_ADC_Start_DMA>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000002c 	.word	0x2000002c

08000798 <HAL_ADC_ConvHalfCpltCallback>:

/**
  * @brief  This function is executed when half the TIM buffer is full
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);	// DEBUG LED TOGGLE FOR TIME PROFILE
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a6:	4830      	ldr	r0, [pc, #192]	; (8000868 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 80007a8:	f002 fa44 	bl	8002c34 <HAL_GPIO_WritePin>
	TIM_DeInterleave(&adcBufferChannel, adc_buf);
 80007ac:	492f      	ldr	r1, [pc, #188]	; (800086c <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 80007ae:	4830      	ldr	r0, [pc, #192]	; (8000870 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 80007b0:	f7ff ff98 	bl	80006e4 <TIM_DeInterleave>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);	// DEBUG LED TOGGLE FOR TIME PROFILE
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ba:	482b      	ldr	r0, [pc, #172]	; (8000868 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 80007bc:	f002 fa3a 	bl	8002c34 <HAL_GPIO_WritePin>
	// Average the first half of the buffer
	// adcBufferChannel.adcThrottle =	TIM_Average(adcBufferChannel.adcThrottle_buf); 	// TODO
	// adcBufferChannel.adcBPS 	 =	TIM_Average(adcBufferChannel.adcBPS_buf);			// TODO

	// Plausibility Checks
	PDP_StatusTypeDef PAG = PDP_PedealAgreement(adcBufferChannel.adcThrottle, adcBufferChannel.adcBPS);
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b29      	ldr	r3, [pc, #164]	; (8000870 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 80007cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80007d0:	885b      	ldrh	r3, [r3, #2]
 80007d2:	4619      	mov	r1, r3
 80007d4:	4610      	mov	r0, r2
 80007d6:	f7ff fe75 	bl	80004c4 <PDP_PedealAgreement>
 80007da:	4603      	mov	r3, r0
 80007dc:	75fb      	strb	r3, [r7, #23]
	switch (PAG){
 80007de:	7dfb      	ldrb	r3, [r7, #23]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d015      	beq.n	8000810 <HAL_ADC_ConvHalfCpltCallback+0x78>
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	dc15      	bgt.n	8000814 <HAL_ADC_ConvHalfCpltCallback+0x7c>
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <HAL_ADC_ConvHalfCpltCallback+0x5a>
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d013      	beq.n	8000818 <HAL_ADC_ConvHalfCpltCallback+0x80>
		case PDP_ERROR:			// TODO add driver notifications and CAN logging for fault cases
			break;
		case PDP_RESET_LATCH:	// TODO add driver notifications and CAN logging for fault cases
			break;
		default:
			break;
 80007f0:	e010      	b.n	8000814 <HAL_ADC_ConvHalfCpltCallback+0x7c>
			uint32_t motorControllerOutputVoltage = TIM_ConvertValueLinearApprox(adcBufferChannel.adcThrottle);
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fee2 	bl	80005c4 <TIM_ConvertValueLinearApprox>
 8000800:	4603      	mov	r3, r0
 8000802:	613b      	str	r3, [r7, #16]
			TIM_OutputDAC(motorControllerOutputVoltage);
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	b29b      	uxth	r3, r3
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ffa3 	bl	8000754 <TIM_OutputDAC>
			break;
 800080e:	e004      	b.n	800081a <HAL_ADC_ConvHalfCpltCallback+0x82>
			break;
 8000810:	bf00      	nop
 8000812:	e002      	b.n	800081a <HAL_ADC_ConvHalfCpltCallback+0x82>
			break;
 8000814:	bf00      	nop
 8000816:	e000      	b.n	800081a <HAL_ADC_ConvHalfCpltCallback+0x82>
			break;
 8000818:	bf00      	nop
	}
	// TEST CODE FOR AAC

	PDP_StatusTypeDef AAG = PDP_AppsAgreement(adcBufferChannel.adcThrottle, adcBufferChannel.adcBPS);
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 800081c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 8000826:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800082a:	885b      	ldrh	r3, [r3, #2]
 800082c:	4619      	mov	r1, r3
 800082e:	4610      	mov	r0, r2
 8000830:	f7ff fe84 	bl	800053c <PDP_AppsAgreement>
 8000834:	4603      	mov	r3, r0
 8000836:	73fb      	strb	r3, [r7, #15]
	switch (AAG){
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <HAL_ADC_ConvHalfCpltCallback+0xac>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d007      	beq.n	8000852 <HAL_ADC_ConvHalfCpltCallback+0xba>
			break;
		case PDP_ERROR:			// TODO add driver notifications and CAN logging for fault cases
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
			break;
		default:
			break;
 8000842:	e00d      	b.n	8000860 <HAL_ADC_ConvHalfCpltCallback+0xc8>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084a:	4807      	ldr	r0, [pc, #28]	; (8000868 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 800084c:	f002 f9f2 	bl	8002c34 <HAL_GPIO_WritePin>
			break;
 8000850:	e006      	b.n	8000860 <HAL_ADC_ConvHalfCpltCallback+0xc8>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 800085a:	f002 f9eb 	bl	8002c34 <HAL_GPIO_WritePin>
			break;
 800085e:	bf00      	nop
	}

	// TEST CODE END

	// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);	// Flashing this LED lets us monitor the state
}															// of the buffer using the oscilloscope
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40020c00 	.word	0x40020c00
 800086c:	2000002c 	.word	0x2000002c
 8000870:	2000202c 	.word	0x2000202c

08000874 <HAL_ADC_ConvCpltCallback>:

/**
  * @brief  This function is executed when  TIM buffer is completely full
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 fd3c 	bl	8001308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f832 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 fa00 	bl	8000c98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000898:	f000 f9de 	bl	8000c58 <MX_DMA_Init>
  MX_TIM1_Init();
 800089c:	f000 f956 	bl	8000b4c <MX_TIM1_Init>
  MX_CAN1_Init();
 80008a0:	f000 f8f4 	bl	8000a8c <MX_CAN1_Init>
  MX_ADC1_Init();
 80008a4:	f000 f892 	bl	80009cc <MX_ADC1_Init>
  MX_DAC_Init();
 80008a8:	f000 f926 	bl	8000af8 <MX_DAC_Init>
  MX_TIM6_Init();
 80008ac:	f000 f99e 	bl	8000bec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <main+0x64>)
 80008b8:	f002 f9bc 	bl	8002c34 <HAL_GPIO_WritePin>
  TIM_Init(&hadc1);
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <main+0x68>)
 80008be:	f7ff ff5b 	bl	8000778 <TIM_Init>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <main+0x64>)
 80008ca:	f002 f9b3 	bl	8002c34 <HAL_GPIO_WritePin>

  HAL_DAC_Start(&hdac,DAC1_CHANNEL_1);
 80008ce:	2100      	movs	r1, #0
 80008d0:	4808      	ldr	r0, [pc, #32]	; (80008f4 <main+0x6c>)
 80008d2:	f001 fbdc 	bl	800208e <HAL_DAC_Start>
  while (1)
  {

	  //int voltage = TIM_ConvertValue(128);
	  //TIM_OutputDAC(voltage);
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80008d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <main+0x64>)
 80008dc:	f002 f9c3 	bl	8002c66 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80008e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e4:	f000 fd82 	bl	80013ec <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80008e8:	e7f5      	b.n	80008d6 <main+0x4e>
 80008ea:	bf00      	nop
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	20004030 	.word	0x20004030
 80008f4:	20004100 	.word	0x20004100

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2230      	movs	r2, #48	; 0x30
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f003 f8f8 	bl	8003afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <SystemClock_Config+0xcc>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a27      	ldr	r2, [pc, #156]	; (80009c4 <SystemClock_Config+0xcc>)
 8000926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <SystemClock_Config+0xcc>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <SystemClock_Config+0xd0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <SystemClock_Config+0xd0>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <SystemClock_Config+0xd0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000958:	2301      	movs	r3, #1
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095c:	2310      	movs	r3, #16
 800095e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000960:	2302      	movs	r3, #2
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000968:	2308      	movs	r3, #8
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000974:	2307      	movs	r3, #7
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4618      	mov	r0, r3
 800097e:	f002 f98d 	bl	8002c9c <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000988:	f000 fae4 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	230f      	movs	r3, #15
 800098e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	2302      	movs	r3, #2
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2102      	movs	r1, #2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fbee 	bl	800318c <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009b6:	f000 facd 	bl	8000f54 <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3750      	adds	r7, #80	; 0x50
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40007000 	.word	0x40007000

080009cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009d2:	463b      	mov	r3, r7
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <MX_ADC1_Init+0xb4>)
 80009e0:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <MX_ADC1_Init+0xb8>)
 80009e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_ADC1_Init+0xb4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80009ea:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <MX_ADC1_Init+0xb4>)
 80009ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <MX_ADC1_Init+0xb4>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_ADC1_Init+0xb4>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <MX_ADC1_Init+0xb4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_ADC1_Init+0xb4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_ADC1_Init+0xb4>)
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <MX_ADC1_Init+0xbc>)
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_ADC1_Init+0xb4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_ADC1_Init+0xb4>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_ADC1_Init+0xb4>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_ADC1_Init+0xb4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a2c:	4814      	ldr	r0, [pc, #80]	; (8000a80 <MX_ADC1_Init+0xb4>)
 8000a2e:	f000 fd01 	bl	8001434 <HAL_ADC_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a38:	f000 fa8c 	bl	8000f54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_ADC1_Init+0xb4>)
 8000a4e:	f000 fe4f 	bl	80016f0 <HAL_ADC_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a58:	f000 fa7c 	bl	8000f54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_ADC1_Init+0xb4>)
 8000a6a:	f000 fe41 	bl	80016f0 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a74:	f000 fa6e 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20004030 	.word	0x20004030
 8000a84:	40012000 	.word	0x40012000
 8000a88:	0f000001 	.word	0x0f000001

08000a8c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000a92:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <MX_CAN1_Init+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000a98:	2210      	movs	r2, #16
 8000a9a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000aaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_CAN1_Init+0x64>)
 8000adc:	f001 f8a8 	bl	8001c30 <HAL_CAN_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000ae6:	f000 fa35 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200040d8 	.word	0x200040d8
 8000af4:	40006400 	.word	0x40006400

08000af8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000afe:	463b      	mov	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_DAC_Init+0x4c>)
 8000b08:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <MX_DAC_Init+0x50>)
 8000b0a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_DAC_Init+0x4c>)
 8000b0e:	f001 fa9c 	bl	800204a <HAL_DAC_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b18:	f000 fa1c 	bl	8000f54 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <MX_DAC_Init+0x4c>)
 8000b2c:	f001 fb26 	bl	800217c <HAL_DAC_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b36:	f000 fa0d 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20004100 	.word	0x20004100
 8000b48:	40007400 	.word	0x40007400

08000b4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	463b      	mov	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_TIM1_Init+0x98>)
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <MX_TIM1_Init+0x9c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <MX_TIM1_Init+0x98>)
 8000b70:	223f      	movs	r2, #63	; 0x3f
 8000b72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <MX_TIM1_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_TIM1_Init+0x98>)
 8000b7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_TIM1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_TIM1_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_TIM1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b94:	4813      	ldr	r0, [pc, #76]	; (8000be4 <MX_TIM1_Init+0x98>)
 8000b96:	f002 fce5 	bl	8003564 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ba0:	f000 f9d8 	bl	8000f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_TIM1_Init+0x98>)
 8000bb2:	f002 fd26 	bl	8003602 <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000bbc:	f000 f9ca 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_TIM1_Init+0x98>)
 8000bce:	f002 ff19 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bd8:	f000 f9bc 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20004114 	.word	0x20004114
 8000be8:	40010000 	.word	0x40010000

08000bec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000bfc:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <MX_TIM6_Init+0x68>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c1c:	f002 fca2 	bl	8003564 <HAL_TIM_Base_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000c26:	f000 f995 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c38:	f002 fee4 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000c42:	f000 f987 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000415c 	.word	0x2000415c
 8000c54:	40001000 	.word	0x40001000

08000c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_DMA_Init+0x3c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2038      	movs	r0, #56	; 0x38
 8000c80:	f001 f9ad 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c84:	2038      	movs	r0, #56	; 0x38
 8000c86:	f001 f9c6 	bl	8002016 <HAL_NVIC_EnableIRQ>

}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	4ba2      	ldr	r3, [pc, #648]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4aa1      	ldr	r2, [pc, #644]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000cb8:	f043 0310 	orr.w	r3, r3, #16
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b9f      	ldr	r3, [pc, #636]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	4b9b      	ldr	r3, [pc, #620]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a9a      	ldr	r2, [pc, #616]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b98      	ldr	r3, [pc, #608]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b94      	ldr	r3, [pc, #592]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a93      	ldr	r2, [pc, #588]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b91      	ldr	r3, [pc, #580]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b8d      	ldr	r3, [pc, #564]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a8c      	ldr	r2, [pc, #560]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b8a      	ldr	r3, [pc, #552]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b86      	ldr	r3, [pc, #536]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a85      	ldr	r2, [pc, #532]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b83      	ldr	r3, [pc, #524]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b7f      	ldr	r3, [pc, #508]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a7e      	ldr	r2, [pc, #504]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b7c      	ldr	r3, [pc, #496]	; (8000f3c <MX_GPIO_Init+0x2a4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000d56:	2200      	movs	r2, #0
 8000d58:	f643 7188 	movw	r1, #16264	; 0x3f88
 8000d5c:	4878      	ldr	r0, [pc, #480]	; (8000f40 <MX_GPIO_Init+0x2a8>)
 8000d5e:	f001 ff69 	bl	8002c34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2101      	movs	r1, #1
 8000d66:	4877      	ldr	r0, [pc, #476]	; (8000f44 <MX_GPIO_Init+0x2ac>)
 8000d68:	f001 ff64 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d72:	4875      	ldr	r0, [pc, #468]	; (8000f48 <MX_GPIO_Init+0x2b0>)
 8000d74:	f001 ff5e 	bl	8002c34 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 PE8 PE9
                           PE10 PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000d78:	f643 7388 	movw	r3, #16264	; 0x3f88
 8000d7c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	486b      	ldr	r0, [pc, #428]	; (8000f40 <MX_GPIO_Init+0x2a8>)
 8000d92:	f001 fdb3 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4865      	ldr	r0, [pc, #404]	; (8000f44 <MX_GPIO_Init+0x2ac>)
 8000dae:	f001 fda5 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000db2:	2308      	movs	r3, #8
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	485d      	ldr	r0, [pc, #372]	; (8000f44 <MX_GPIO_Init+0x2ac>)
 8000dce:	f001 fd95 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dd6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	4859      	ldr	r0, [pc, #356]	; (8000f4c <MX_GPIO_Init+0x2b4>)
 8000de8:	f001 fd88 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dec:	23e0      	movs	r3, #224	; 0xe0
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfc:	2305      	movs	r3, #5
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4851      	ldr	r0, [pc, #324]	; (8000f4c <MX_GPIO_Init+0x2b4>)
 8000e08:	f001 fd78 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	484c      	ldr	r0, [pc, #304]	; (8000f50 <MX_GPIO_Init+0x2b8>)
 8000e20:	f001 fd6c 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4841      	ldr	r0, [pc, #260]	; (8000f40 <MX_GPIO_Init+0x2a8>)
 8000e3c:	f001 fd5e 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e52:	2305      	movs	r3, #5
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	483c      	ldr	r0, [pc, #240]	; (8000f50 <MX_GPIO_Init+0x2b8>)
 8000e5e:	f001 fd4d 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e62:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e66:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4833      	ldr	r0, [pc, #204]	; (8000f48 <MX_GPIO_Init+0x2b0>)
 8000e7c:	f001 fd3e 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e80:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e92:	2306      	movs	r3, #6
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4829      	ldr	r0, [pc, #164]	; (8000f44 <MX_GPIO_Init+0x2ac>)
 8000e9e:	f001 fd2d 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4825      	ldr	r0, [pc, #148]	; (8000f4c <MX_GPIO_Init+0x2b4>)
 8000eb8:	f001 fd20 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ebc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ece:	230a      	movs	r3, #10
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_GPIO_Init+0x2b4>)
 8000eda:	f001 fd0f 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ede:	2320      	movs	r3, #32
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4815      	ldr	r0, [pc, #84]	; (8000f48 <MX_GPIO_Init+0x2b0>)
 8000ef2:	f001 fd03 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ef6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efc:	2312      	movs	r3, #18
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	480f      	ldr	r0, [pc, #60]	; (8000f50 <MX_GPIO_Init+0x2b8>)
 8000f14:	f001 fcf2 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_GPIO_Init+0x2a8>)
 8000f2e:	f001 fce5 	bl	80028fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f32:	bf00      	nop
 8000f34:	3730      	adds	r7, #48	; 0x30
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_MspInit+0x4c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f9e:	2007      	movs	r0, #7
 8000fa0:	f001 f812 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a2f      	ldr	r2, [pc, #188]	; (800108c <HAL_ADC_MspInit+0xdc>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d157      	bne.n	8001082 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <HAL_ADC_MspInit+0xe0>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a2d      	ldr	r2, [pc, #180]	; (8001090 <HAL_ADC_MspInit+0xe0>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <HAL_ADC_MspInit+0xe0>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <HAL_ADC_MspInit+0xe0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a26      	ldr	r2, [pc, #152]	; (8001090 <HAL_ADC_MspInit+0xe0>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <HAL_ADC_MspInit+0xe0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800100a:	2306      	movs	r3, #6
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	481d      	ldr	r0, [pc, #116]	; (8001094 <HAL_ADC_MspInit+0xe4>)
 800101e:	f001 fc6d 	bl	80028fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 8001024:	4a1d      	ldr	r2, [pc, #116]	; (800109c <HAL_ADC_MspInit+0xec>)
 8001026:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 800103c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001040:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 8001044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001048:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 800104c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001050:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 8001054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001058:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001066:	480c      	ldr	r0, [pc, #48]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 8001068:	f001 f8d8 	bl	800221c <HAL_DMA_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001072:	f7ff ff6f 	bl	8000f54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 800107a:	639a      	str	r2, [r3, #56]	; 0x38
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <HAL_ADC_MspInit+0xe8>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40012000 	.word	0x40012000
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	20004078 	.word	0x20004078
 800109c:	40026410 	.word	0x40026410

080010a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_CAN_MspInit+0x84>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12b      	bne.n	800111a <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_CAN_MspInit+0x88>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_CAN_MspInit+0x88>)
 80010cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_CAN_MspInit+0x88>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_CAN_MspInit+0x88>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_CAN_MspInit+0x88>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_CAN_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010fa:	2303      	movs	r3, #3
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800110a:	2309      	movs	r3, #9
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_CAN_MspInit+0x8c>)
 8001116:	f001 fbf1 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40006400 	.word	0x40006400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020c00 	.word	0x40020c00

08001130 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_DAC_MspInit+0x7c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d127      	bne.n	80011a2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_DAC_MspInit+0x80>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_DAC_MspInit+0x80>)
 800115c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_DAC_MspInit+0x80>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_DAC_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_DAC_MspInit+0x80>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_DAC_MspInit+0x80>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800118a:	2310      	movs	r3, #16
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_DAC_MspInit+0x84>)
 800119e:	f001 fbad 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40007400 	.word	0x40007400
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000

080011b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a15      	ldr	r2, [pc, #84]	; (800121c <HAL_TIM_Base_MspInit+0x64>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d10e      	bne.n	80011e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_TIM_Base_MspInit+0x68>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a13      	ldr	r2, [pc, #76]	; (8001220 <HAL_TIM_Base_MspInit+0x68>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_TIM_Base_MspInit+0x68>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80011e6:	e012      	b.n	800120e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <HAL_TIM_Base_MspInit+0x6c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10d      	bne.n	800120e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_TIM_Base_MspInit+0x68>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a09      	ldr	r2, [pc, #36]	; (8001220 <HAL_TIM_Base_MspInit+0x68>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <HAL_TIM_Base_MspInit+0x68>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40010000 	.word	0x40010000
 8001220:	40023800 	.word	0x40023800
 8001224:	40001000 	.word	0x40001000

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler+0x4>

08001246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f000 f89a 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <DMA2_Stream0_IRQHandler+0x10>)
 8001282:	f001 f8d1 	bl	8002428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20004078 	.word	0x20004078

08001290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <SystemInit+0x20>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <SystemInit+0x20>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b8:	480d      	ldr	r0, [pc, #52]	; (80012f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ba:	490e      	ldr	r1, [pc, #56]	; (80012f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012bc:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012d0:	4c0b      	ldr	r4, [pc, #44]	; (8001300 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012de:	f7ff ffd7 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e2:	f002 fc13 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e6:	f7ff facf 	bl	8000888 <main>
  bx  lr    
 80012ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012f8:	08003bec 	.word	0x08003bec
  ldr r2, =_sbss
 80012fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001300:	200041a8 	.word	0x200041a8

08001304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC_IRQHandler>
	...

08001308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_Init+0x40>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <HAL_Init+0x40>)
 8001312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001316:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_Init+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_Init+0x40>)
 800131e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001322:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_Init+0x40>)
 800132a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001330:	2003      	movs	r0, #3
 8001332:	f000 fe49 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f808 	bl	800134c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133c:	f7ff fe10 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023c00 	.word	0x40023c00

0800134c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x54>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x58>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fe61 	bl	8002032 <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00e      	b.n	8001398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	d80a      	bhi.n	8001396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 fe29 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_InitTick+0x5c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000004 	.word	0x20000004

080013ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x20>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x24>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_IncTick+0x24>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008
 80013d0:	200041a4 	.word	0x200041a4

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200041a4 	.word	0x200041a4

080013ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff ffee 	bl	80013d4 <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d005      	beq.n	8001412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_Delay+0x44>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001412:	bf00      	nop
 8001414:	f7ff ffde 	bl	80013d4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8f7      	bhi.n	8001414 <HAL_Delay+0x28>
  {
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008

08001434 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e033      	b.n	80014b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fdac 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800147a:	f023 0302 	bic.w	r3, r3, #2
 800147e:	f043 0202 	orr.w	r2, r3, #2
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fa54 	bl	8001934 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f023 0303 	bic.w	r3, r3, #3
 800149a:	f043 0201 	orr.w	r2, r3, #1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	; 0x40
 80014a2:	e001      	b.n	80014a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_ADC_Start_DMA+0x1e>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e0e9      	b.n	80016ae <HAL_ADC_Start_DMA+0x1f2>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d018      	beq.n	8001522 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001500:	4b6d      	ldr	r3, [pc, #436]	; (80016b8 <HAL_ADC_Start_DMA+0x1fc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a6d      	ldr	r2, [pc, #436]	; (80016bc <HAL_ADC_Start_DMA+0x200>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0c9a      	lsrs	r2, r3, #18
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001514:	e002      	b.n	800151c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	3b01      	subs	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f9      	bne.n	8001516 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001530:	d107      	bne.n	8001542 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001540:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b01      	cmp	r3, #1
 800154e:	f040 80a1 	bne.w	8001694 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d007      	beq.n	8001584 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800157c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001590:	d106      	bne.n	80015a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f023 0206 	bic.w	r2, r3, #6
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
 800159e:	e002      	b.n	80015a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ae:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <HAL_ADC_Start_DMA+0x204>)
 80015b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b6:	4a43      	ldr	r2, [pc, #268]	; (80016c4 <HAL_ADC_Start_DMA+0x208>)
 80015b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015be:	4a42      	ldr	r2, [pc, #264]	; (80016c8 <HAL_ADC_Start_DMA+0x20c>)
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c6:	4a41      	ldr	r2, [pc, #260]	; (80016cc <HAL_ADC_Start_DMA+0x210>)
 80015c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	334c      	adds	r3, #76	; 0x4c
 80015fe:	4619      	mov	r1, r3
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f000 feb8 	bl	8002378 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	2b00      	cmp	r3, #0
 8001612:	d12a      	bne.n	800166a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a2d      	ldr	r2, [pc, #180]	; (80016d0 <HAL_ADC_Start_DMA+0x214>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d015      	beq.n	800164a <HAL_ADC_Start_DMA+0x18e>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a2c      	ldr	r2, [pc, #176]	; (80016d4 <HAL_ADC_Start_DMA+0x218>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d105      	bne.n	8001634 <HAL_ADC_Start_DMA+0x178>
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_ADC_Start_DMA+0x204>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00a      	beq.n	800164a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <HAL_ADC_Start_DMA+0x21c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d136      	bne.n	80016ac <HAL_ADC_Start_DMA+0x1f0>
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <HAL_ADC_Start_DMA+0x204>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	d130      	bne.n	80016ac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d129      	bne.n	80016ac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e020      	b.n	80016ac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <HAL_ADC_Start_DMA+0x214>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d11b      	bne.n	80016ac <HAL_ADC_Start_DMA+0x1f0>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d114      	bne.n	80016ac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	e00b      	b.n	80016ac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	f043 0210 	orr.w	r2, r3, #16
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000000 	.word	0x20000000
 80016bc:	431bde83 	.word	0x431bde83
 80016c0:	40012300 	.word	0x40012300
 80016c4:	08001b2d 	.word	0x08001b2d
 80016c8:	08001be7 	.word	0x08001be7
 80016cc:	08001c03 	.word	0x08001c03
 80016d0:	40012000 	.word	0x40012000
 80016d4:	40012100 	.word	0x40012100
 80016d8:	40012200 	.word	0x40012200

080016dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1c>
 8001708:	2302      	movs	r3, #2
 800170a:	e105      	b.n	8001918 <HAL_ADC_ConfigChannel+0x228>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b09      	cmp	r3, #9
 800171a:	d925      	bls.n	8001768 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68d9      	ldr	r1, [r3, #12]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	3b1e      	subs	r3, #30
 8001732:	2207      	movs	r2, #7
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43da      	mvns	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	400a      	ands	r2, r1
 8001740:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68d9      	ldr	r1, [r3, #12]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	4603      	mov	r3, r0
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4403      	add	r3, r0
 800175a:	3b1e      	subs	r3, #30
 800175c:	409a      	lsls	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	e022      	b.n	80017ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6919      	ldr	r1, [r3, #16]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	2207      	movs	r2, #7
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	400a      	ands	r2, r1
 800178a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6919      	ldr	r1, [r3, #16]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	4603      	mov	r3, r0
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4403      	add	r3, r0
 80017a4:	409a      	lsls	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d824      	bhi.n	8001800 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	3b05      	subs	r3, #5
 80017c8:	221f      	movs	r2, #31
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	400a      	ands	r2, r1
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b05      	subs	r3, #5
 80017f2:	fa00 f203 	lsl.w	r2, r0, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
 80017fe:	e04c      	b.n	800189a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b0c      	cmp	r3, #12
 8001806:	d824      	bhi.n	8001852 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b23      	subs	r3, #35	; 0x23
 800181a:	221f      	movs	r2, #31
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43da      	mvns	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	400a      	ands	r2, r1
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b23      	subs	r3, #35	; 0x23
 8001844:	fa00 f203 	lsl.w	r2, r0, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
 8001850:	e023      	b.n	800189a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b41      	subs	r3, #65	; 0x41
 8001864:	221f      	movs	r2, #31
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	400a      	ands	r2, r1
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b41      	subs	r3, #65	; 0x41
 800188e:	fa00 f203 	lsl.w	r2, r0, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_ADC_ConfigChannel+0x234>)
 800189c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <HAL_ADC_ConfigChannel+0x238>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d109      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x1cc>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d105      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_ADC_ConfigChannel+0x238>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d123      	bne.n	800190e <HAL_ADC_ConfigChannel+0x21e>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d003      	beq.n	80018d6 <HAL_ADC_ConfigChannel+0x1e6>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b11      	cmp	r3, #17
 80018d4:	d11b      	bne.n	800190e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d111      	bne.n	800190e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_ADC_ConfigChannel+0x23c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_ADC_ConfigChannel+0x240>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9a      	lsrs	r2, r3, #18
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001900:	e002      	b.n	8001908 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3b01      	subs	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f9      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40012300 	.word	0x40012300
 8001928:	40012000 	.word	0x40012000
 800192c:	20000000 	.word	0x20000000
 8001930:	431bde83 	.word	0x431bde83

08001934 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800193c:	4b79      	ldr	r3, [pc, #484]	; (8001b24 <ADC_Init+0x1f0>)
 800193e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	431a      	orrs	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	021a      	lsls	r2, r3, #8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800198c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <ADC_Init+0x1f4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d022      	beq.n	8001a12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e00f      	b.n	8001a32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0202 	bic.w	r2, r2, #2
 8001a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7e1b      	ldrb	r3, [r3, #24]
 8001a4c:	005a      	lsls	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	035a      	lsls	r2, r3, #13
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	e007      	b.n	8001aa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	051a      	lsls	r2, r3, #20
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aea:	025a      	lsls	r2, r3, #9
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	029a      	lsls	r2, r3, #10
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40012300 	.word	0x40012300
 8001b28:	0f000001 	.word	0x0f000001

08001b2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d13c      	bne.n	8001bc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d12b      	bne.n	8001bb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d127      	bne.n	8001bb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d119      	bne.n	8001bb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0220 	bic.w	r2, r2, #32
 8001b92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7fe fe5b 	bl	8000874 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bbe:	e00e      	b.n	8001bde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff fd85 	bl	80016dc <HAL_ADC_ErrorCallback>
}
 8001bd2:	e004      	b.n	8001bde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f7fe fdcf 	bl	8000798 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2240      	movs	r2, #64	; 0x40
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f043 0204 	orr.w	r2, r3, #4
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff fd5a 	bl	80016dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0ed      	b.n	8001e1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fa26 	bl	80010a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c64:	f7ff fbb6 	bl	80013d4 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c6a:	e012      	b.n	8001c92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c6c:	f7ff fbb2 	bl	80013d4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b0a      	cmp	r3, #10
 8001c78:	d90b      	bls.n	8001c92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2205      	movs	r2, #5
 8001c8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0c5      	b.n	8001e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0e5      	beq.n	8001c6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0202 	bic.w	r2, r2, #2
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb0:	f7ff fb90 	bl	80013d4 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cb6:	e012      	b.n	8001cde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb8:	f7ff fb8c 	bl	80013d4 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d90b      	bls.n	8001cde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2205      	movs	r2, #5
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e09f      	b.n	8001e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e5      	bne.n	8001cb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7e1b      	ldrb	r3, [r3, #24]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d108      	bne.n	8001d06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	e007      	b.n	8001d16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7e5b      	ldrb	r3, [r3, #25]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d108      	bne.n	8001d30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e007      	b.n	8001d40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e9b      	ldrb	r3, [r3, #26]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d108      	bne.n	8001d5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e007      	b.n	8001d6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0220 	bic.w	r2, r2, #32
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7edb      	ldrb	r3, [r3, #27]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d108      	bne.n	8001d84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0210 	bic.w	r2, r2, #16
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e007      	b.n	8001d94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0210 	orr.w	r2, r2, #16
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7f1b      	ldrb	r3, [r3, #28]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d108      	bne.n	8001dae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0208 	orr.w	r2, r2, #8
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e007      	b.n	8001dbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0208 	bic.w	r2, r2, #8
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7f5b      	ldrb	r3, [r3, #29]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d108      	bne.n	8001dd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0204 	orr.w	r2, r2, #4
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e007      	b.n	8001de8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0204 	bic.w	r2, r2, #4
 8001de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	ea42 0103 	orr.w	r1, r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	1e5a      	subs	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4907      	ldr	r1, [pc, #28]	; (8001ec4 <__NVIC_EnableIRQ+0x38>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	; (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	; (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f7ff ff8e 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff29 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff3e 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff8e 	bl	8001f1c <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff31 	bl	8001e8c <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa2 	bl	8001f84 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e014      	b.n	8002086 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	791b      	ldrb	r3, [r3, #4]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff f85f 	bl	8001130 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2202      	movs	r2, #2
 8002076:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	795b      	ldrb	r3, [r3, #5]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_DAC_Start+0x16>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e040      	b.n	8002126 <HAL_DAC_Start+0x98>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6819      	ldr	r1, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2201      	movs	r2, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10f      	bne.n	80020ee <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80020d8:	2b3c      	cmp	r3, #60	; 0x3c
 80020da:	d11d      	bne.n	8002118 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	e014      	b.n	8002118 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	213c      	movs	r1, #60	; 0x3c
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	429a      	cmp	r2, r3
 8002106:	d107      	bne.n	8002118 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0202 	orr.w	r2, r2, #2
 8002116:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002132:	b480      	push	{r7}
 8002134:	b087      	sub	sp, #28
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	3308      	adds	r3, #8
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e004      	b.n	8002166 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	3314      	adds	r3, #20
 8002164:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	461a      	mov	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	795b      	ldrb	r3, [r3, #5]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_DAC_ConfigChannel+0x18>
 8002190:	2302      	movs	r3, #2
 8002192:	e03c      	b.n	800220e <HAL_DAC_ConfigChannel+0x92>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2202      	movs	r2, #2
 800219e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4013      	ands	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	22c0      	movs	r2, #192	; 0xc0
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	400a      	ands	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff f8d4 	bl	80013d4 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e099      	b.n	800236c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002258:	e00f      	b.n	800227a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800225a:	f7ff f8bb 	bl	80013d4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b05      	cmp	r3, #5
 8002266:	d908      	bls.n	800227a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2203      	movs	r2, #3
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e078      	b.n	800236c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e8      	bne.n	800225a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4b38      	ldr	r3, [pc, #224]	; (8002374 <HAL_DMA_Init+0x158>)
 8002294:	4013      	ands	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d107      	bne.n	80022e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	4313      	orrs	r3, r2
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f023 0307 	bic.w	r3, r3, #7
 80022fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4313      	orrs	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	2b04      	cmp	r3, #4
 800230c:	d117      	bne.n	800233e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00e      	beq.n	800233e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fa6f 	bl	8002804 <DMA_CheckFifoParam>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2240      	movs	r2, #64	; 0x40
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800233a:	2301      	movs	r3, #1
 800233c:	e016      	b.n	800236c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fa26 	bl	8002798 <DMA_CalcBaseAndBitshift>
 800234c:	4603      	mov	r3, r0
 800234e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	223f      	movs	r2, #63	; 0x3f
 8002356:	409a      	lsls	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	f010803f 	.word	0xf010803f

08002378 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_DMA_Start_IT+0x26>
 800239a:	2302      	movs	r3, #2
 800239c:	e040      	b.n	8002420 <HAL_DMA_Start_IT+0xa8>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d12f      	bne.n	8002412 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f9b8 	bl	800273c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	223f      	movs	r2, #63	; 0x3f
 80023d2:	409a      	lsls	r2, r3
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0216 	orr.w	r2, r2, #22
 80023e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0208 	orr.w	r2, r2, #8
 80023fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e005      	b.n	800241e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800241a:	2302      	movs	r3, #2
 800241c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002434:	4b8e      	ldr	r3, [pc, #568]	; (8002670 <HAL_DMA_IRQHandler+0x248>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a8e      	ldr	r2, [pc, #568]	; (8002674 <HAL_DMA_IRQHandler+0x24c>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0a9b      	lsrs	r3, r3, #10
 8002440:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	2208      	movs	r2, #8
 8002454:	409a      	lsls	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01a      	beq.n	8002494 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0204 	bic.w	r2, r2, #4
 800247a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	2208      	movs	r2, #8
 8002482:	409a      	lsls	r2, r3
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	2201      	movs	r2, #1
 800249a:	409a      	lsls	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d012      	beq.n	80024ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	2201      	movs	r2, #1
 80024b8:	409a      	lsls	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	2204      	movs	r2, #4
 80024d0:	409a      	lsls	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d012      	beq.n	8002500 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00b      	beq.n	8002500 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	2204      	movs	r2, #4
 80024ee:	409a      	lsls	r2, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	f043 0204 	orr.w	r2, r3, #4
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	2210      	movs	r2, #16
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d043      	beq.n	8002598 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03c      	beq.n	8002598 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	2210      	movs	r2, #16
 8002524:	409a      	lsls	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d018      	beq.n	800256a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d024      	beq.n	8002598 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
 8002556:	e01f      	b.n	8002598 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01b      	beq.n	8002598 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4798      	blx	r3
 8002568:	e016      	b.n	8002598 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0208 	bic.w	r2, r2, #8
 8002586:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	2220      	movs	r2, #32
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 808f 	beq.w	80026c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8087 	beq.w	80026c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	2220      	movs	r2, #32
 80025c0:	409a      	lsls	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d136      	bne.n	8002640 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0216 	bic.w	r2, r2, #22
 80025e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d103      	bne.n	8002602 <HAL_DMA_IRQHandler+0x1da>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0208 	bic.w	r2, r2, #8
 8002610:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	223f      	movs	r2, #63	; 0x3f
 8002618:	409a      	lsls	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002632:	2b00      	cmp	r3, #0
 8002634:	d07e      	beq.n	8002734 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
        }
        return;
 800263e:	e079      	b.n	8002734 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01d      	beq.n	800268a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	2b00      	cmp	r3, #0
 8002662:	d031      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
 800266c:	e02c      	b.n	80026c8 <HAL_DMA_IRQHandler+0x2a0>
 800266e:	bf00      	nop
 8002670:	20000000 	.word	0x20000000
 8002674:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
 8002688:	e01e      	b.n	80026c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10f      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0210 	bic.w	r2, r2, #16
 80026a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d032      	beq.n	8002736 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d022      	beq.n	8002722 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2205      	movs	r2, #5
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d307      	bcc.n	8002710 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f2      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x2cc>
 800270e:	e000      	b.n	8002712 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002710:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
 8002732:	e000      	b.n	8002736 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002734:	bf00      	nop
    }
  }
}
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002758:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b40      	cmp	r3, #64	; 0x40
 8002768:	d108      	bne.n	800277c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800277a:	e007      	b.n	800278c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	60da      	str	r2, [r3, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3b10      	subs	r3, #16
 80027a8:	4a14      	ldr	r2, [pc, #80]	; (80027fc <DMA_CalcBaseAndBitshift+0x64>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	091b      	lsrs	r3, r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027b2:	4a13      	ldr	r2, [pc, #76]	; (8002800 <DMA_CalcBaseAndBitshift+0x68>)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d909      	bls.n	80027da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	1d1a      	adds	r2, r3, #4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	659a      	str	r2, [r3, #88]	; 0x58
 80027d8:	e007      	b.n	80027ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027e2:	f023 0303 	bic.w	r3, r3, #3
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	aaaaaaab 	.word	0xaaaaaaab
 8002800:	08003bd4 	.word	0x08003bd4

08002804 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d11f      	bne.n	800285e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d856      	bhi.n	80028d2 <DMA_CheckFifoParam+0xce>
 8002824:	a201      	add	r2, pc, #4	; (adr r2, 800282c <DMA_CheckFifoParam+0x28>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	0800283d 	.word	0x0800283d
 8002830:	0800284f 	.word	0x0800284f
 8002834:	0800283d 	.word	0x0800283d
 8002838:	080028d3 	.word	0x080028d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d046      	beq.n	80028d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284c:	e043      	b.n	80028d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002856:	d140      	bne.n	80028da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285c:	e03d      	b.n	80028da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002866:	d121      	bne.n	80028ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d837      	bhi.n	80028de <DMA_CheckFifoParam+0xda>
 800286e:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <DMA_CheckFifoParam+0x70>)
 8002870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002874:	08002885 	.word	0x08002885
 8002878:	0800288b 	.word	0x0800288b
 800287c:	08002885 	.word	0x08002885
 8002880:	0800289d 	.word	0x0800289d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
      break;
 8002888:	e030      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d025      	beq.n	80028e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289a:	e022      	b.n	80028e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a4:	d11f      	bne.n	80028e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028aa:	e01c      	b.n	80028e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d903      	bls.n	80028ba <DMA_CheckFifoParam+0xb6>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d003      	beq.n	80028c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028b8:	e018      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      break;
 80028be:	e015      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00e      	beq.n	80028ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e00b      	b.n	80028ea <DMA_CheckFifoParam+0xe6>
      break;
 80028d2:	bf00      	nop
 80028d4:	e00a      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028d6:	bf00      	nop
 80028d8:	e008      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e006      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e004      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e002      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;   
 80028e6:	bf00      	nop
 80028e8:	e000      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
    }
  } 
  
  return status; 
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e16b      	b.n	8002bf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002918:	2201      	movs	r2, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	f040 815a 	bne.w	8002bea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d005      	beq.n	800294e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294a:	2b02      	cmp	r3, #2
 800294c:	d130      	bne.n	80029b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 0201 	and.w	r2, r3, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d017      	beq.n	80029ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d123      	bne.n	8002a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	08da      	lsrs	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3208      	adds	r2, #8
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0203 	and.w	r2, r3, #3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80b4 	beq.w	8002bea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b60      	ldr	r3, [pc, #384]	; (8002c08 <HAL_GPIO_Init+0x30c>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a5f      	ldr	r2, [pc, #380]	; (8002c08 <HAL_GPIO_Init+0x30c>)
 8002a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b5d      	ldr	r3, [pc, #372]	; (8002c08 <HAL_GPIO_Init+0x30c>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9e:	4a5b      	ldr	r2, [pc, #364]	; (8002c0c <HAL_GPIO_Init+0x310>)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a52      	ldr	r2, [pc, #328]	; (8002c10 <HAL_GPIO_Init+0x314>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d02b      	beq.n	8002b22 <HAL_GPIO_Init+0x226>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a51      	ldr	r2, [pc, #324]	; (8002c14 <HAL_GPIO_Init+0x318>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d025      	beq.n	8002b1e <HAL_GPIO_Init+0x222>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a50      	ldr	r2, [pc, #320]	; (8002c18 <HAL_GPIO_Init+0x31c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01f      	beq.n	8002b1a <HAL_GPIO_Init+0x21e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4f      	ldr	r2, [pc, #316]	; (8002c1c <HAL_GPIO_Init+0x320>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d019      	beq.n	8002b16 <HAL_GPIO_Init+0x21a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4e      	ldr	r2, [pc, #312]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_GPIO_Init+0x216>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4d      	ldr	r2, [pc, #308]	; (8002c24 <HAL_GPIO_Init+0x328>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00d      	beq.n	8002b0e <HAL_GPIO_Init+0x212>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4c      	ldr	r2, [pc, #304]	; (8002c28 <HAL_GPIO_Init+0x32c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d007      	beq.n	8002b0a <HAL_GPIO_Init+0x20e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4b      	ldr	r2, [pc, #300]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_GPIO_Init+0x20a>
 8002b02:	2307      	movs	r3, #7
 8002b04:	e00e      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b06:	2308      	movs	r3, #8
 8002b08:	e00c      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b0a:	2306      	movs	r3, #6
 8002b0c:	e00a      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b0e:	2305      	movs	r3, #5
 8002b10:	e008      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b12:	2304      	movs	r3, #4
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b16:	2303      	movs	r3, #3
 8002b18:	e004      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e002      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_GPIO_Init+0x228>
 8002b22:	2300      	movs	r3, #0
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	f002 0203 	and.w	r2, r2, #3
 8002b2a:	0092      	lsls	r2, r2, #2
 8002b2c:	4093      	lsls	r3, r2
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b34:	4935      	ldr	r1, [pc, #212]	; (8002c0c <HAL_GPIO_Init+0x310>)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b42:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b66:	4a32      	ldr	r2, [pc, #200]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b6c:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b90:	4a27      	ldr	r2, [pc, #156]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b96:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be4:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3301      	adds	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b0f      	cmp	r3, #15
 8002bf4:	f67f ae90 	bls.w	8002918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	3724      	adds	r7, #36	; 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40013800 	.word	0x40013800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40020800 	.word	0x40020800
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40021400 	.word	0x40021400
 8002c28:	40021800 	.word	0x40021800
 8002c2c:	40021c00 	.word	0x40021c00
 8002c30:	40013c00 	.word	0x40013c00

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c50:	e003      	b.n	8002c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c78:	887a      	ldrh	r2, [r7, #2]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	041a      	lsls	r2, r3, #16
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	887b      	ldrh	r3, [r7, #2]
 8002c86:	400b      	ands	r3, r1
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e267      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d075      	beq.n	8002da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cba:	4b88      	ldr	r3, [pc, #544]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc6:	4b85      	ldr	r3, [pc, #532]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d112      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b82      	ldr	r3, [pc, #520]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cde:	d10b      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	4b7e      	ldr	r3, [pc, #504]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d05b      	beq.n	8002da4 <HAL_RCC_OscConfig+0x108>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d157      	bne.n	8002da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e242      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d00:	d106      	bne.n	8002d10 <HAL_RCC_OscConfig+0x74>
 8002d02:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a75      	ldr	r2, [pc, #468]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e01d      	b.n	8002d4c <HAL_RCC_OscConfig+0xb0>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x98>
 8002d1a:	4b70      	ldr	r3, [pc, #448]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6f      	ldr	r2, [pc, #444]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6c      	ldr	r2, [pc, #432]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0xb0>
 8002d34:	4b69      	ldr	r3, [pc, #420]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a68      	ldr	r2, [pc, #416]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b66      	ldr	r3, [pc, #408]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fb3e 	bl	80013d4 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fe fb3a 	bl	80013d4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e207      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b5b      	ldr	r3, [pc, #364]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0xc0>
 8002d7a:	e014      	b.n	8002da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fb2a 	bl	80013d4 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fb26 	bl	80013d4 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e1f3      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	4b51      	ldr	r3, [pc, #324]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0xe8>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d063      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db2:	4b4a      	ldr	r3, [pc, #296]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d11c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b44      	ldr	r3, [pc, #272]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x152>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1c7      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4937      	ldr	r1, [pc, #220]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	e03a      	b.n	8002e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0c:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <HAL_RCC_OscConfig+0x244>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe fadf 	bl	80013d4 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fadb 	bl	80013d4 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e1a8      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b28      	ldr	r3, [pc, #160]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4925      	ldr	r1, [pc, #148]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
 8002e4c:	e015      	b.n	8002e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_RCC_OscConfig+0x244>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fabe 	bl	80013d4 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7fe faba 	bl	80013d4 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e187      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d036      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_RCC_OscConfig+0x248>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe fa9e 	bl	80013d4 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9c:	f7fe fa9a 	bl	80013d4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e167      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x200>
 8002eba:	e01b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_RCC_OscConfig+0x248>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fa87 	bl	80013d4 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	e00e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eca:	f7fe fa83 	bl	80013d4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d907      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e150      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	42470000 	.word	0x42470000
 8002ee4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ea      	bne.n	8002eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8097 	beq.w	8003030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10f      	bne.n	8002f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	4b7d      	ldr	r3, [pc, #500]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a7c      	ldr	r2, [pc, #496]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	4b7a      	ldr	r3, [pc, #488]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b77      	ldr	r3, [pc, #476]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3e:	4b74      	ldr	r3, [pc, #464]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a73      	ldr	r2, [pc, #460]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fa43 	bl	80013d4 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fe fa3f 	bl	80013d4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e10c      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2ea>
 8002f78:	4b64      	ldr	r3, [pc, #400]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a63      	ldr	r2, [pc, #396]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
 8002f84:	e01c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x324>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x30c>
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a5e      	ldr	r2, [pc, #376]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9a:	4b5c      	ldr	r3, [pc, #368]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a5b      	ldr	r2, [pc, #364]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x324>
 8002fa8:	4b58      	ldr	r3, [pc, #352]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a57      	ldr	r2, [pc, #348]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	4b55      	ldr	r3, [pc, #340]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a54      	ldr	r2, [pc, #336]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 0304 	bic.w	r3, r3, #4
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe fa04 	bl	80013d4 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fa00 	bl	80013d4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0cb      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	4b49      	ldr	r3, [pc, #292]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ee      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x334>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff4:	f7fe f9ee 	bl	80013d4 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe f9ea 	bl	80013d4 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0b5      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	4b3e      	ldr	r3, [pc, #248]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1ee      	bne.n	8002ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003024:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	4a38      	ldr	r2, [pc, #224]	; (800310c <HAL_RCC_OscConfig+0x470>)
 800302a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80a1 	beq.w	800317c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303a:	4b34      	ldr	r3, [pc, #208]	; (800310c <HAL_RCC_OscConfig+0x470>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b08      	cmp	r3, #8
 8003044:	d05c      	beq.n	8003100 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d141      	bne.n	80030d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b31      	ldr	r3, [pc, #196]	; (8003114 <HAL_RCC_OscConfig+0x478>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe f9be 	bl	80013d4 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe f9ba 	bl	80013d4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e087      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b27      	ldr	r3, [pc, #156]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	3b01      	subs	r3, #1
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	491b      	ldr	r1, [pc, #108]	; (800310c <HAL_RCC_OscConfig+0x470>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x478>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe f993 	bl	80013d4 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fe f98f 	bl	80013d4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e05c      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_RCC_OscConfig+0x470>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x416>
 80030d0:	e054      	b.n	800317c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_RCC_OscConfig+0x478>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe f97c 	bl	80013d4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fe f978 	bl	80013d4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e045      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_OscConfig+0x470>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x444>
 80030fe:	e03d      	b.n	800317c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e038      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
 800310c:	40023800 	.word	0x40023800
 8003110:	40007000 	.word	0x40007000
 8003114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_RCC_OscConfig+0x4ec>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d028      	beq.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d121      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d11a      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800314e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	3b01      	subs	r3, #1
 8003162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0cc      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b68      	ldr	r3, [pc, #416]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d90c      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b65      	ldr	r3, [pc, #404]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b63      	ldr	r3, [pc, #396]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0b8      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e0:	4b59      	ldr	r3, [pc, #356]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a58      	ldr	r2, [pc, #352]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f8:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a52      	ldr	r2, [pc, #328]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	494d      	ldr	r1, [pc, #308]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d044      	beq.n	80032ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d119      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003246:	2b03      	cmp	r3, #3
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e06f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e067      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4934      	ldr	r1, [pc, #208]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800327c:	f7fe f8aa 	bl	80013d4 <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	e00a      	b.n	800329a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003284:	f7fe f8a6 	bl	80013d4 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e04f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 020c 	and.w	r2, r3, #12
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1eb      	bne.n	8003284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d20c      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b22      	ldr	r3, [pc, #136]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e032      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4916      	ldr	r1, [pc, #88]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	490e      	ldr	r1, [pc, #56]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003312:	f000 f821 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003316:	4602      	mov	r2, r0
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	490a      	ldr	r1, [pc, #40]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	5ccb      	ldrb	r3, [r1, r3]
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe f80a 	bl	800134c <HAL_InitTick>

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023c00 	.word	0x40023c00
 8003348:	40023800 	.word	0x40023800
 800334c:	08003bc4 	.word	0x08003bc4
 8003350:	20000000 	.word	0x20000000
 8003354:	20000004 	.word	0x20000004

08003358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800335c:	b094      	sub	sp, #80	; 0x50
 800335e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	647b      	str	r3, [r7, #68]	; 0x44
 8003364:	2300      	movs	r3, #0
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003368:	2300      	movs	r3, #0
 800336a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003370:	4b79      	ldr	r3, [pc, #484]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b08      	cmp	r3, #8
 800337a:	d00d      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x40>
 800337c:	2b08      	cmp	r3, #8
 800337e:	f200 80e1 	bhi.w	8003544 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x34>
 8003386:	2b04      	cmp	r3, #4
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0x3a>
 800338a:	e0db      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_GetSysClockFreq+0x204>)
 800338e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003390:	e0db      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003392:	4b73      	ldr	r3, [pc, #460]	; (8003560 <HAL_RCC_GetSysClockFreq+0x208>)
 8003394:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003396:	e0d8      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003398:	4b6f      	ldr	r3, [pc, #444]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a2:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d063      	beq.n	8003476 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ae:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	2200      	movs	r2, #0
 80033b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
 80033c2:	2300      	movs	r3, #0
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
 80033c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ca:	4622      	mov	r2, r4
 80033cc:	462b      	mov	r3, r5
 80033ce:	f04f 0000 	mov.w	r0, #0
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	0159      	lsls	r1, r3, #5
 80033d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033dc:	0150      	lsls	r0, r2, #5
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4621      	mov	r1, r4
 80033e4:	1a51      	subs	r1, r2, r1
 80033e6:	6139      	str	r1, [r7, #16]
 80033e8:	4629      	mov	r1, r5
 80033ea:	eb63 0301 	sbc.w	r3, r3, r1
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033fc:	4659      	mov	r1, fp
 80033fe:	018b      	lsls	r3, r1, #6
 8003400:	4651      	mov	r1, sl
 8003402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003406:	4651      	mov	r1, sl
 8003408:	018a      	lsls	r2, r1, #6
 800340a:	4651      	mov	r1, sl
 800340c:	ebb2 0801 	subs.w	r8, r2, r1
 8003410:	4659      	mov	r1, fp
 8003412:	eb63 0901 	sbc.w	r9, r3, r1
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800342a:	4690      	mov	r8, r2
 800342c:	4699      	mov	r9, r3
 800342e:	4623      	mov	r3, r4
 8003430:	eb18 0303 	adds.w	r3, r8, r3
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	462b      	mov	r3, r5
 8003438:	eb49 0303 	adc.w	r3, r9, r3
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800344a:	4629      	mov	r1, r5
 800344c:	024b      	lsls	r3, r1, #9
 800344e:	4621      	mov	r1, r4
 8003450:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003454:	4621      	mov	r1, r4
 8003456:	024a      	lsls	r2, r1, #9
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345e:	2200      	movs	r2, #0
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
 8003462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003464:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003468:	f7fc feae 	bl	80001c8 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4613      	mov	r3, r2
 8003472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003474:	e058      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	2200      	movs	r2, #0
 800347e:	4618      	mov	r0, r3
 8003480:	4611      	mov	r1, r2
 8003482:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003486:	623b      	str	r3, [r7, #32]
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	f04f 0000 	mov.w	r0, #0
 8003498:	f04f 0100 	mov.w	r1, #0
 800349c:	0159      	lsls	r1, r3, #5
 800349e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a2:	0150      	lsls	r0, r2, #5
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4641      	mov	r1, r8
 80034aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ae:	4649      	mov	r1, r9
 80034b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034c8:	ebb2 040a 	subs.w	r4, r2, sl
 80034cc:	eb63 050b 	sbc.w	r5, r3, fp
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	00eb      	lsls	r3, r5, #3
 80034da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034de:	00e2      	lsls	r2, r4, #3
 80034e0:	4614      	mov	r4, r2
 80034e2:	461d      	mov	r5, r3
 80034e4:	4643      	mov	r3, r8
 80034e6:	18e3      	adds	r3, r4, r3
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	464b      	mov	r3, r9
 80034ec:	eb45 0303 	adc.w	r3, r5, r3
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fe:	4629      	mov	r1, r5
 8003500:	028b      	lsls	r3, r1, #10
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003508:	4621      	mov	r1, r4
 800350a:	028a      	lsls	r2, r1, #10
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003512:	2200      	movs	r2, #0
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	61fa      	str	r2, [r7, #28]
 8003518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800351c:	f7fc fe54 	bl	80001c8 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4613      	mov	r3, r2
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800353a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003542:	e002      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetSysClockFreq+0x204>)
 8003546:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800354c:	4618      	mov	r0, r3
 800354e:	3750      	adds	r7, #80	; 0x50
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	00f42400 	.word	0x00f42400
 8003560:	007a1200 	.word	0x007a1200

08003564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e041      	b.n	80035fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fe14 	bl	80011b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f000 f8f4 	bl	8003790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_TIM_ConfigClockSource+0x1c>
 800361a:	2302      	movs	r3, #2
 800361c:	e0b4      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x186>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800363c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003644:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003656:	d03e      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0xd4>
 8003658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365c:	f200 8087 	bhi.w	800376e <HAL_TIM_ConfigClockSource+0x16c>
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003664:	f000 8086 	beq.w	8003774 <HAL_TIM_ConfigClockSource+0x172>
 8003668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366c:	d87f      	bhi.n	800376e <HAL_TIM_ConfigClockSource+0x16c>
 800366e:	2b70      	cmp	r3, #112	; 0x70
 8003670:	d01a      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0xa6>
 8003672:	2b70      	cmp	r3, #112	; 0x70
 8003674:	d87b      	bhi.n	800376e <HAL_TIM_ConfigClockSource+0x16c>
 8003676:	2b60      	cmp	r3, #96	; 0x60
 8003678:	d050      	beq.n	800371c <HAL_TIM_ConfigClockSource+0x11a>
 800367a:	2b60      	cmp	r3, #96	; 0x60
 800367c:	d877      	bhi.n	800376e <HAL_TIM_ConfigClockSource+0x16c>
 800367e:	2b50      	cmp	r3, #80	; 0x50
 8003680:	d03c      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0xfa>
 8003682:	2b50      	cmp	r3, #80	; 0x50
 8003684:	d873      	bhi.n	800376e <HAL_TIM_ConfigClockSource+0x16c>
 8003686:	2b40      	cmp	r3, #64	; 0x40
 8003688:	d058      	beq.n	800373c <HAL_TIM_ConfigClockSource+0x13a>
 800368a:	2b40      	cmp	r3, #64	; 0x40
 800368c:	d86f      	bhi.n	800376e <HAL_TIM_ConfigClockSource+0x16c>
 800368e:	2b30      	cmp	r3, #48	; 0x30
 8003690:	d064      	beq.n	800375c <HAL_TIM_ConfigClockSource+0x15a>
 8003692:	2b30      	cmp	r3, #48	; 0x30
 8003694:	d86b      	bhi.n	800376e <HAL_TIM_ConfigClockSource+0x16c>
 8003696:	2b20      	cmp	r3, #32
 8003698:	d060      	beq.n	800375c <HAL_TIM_ConfigClockSource+0x15a>
 800369a:	2b20      	cmp	r3, #32
 800369c:	d867      	bhi.n	800376e <HAL_TIM_ConfigClockSource+0x16c>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d05c      	beq.n	800375c <HAL_TIM_ConfigClockSource+0x15a>
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d05a      	beq.n	800375c <HAL_TIM_ConfigClockSource+0x15a>
 80036a6:	e062      	b.n	800376e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	6899      	ldr	r1, [r3, #8]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f000 f984 	bl	80039c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	609a      	str	r2, [r3, #8]
      break;
 80036d4:	e04f      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6899      	ldr	r1, [r3, #8]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f000 f96d 	bl	80039c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f8:	609a      	str	r2, [r3, #8]
      break;
 80036fa:	e03c      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	461a      	mov	r2, r3
 800370a:	f000 f8e1 	bl	80038d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2150      	movs	r1, #80	; 0x50
 8003714:	4618      	mov	r0, r3
 8003716:	f000 f93a 	bl	800398e <TIM_ITRx_SetConfig>
      break;
 800371a:	e02c      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	461a      	mov	r2, r3
 800372a:	f000 f900 	bl	800392e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2160      	movs	r1, #96	; 0x60
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f92a 	bl	800398e <TIM_ITRx_SetConfig>
      break;
 800373a:	e01c      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	461a      	mov	r2, r3
 800374a:	f000 f8c1 	bl	80038d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f91a 	bl	800398e <TIM_ITRx_SetConfig>
      break;
 800375a:	e00c      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f000 f911 	bl	800398e <TIM_ITRx_SetConfig>
      break;
 800376c:	e003      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      break;
 8003772:	e000      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003774:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a40      	ldr	r2, [pc, #256]	; (80038a4 <TIM_Base_SetConfig+0x114>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <TIM_Base_SetConfig+0x40>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ae:	d00f      	beq.n	80037d0 <TIM_Base_SetConfig+0x40>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a3d      	ldr	r2, [pc, #244]	; (80038a8 <TIM_Base_SetConfig+0x118>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <TIM_Base_SetConfig+0x40>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a3c      	ldr	r2, [pc, #240]	; (80038ac <TIM_Base_SetConfig+0x11c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <TIM_Base_SetConfig+0x40>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a3b      	ldr	r2, [pc, #236]	; (80038b0 <TIM_Base_SetConfig+0x120>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_Base_SetConfig+0x40>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a3a      	ldr	r2, [pc, #232]	; (80038b4 <TIM_Base_SetConfig+0x124>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d108      	bne.n	80037e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a2f      	ldr	r2, [pc, #188]	; (80038a4 <TIM_Base_SetConfig+0x114>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d02b      	beq.n	8003842 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f0:	d027      	beq.n	8003842 <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a2c      	ldr	r2, [pc, #176]	; (80038a8 <TIM_Base_SetConfig+0x118>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d023      	beq.n	8003842 <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a2b      	ldr	r2, [pc, #172]	; (80038ac <TIM_Base_SetConfig+0x11c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01f      	beq.n	8003842 <TIM_Base_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a2a      	ldr	r2, [pc, #168]	; (80038b0 <TIM_Base_SetConfig+0x120>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01b      	beq.n	8003842 <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a29      	ldr	r2, [pc, #164]	; (80038b4 <TIM_Base_SetConfig+0x124>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d017      	beq.n	8003842 <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a28      	ldr	r2, [pc, #160]	; (80038b8 <TIM_Base_SetConfig+0x128>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a27      	ldr	r2, [pc, #156]	; (80038bc <TIM_Base_SetConfig+0x12c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00f      	beq.n	8003842 <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a26      	ldr	r2, [pc, #152]	; (80038c0 <TIM_Base_SetConfig+0x130>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00b      	beq.n	8003842 <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a25      	ldr	r2, [pc, #148]	; (80038c4 <TIM_Base_SetConfig+0x134>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d007      	beq.n	8003842 <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a24      	ldr	r2, [pc, #144]	; (80038c8 <TIM_Base_SetConfig+0x138>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a23      	ldr	r2, [pc, #140]	; (80038cc <TIM_Base_SetConfig+0x13c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d108      	bne.n	8003854 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <TIM_Base_SetConfig+0x114>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_Base_SetConfig+0xf8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <TIM_Base_SetConfig+0x124>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d103      	bne.n	8003890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	615a      	str	r2, [r3, #20]
}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010000 	.word	0x40010000
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800
 80038b0:	40000c00 	.word	0x40000c00
 80038b4:	40010400 	.word	0x40010400
 80038b8:	40014000 	.word	0x40014000
 80038bc:	40014400 	.word	0x40014400
 80038c0:	40014800 	.word	0x40014800
 80038c4:	40001800 	.word	0x40001800
 80038c8:	40001c00 	.word	0x40001c00
 80038cc:	40002000 	.word	0x40002000

080038d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f023 0201 	bic.w	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f023 030a 	bic.w	r3, r3, #10
 800390c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800392e:	b480      	push	{r7}
 8003930:	b087      	sub	sp, #28
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f023 0210 	bic.w	r2, r3, #16
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	031b      	lsls	r3, r3, #12
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800396a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f043 0307 	orr.w	r3, r3, #7
 80039b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	609a      	str	r2, [r3, #8]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	021a      	lsls	r2, r3, #8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	609a      	str	r2, [r3, #8]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e05a      	b.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d022      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d01d      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d018      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a17      	ldr	r2, [pc, #92]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40010400 	.word	0x40010400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40001800 	.word	0x40001800

08003afc <memset>:
 8003afc:	4402      	add	r2, r0
 8003afe:	4603      	mov	r3, r0
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d100      	bne.n	8003b06 <memset+0xa>
 8003b04:	4770      	bx	lr
 8003b06:	f803 1b01 	strb.w	r1, [r3], #1
 8003b0a:	e7f9      	b.n	8003b00 <memset+0x4>

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4d0d      	ldr	r5, [pc, #52]	; (8003b44 <__libc_init_array+0x38>)
 8003b10:	4c0d      	ldr	r4, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b12:	1b64      	subs	r4, r4, r5
 8003b14:	10a4      	asrs	r4, r4, #2
 8003b16:	2600      	movs	r6, #0
 8003b18:	42a6      	cmp	r6, r4
 8003b1a:	d109      	bne.n	8003b30 <__libc_init_array+0x24>
 8003b1c:	4d0b      	ldr	r5, [pc, #44]	; (8003b4c <__libc_init_array+0x40>)
 8003b1e:	4c0c      	ldr	r4, [pc, #48]	; (8003b50 <__libc_init_array+0x44>)
 8003b20:	f000 f818 	bl	8003b54 <_init>
 8003b24:	1b64      	subs	r4, r4, r5
 8003b26:	10a4      	asrs	r4, r4, #2
 8003b28:	2600      	movs	r6, #0
 8003b2a:	42a6      	cmp	r6, r4
 8003b2c:	d105      	bne.n	8003b3a <__libc_init_array+0x2e>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b34:	4798      	blx	r3
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7ee      	b.n	8003b18 <__libc_init_array+0xc>
 8003b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3e:	4798      	blx	r3
 8003b40:	3601      	adds	r6, #1
 8003b42:	e7f2      	b.n	8003b2a <__libc_init_array+0x1e>
 8003b44:	08003be4 	.word	0x08003be4
 8003b48:	08003be4 	.word	0x08003be4
 8003b4c:	08003be4 	.word	0x08003be4
 8003b50:	08003be8 	.word	0x08003be8

08003b54 <_init>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr

08003b60 <_fini>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr
